
test_servo_xl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004058  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08004228  08004228  00014228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f8  080044f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080044f8  080044f8  000144f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004500  08004500  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000070  08004578  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08004578  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a872  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ee  00000000  00000000  0002a912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0002c300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  0002cad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262c5  00000000  00000000  0002d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b489  00000000  00000000  0005349d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6fe4  00000000  00000000  0005e926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014590a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b8  00000000  00000000  0014595c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004210 	.word	0x08004210

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004210 	.word	0x08004210

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_GPIO_Init+0x74>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <MX_GPIO_Init+0x74>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_GPIO_Init+0x74>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <MX_GPIO_Init+0x74>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a14      	ldr	r2, [pc, #80]	; (8000628 <MX_GPIO_Init+0x74>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_GPIO_Init+0x74>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_GPIO_Init+0x74>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <MX_GPIO_Init+0x74>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_GPIO_Init+0x74>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_GPIO_Init+0x74>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <MX_GPIO_Init+0x74>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_GPIO_Init+0x74>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800

0800062c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000634:	1d39      	adds	r1, r7, #4
 8000636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800063a:	2201      	movs	r2, #1
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <__io_putchar+0x20>)
 800063e:	f002 f813 	bl	8002668 <HAL_UART_Transmit>
	return ch;
 8000642:	687b      	ldr	r3, [r7, #4]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000090 	.word	0x20000090

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f000 fbd6 	bl	8000e06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f81b 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f7ff ffa9 	bl	80005b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000662:	f000 f989 	bl	8000978 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000666:	f000 f9b7 	bl	80009d8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t id = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		printf("Ping id : %d\r\n", 1);
 800066e:	2101      	movs	r1, #1
 8000670:	4806      	ldr	r0, [pc, #24]	; (800068c <main+0x3c>)
 8000672:	f002 fe3f 	bl	80032f4 <iprintf>
		xl320_ping(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f000 fb2e 	bl	8000cd8 <xl320_ping>
		id++;
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	3301      	adds	r3, #1
 8000680:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000000);
 8000682:	4803      	ldr	r0, [pc, #12]	; (8000690 <main+0x40>)
 8000684:	f000 fc1c 	bl	8000ec0 <HAL_Delay>
		printf("Ping id : %d\r\n", 1);
 8000688:	e7f1      	b.n	800066e <main+0x1e>
 800068a:	bf00      	nop
 800068c:	08004228 	.word	0x08004228
 8000690:	000f4240 	.word	0x000f4240

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fe1e 	bl	80032e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <SystemClock_Config+0xc8>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a27      	ldr	r2, [pc, #156]	; (800075c <SystemClock_Config+0xc8>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <SystemClock_Config+0xc8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006d0:	4b23      	ldr	r3, [pc, #140]	; (8000760 <SystemClock_Config+0xcc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d8:	4a21      	ldr	r2, [pc, #132]	; (8000760 <SystemClock_Config+0xcc>)
 80006da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <SystemClock_Config+0xcc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000700:	230a      	movs	r3, #10
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8000704:	23d2      	movs	r3, #210	; 0xd2
 8000706:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f000 fe89 	bl	800142c <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000720:	f000 f820 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2302      	movs	r3, #2
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000730:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2105      	movs	r1, #5
 8000742:	4618      	mov	r0, r3
 8000744:	f001 f916 	bl	8001974 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800074e:	f000 f809 	bl	8000764 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	; 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800076c:	e7fe      	b.n	800076c <Error_Handler+0x8>
	...

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_MspInit+0x44>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <HAL_MspInit+0x44>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	; 0x40
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <HAL_MspInit+0x44>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_MspInit+0x44>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <HAL_MspInit+0x44>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000798:	6453      	str	r3, [r2, #68]	; 0x44
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_MspInit+0x44>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80007bc:	e7fe      	b.n	80007bc <NMI_Handler+0x4>

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <MemManage_Handler+0x4>

080007ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000804:	f000 fb3c 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	e00a      	b.n	8000834 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800081e:	f3af 8000 	nop.w
 8000822:	4601      	mov	r1, r0
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	60ba      	str	r2, [r7, #8]
 800082a:	b2ca      	uxtb	r2, r1
 800082c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	3301      	adds	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	429a      	cmp	r2, r3
 800083a:	dbf0      	blt.n	800081e <_read+0x12>
	}

return len;
 800083c:	687b      	ldr	r3, [r7, #4]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af00      	add	r7, sp, #0
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	e009      	b.n	800086c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	60ba      	str	r2, [r7, #8]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fee3 	bl	800062c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	3301      	adds	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	dbf1      	blt.n	8000858 <_write+0x12>
	}
	return len;
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_close>:

int _close(int file)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
	return -1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
 800089e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a6:	605a      	str	r2, [r3, #4]
	return 0;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <_isatty>:

int _isatty(int file)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
	return 1;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
	return 0;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f0:	4a14      	ldr	r2, [pc, #80]	; (8000944 <_sbrk+0x5c>)
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <_sbrk+0x60>)
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d102      	bne.n	800090a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <_sbrk+0x64>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <_sbrk+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	429a      	cmp	r2, r3
 8000916:	d207      	bcs.n	8000928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000918:	f002 fcac 	bl	8003274 <__errno>
 800091c:	4603      	mov	r3, r0
 800091e:	220c      	movs	r2, #12
 8000920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	e009      	b.n	800093c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <_sbrk+0x64>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	4a05      	ldr	r2, [pc, #20]	; (800094c <_sbrk+0x64>)
 8000938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20050000 	.word	0x20050000
 8000948:	00000400 	.word	0x00000400
 800094c:	2000008c 	.word	0x2000008c
 8000950:	200001b0 	.word	0x200001b0

08000954 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <SystemInit+0x20>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <SystemInit+0x20>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_USART1_UART_Init+0x58>)
 800097e:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <MX_USART1_UART_Init+0x5c>)
 8000980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_USART1_UART_Init+0x58>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_USART1_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_USART1_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USART1_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USART1_UART_Init+0x58>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USART1_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USART1_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USART1_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USART1_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_USART1_UART_Init+0x58>)
 80009bc:	f001 fdb0 	bl	8002520 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009c6:	f7ff fecd 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000090 	.word	0x20000090
 80009d4:	40011000 	.word	0x40011000

080009d8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_USART6_UART_Init+0x54>)
 80009de:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <MX_USART6_UART_Init+0x58>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 1000000;
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_USART6_UART_Init+0x54>)
 80009e4:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <MX_USART6_UART_Init+0x5c>)
 80009e6:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_USART6_UART_Init+0x54>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_USART6_UART_Init+0x54>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <MX_USART6_UART_Init+0x54>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USART6_UART_Init+0x54>)
 80009fc:	220c      	movs	r2, #12
 80009fe:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <MX_USART6_UART_Init+0x54>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USART6_UART_Init+0x54>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <MX_USART6_UART_Init+0x54>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USART6_UART_Init+0x54>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_USART6_UART_Init+0x54>)
 8000a1a:	f001 fdcf 	bl	80025bc <HAL_HalfDuplex_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_USART6_UART_Init+0x50>
  {
    Error_Handler();
 8000a24:	f7ff fe9e 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000114 	.word	0x20000114
 8000a30:	40011400 	.word	0x40011400
 8000a34:	000f4240 	.word	0x000f4240

08000a38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b0ae      	sub	sp, #184	; 0xb8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a50:	f107 0320 	add.w	r3, r7, #32
 8000a54:	2284      	movs	r2, #132	; 0x84
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 fc43 	bl	80032e4 <memset>
  if(uartHandle->Instance==USART1)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a53      	ldr	r2, [pc, #332]	; (8000bb0 <HAL_UART_MspInit+0x178>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d15d      	bne.n	8000b24 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a68:	2340      	movs	r3, #64	; 0x40
 8000a6a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 f963 	bl	8001d40 <HAL_RCCEx_PeriphCLKConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a80:	f7ff fe70 	bl	8000764 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a84:	4b4b      	ldr	r3, [pc, #300]	; (8000bb4 <HAL_UART_MspInit+0x17c>)
 8000a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a88:	4a4a      	ldr	r2, [pc, #296]	; (8000bb4 <HAL_UART_MspInit+0x17c>)
 8000a8a:	f043 0310 	orr.w	r3, r3, #16
 8000a8e:	6453      	str	r3, [r2, #68]	; 0x44
 8000a90:	4b48      	ldr	r3, [pc, #288]	; (8000bb4 <HAL_UART_MspInit+0x17c>)
 8000a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a94:	f003 0310 	and.w	r3, r3, #16
 8000a98:	61fb      	str	r3, [r7, #28]
 8000a9a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9c:	4b45      	ldr	r3, [pc, #276]	; (8000bb4 <HAL_UART_MspInit+0x17c>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a44      	ldr	r2, [pc, #272]	; (8000bb4 <HAL_UART_MspInit+0x17c>)
 8000aa2:	f043 0302 	orr.w	r3, r3, #2
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa8:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <HAL_UART_MspInit+0x17c>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 0302 	and.w	r3, r3, #2
 8000ab0:	61bb      	str	r3, [r7, #24]
 8000ab2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b3f      	ldr	r3, [pc, #252]	; (8000bb4 <HAL_UART_MspInit+0x17c>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a3e      	ldr	r2, [pc, #248]	; (8000bb4 <HAL_UART_MspInit+0x17c>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b3c      	ldr	r3, [pc, #240]	; (8000bb4 <HAL_UART_MspInit+0x17c>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000aee:	4619      	mov	r1, r3
 8000af0:	4831      	ldr	r0, [pc, #196]	; (8000bb8 <HAL_UART_MspInit+0x180>)
 8000af2:	f000 faef 	bl	80010d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b10:	2307      	movs	r3, #7
 8000b12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4827      	ldr	r0, [pc, #156]	; (8000bbc <HAL_UART_MspInit+0x184>)
 8000b1e:	f000 fad9 	bl	80010d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000b22:	e040      	b.n	8000ba6 <HAL_UART_MspInit+0x16e>
  else if(uartHandle->Instance==USART6)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a25      	ldr	r2, [pc, #148]	; (8000bc0 <HAL_UART_MspInit+0x188>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d13b      	bne.n	8000ba6 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000b2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b32:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000b34:	2300      	movs	r3, #0
 8000b36:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b38:	f107 0320 	add.w	r3, r7, #32
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 f8ff 	bl	8001d40 <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_UART_MspInit+0x114>
      Error_Handler();
 8000b48:	f7ff fe0c 	bl	8000764 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_UART_MspInit+0x17c>)
 8000b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b50:	4a18      	ldr	r2, [pc, #96]	; (8000bb4 <HAL_UART_MspInit+0x17c>)
 8000b52:	f043 0320 	orr.w	r3, r3, #32
 8000b56:	6453      	str	r3, [r2, #68]	; 0x44
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <HAL_UART_MspInit+0x17c>)
 8000b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5c:	f003 0320 	and.w	r3, r3, #32
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <HAL_UART_MspInit+0x17c>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <HAL_UART_MspInit+0x17c>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b70:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <HAL_UART_MspInit+0x17c>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b7c:	2340      	movs	r3, #64	; 0x40
 8000b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b94:	2308      	movs	r3, #8
 8000b96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <HAL_UART_MspInit+0x18c>)
 8000ba2:	f000 fa97 	bl	80010d4 <HAL_GPIO_Init>
}
 8000ba6:	bf00      	nop
 8000ba8:	37b8      	adds	r7, #184	; 0xb8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40011000 	.word	0x40011000
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	40011400 	.word	0x40011400
 8000bc4:	40020800 	.word	0x40020800

08000bc8 <xl320_updateCrc>:
 */

#include "xl320_driver.h"


unsigned short xl320_updateCrc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000bd4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000bd8:	6019      	str	r1, [r3, #0]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000be0:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000be4:	4602      	mov	r2, r0
 8000be6:	801a      	strh	r2, [r3, #0]
 8000be8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000bec:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 8000bf4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000bf8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000bfc:	4a28      	ldr	r2, [pc, #160]	; (8000ca0 <xl320_updateCrc+0xd8>)
 8000bfe:	4618      	mov	r0, r3
 8000c00:	4611      	mov	r1, r2
 8000c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c06:	461a      	mov	r2, r3
 8000c08:	f002 fb5e 	bl	80032c8 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++) {
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000c12:	e031      	b.n	8000c78 <xl320_updateCrc+0xb0>
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000c14:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000c18:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	0a1b      	lsrs	r3, r3, #8
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000c26:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8000c2a:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8000c2e:	6809      	ldr	r1, [r1, #0]
 8000c30:	440b      	add	r3, r1
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4053      	eors	r3, r2
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000c40:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000c44:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000c52:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000c56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c5a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	4053      	eors	r3, r2
 8000c62:	b21a      	sxth	r2, r3
 8000c64:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000c68:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000c6c:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++) {
 8000c6e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000c72:	3301      	adds	r3, #1
 8000c74:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000c78:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000c7c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000c80:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d3c4      	bcc.n	8000c14 <xl320_updateCrc+0x4c>
	}

	return crc_accum;
 8000c8a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000c8e:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000c92:	881b      	ldrh	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	08004238 	.word	0x08004238

08000ca4 <clearReceiveBuffer>:

void clearReceiveBuffer(uint8_t* buffer){
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0; i < 32; i++){
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	e007      	b.n	8000cc2 <clearReceiveBuffer+0x1e>
		buffer[i] = 0;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 32; i++){
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2b1f      	cmp	r3, #31
 8000cc6:	ddf4      	ble.n	8000cb2 <clearReceiveBuffer+0xe>
	}
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <xl320_ping>:

void xl320_ping(const uint8_t servoId) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08e      	sub	sp, #56	; 0x38
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	uint8_t pingPacket[] = {0xFF, 0xFF, 0xFD, 0x00, servoId, 0x03, 0x00, 0x01, 0x0, 0x0};
 8000ce2:	23ff      	movs	r3, #255	; 0xff
 8000ce4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000ce8:	23ff      	movs	r3, #255	; 0xff
 8000cea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000cee:	23fd      	movs	r3, #253	; 0xfd
 8000cf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000d00:	2303      	movs	r3, #3
 8000d02:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000d06:	2300      	movs	r3, #0
 8000d08:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	unsigned short crc = xl320_updateCrc(0, pingPacket, 8);
 8000d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d22:	2208      	movs	r2, #8
 8000d24:	4619      	mov	r1, r3
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff ff4e 	bl	8000bc8 <xl320_updateCrc>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	867b      	strh	r3, [r7, #50]	; 0x32
	uint8_t receiveBuffer[32];
	clearReceiveBuffer(receiveBuffer);
 8000d30:	f107 0308 	add.w	r3, r7, #8
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ffb5 	bl	8000ca4 <clearReceiveBuffer>

	pingPacket[8] = (uint8_t) (crc & 0xFF);
 8000d3a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	pingPacket[9] = (uint8_t) (crc >> 8);
 8000d42:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	HAL_HalfDuplex_EnableTransmitter(&huart6);
 8000d4e:	4817      	ldr	r0, [pc, #92]	; (8000dac <xl320_ping+0xd4>)
 8000d50:	f001 fded 	bl	800292e <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart6, pingPacket, 10*sizeof(char), 0x1F4);
 8000d54:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d58:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d5c:	220a      	movs	r2, #10
 8000d5e:	4813      	ldr	r0, [pc, #76]	; (8000dac <xl320_ping+0xd4>)
 8000d60:	f001 fc82 	bl	8002668 <HAL_UART_Transmit>
	//printf("sent\r\n");

	HAL_HalfDuplex_EnableReceiver(&huart6);
 8000d64:	4811      	ldr	r0, [pc, #68]	; (8000dac <xl320_ping+0xd4>)
 8000d66:	f001 fe34 	bl	80029d2 <HAL_HalfDuplex_EnableReceiver>
	HAL_UART_Receive(&huart6, receiveBuffer, 32, 0x1F4);
 8000d6a:	f107 0108 	add.w	r1, r7, #8
 8000d6e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d72:	2220      	movs	r2, #32
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <xl320_ping+0xd4>)
 8000d76:	f001 fd0a 	bl	800278e <HAL_UART_Receive>
	int i;
	if(receiveBuffer[0] != 0) {
 8000d7a:	7a3b      	ldrb	r3, [r7, #8]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d011      	beq.n	8000da4 <xl320_ping+0xcc>
		for(i= 0; i < 32; i++){
 8000d80:	2300      	movs	r3, #0
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
 8000d84:	e00b      	b.n	8000d9e <xl320_ping+0xc6>
			printf("Received : %d\r\n", receiveBuffer[i]);
 8000d86:	f107 0208 	add.w	r2, r7, #8
 8000d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d8c:	4413      	add	r3, r2
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	4807      	ldr	r0, [pc, #28]	; (8000db0 <xl320_ping+0xd8>)
 8000d94:	f002 faae 	bl	80032f4 <iprintf>
		for(i= 0; i < 32; i++){
 8000d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8000d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da0:	2b1f      	cmp	r3, #31
 8000da2:	ddf0      	ble.n	8000d86 <xl320_ping+0xae>
		}
	}
}
 8000da4:	bf00      	nop
 8000da6:	3738      	adds	r7, #56	; 0x38
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000114 	.word	0x20000114
 8000db0:	08004438 	.word	0x08004438

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dba:	490e      	ldr	r1, [pc, #56]	; (8000df4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dbc:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd0:	4c0b      	ldr	r4, [pc, #44]	; (8000e00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dde:	f7ff fdb9 	bl	8000954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f002 fa4d 	bl	8003280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fc33 	bl	8000650 <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000df8:	08004508 	.word	0x08004508
  ldr r2, =_sbss
 8000dfc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e00:	200001ac 	.word	0x200001ac

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>

08000e06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	f000 f92e 	bl	800106c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e10:	2000      	movs	r0, #0
 8000e12:	f000 f805 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e16:	f7ff fcab 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f93b 	bl	80010ba <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f000 f911 	bl	8001082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000198 	.word	0x20000198

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000198 	.word	0x20000198

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff ffee 	bl	8000ea8 <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_Delay+0x44>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffde 	bl	8000ea8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <__NVIC_SetPriorityGrouping+0x40>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	4313      	orrs	r3, r2
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <__NVIC_SetPriorityGrouping+0x40>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00
 8000f4c:	05fa0000 	.word	0x05fa0000

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001038:	d301      	bcc.n	800103e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103a:	2301      	movs	r3, #1
 800103c:	e00f      	b.n	800105e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <SysTick_Config+0x40>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001046:	210f      	movs	r1, #15
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f7ff ff8e 	bl	8000f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <SysTick_Config+0x40>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <SysTick_Config+0x40>)
 8001058:	2207      	movs	r2, #7
 800105a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff47 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001094:	f7ff ff5c 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 8001098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ff8e 	bl	8000fc0 <NVIC_EncodePriority>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff5d 	bl	8000f6c <__NVIC_SetPriority>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffb0 	bl	8001028 <SysTick_Config>
 80010c8:	4603      	mov	r3, r0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
 80010f2:	e175      	b.n	80013e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010f4:	2201      	movs	r2, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	429a      	cmp	r2, r3
 800110e:	f040 8164 	bne.w	80013da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	2b01      	cmp	r3, #1
 800111c:	d005      	beq.n	800112a <HAL_GPIO_Init+0x56>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d130      	bne.n	800118c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	2203      	movs	r2, #3
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001160:	2201      	movs	r2, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	091b      	lsrs	r3, r3, #4
 8001176:	f003 0201 	and.w	r2, r3, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b03      	cmp	r3, #3
 8001196:	d017      	beq.n	80011c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d123      	bne.n	800121c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	08da      	lsrs	r2, r3, #3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3208      	adds	r2, #8
 80011dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	220f      	movs	r2, #15
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3208      	adds	r2, #8
 8001216:	69b9      	ldr	r1, [r7, #24]
 8001218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0203 	and.w	r2, r3, #3
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 80be 	beq.w	80013da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	4b66      	ldr	r3, [pc, #408]	; (80013f8 <HAL_GPIO_Init+0x324>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a65      	ldr	r2, [pc, #404]	; (80013f8 <HAL_GPIO_Init+0x324>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b63      	ldr	r3, [pc, #396]	; (80013f8 <HAL_GPIO_Init+0x324>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001276:	4a61      	ldr	r2, [pc, #388]	; (80013fc <HAL_GPIO_Init+0x328>)
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	220f      	movs	r2, #15
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a58      	ldr	r2, [pc, #352]	; (8001400 <HAL_GPIO_Init+0x32c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d037      	beq.n	8001312 <HAL_GPIO_Init+0x23e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a57      	ldr	r2, [pc, #348]	; (8001404 <HAL_GPIO_Init+0x330>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d031      	beq.n	800130e <HAL_GPIO_Init+0x23a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a56      	ldr	r2, [pc, #344]	; (8001408 <HAL_GPIO_Init+0x334>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d02b      	beq.n	800130a <HAL_GPIO_Init+0x236>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a55      	ldr	r2, [pc, #340]	; (800140c <HAL_GPIO_Init+0x338>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d025      	beq.n	8001306 <HAL_GPIO_Init+0x232>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a54      	ldr	r2, [pc, #336]	; (8001410 <HAL_GPIO_Init+0x33c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d01f      	beq.n	8001302 <HAL_GPIO_Init+0x22e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a53      	ldr	r2, [pc, #332]	; (8001414 <HAL_GPIO_Init+0x340>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d019      	beq.n	80012fe <HAL_GPIO_Init+0x22a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a52      	ldr	r2, [pc, #328]	; (8001418 <HAL_GPIO_Init+0x344>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d013      	beq.n	80012fa <HAL_GPIO_Init+0x226>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a51      	ldr	r2, [pc, #324]	; (800141c <HAL_GPIO_Init+0x348>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d00d      	beq.n	80012f6 <HAL_GPIO_Init+0x222>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a50      	ldr	r2, [pc, #320]	; (8001420 <HAL_GPIO_Init+0x34c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d007      	beq.n	80012f2 <HAL_GPIO_Init+0x21e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4f      	ldr	r2, [pc, #316]	; (8001424 <HAL_GPIO_Init+0x350>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d101      	bne.n	80012ee <HAL_GPIO_Init+0x21a>
 80012ea:	2309      	movs	r3, #9
 80012ec:	e012      	b.n	8001314 <HAL_GPIO_Init+0x240>
 80012ee:	230a      	movs	r3, #10
 80012f0:	e010      	b.n	8001314 <HAL_GPIO_Init+0x240>
 80012f2:	2308      	movs	r3, #8
 80012f4:	e00e      	b.n	8001314 <HAL_GPIO_Init+0x240>
 80012f6:	2307      	movs	r3, #7
 80012f8:	e00c      	b.n	8001314 <HAL_GPIO_Init+0x240>
 80012fa:	2306      	movs	r3, #6
 80012fc:	e00a      	b.n	8001314 <HAL_GPIO_Init+0x240>
 80012fe:	2305      	movs	r3, #5
 8001300:	e008      	b.n	8001314 <HAL_GPIO_Init+0x240>
 8001302:	2304      	movs	r3, #4
 8001304:	e006      	b.n	8001314 <HAL_GPIO_Init+0x240>
 8001306:	2303      	movs	r3, #3
 8001308:	e004      	b.n	8001314 <HAL_GPIO_Init+0x240>
 800130a:	2302      	movs	r3, #2
 800130c:	e002      	b.n	8001314 <HAL_GPIO_Init+0x240>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <HAL_GPIO_Init+0x240>
 8001312:	2300      	movs	r3, #0
 8001314:	69fa      	ldr	r2, [r7, #28]
 8001316:	f002 0203 	and.w	r2, r2, #3
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	4093      	lsls	r3, r2
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001324:	4935      	ldr	r1, [pc, #212]	; (80013fc <HAL_GPIO_Init+0x328>)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001332:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <HAL_GPIO_Init+0x354>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001356:	4a34      	ldr	r2, [pc, #208]	; (8001428 <HAL_GPIO_Init+0x354>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800135c:	4b32      	ldr	r3, [pc, #200]	; (8001428 <HAL_GPIO_Init+0x354>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001380:	4a29      	ldr	r2, [pc, #164]	; (8001428 <HAL_GPIO_Init+0x354>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001386:	4b28      	ldr	r3, [pc, #160]	; (8001428 <HAL_GPIO_Init+0x354>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013aa:	4a1f      	ldr	r2, [pc, #124]	; (8001428 <HAL_GPIO_Init+0x354>)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <HAL_GPIO_Init+0x354>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d4:	4a14      	ldr	r2, [pc, #80]	; (8001428 <HAL_GPIO_Init+0x354>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3301      	adds	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	2b0f      	cmp	r3, #15
 80013e4:	f67f ae86 	bls.w	80010f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40013800 	.word	0x40013800
 8001400:	40020000 	.word	0x40020000
 8001404:	40020400 	.word	0x40020400
 8001408:	40020800 	.word	0x40020800
 800140c:	40020c00 	.word	0x40020c00
 8001410:	40021000 	.word	0x40021000
 8001414:	40021400 	.word	0x40021400
 8001418:	40021800 	.word	0x40021800
 800141c:	40021c00 	.word	0x40021c00
 8001420:	40022000 	.word	0x40022000
 8001424:	40022400 	.word	0x40022400
 8001428:	40013c00 	.word	0x40013c00

0800142c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e291      	b.n	8001966 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 8087 	beq.w	800155e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001450:	4b96      	ldr	r3, [pc, #600]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 030c 	and.w	r3, r3, #12
 8001458:	2b04      	cmp	r3, #4
 800145a:	d00c      	beq.n	8001476 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145c:	4b93      	ldr	r3, [pc, #588]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 030c 	and.w	r3, r3, #12
 8001464:	2b08      	cmp	r3, #8
 8001466:	d112      	bne.n	800148e <HAL_RCC_OscConfig+0x62>
 8001468:	4b90      	ldr	r3, [pc, #576]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001474:	d10b      	bne.n	800148e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001476:	4b8d      	ldr	r3, [pc, #564]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d06c      	beq.n	800155c <HAL_RCC_OscConfig+0x130>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d168      	bne.n	800155c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e26b      	b.n	8001966 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001496:	d106      	bne.n	80014a6 <HAL_RCC_OscConfig+0x7a>
 8001498:	4b84      	ldr	r3, [pc, #528]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a83      	ldr	r2, [pc, #524]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 800149e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	e02e      	b.n	8001504 <HAL_RCC_OscConfig+0xd8>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x9c>
 80014ae:	4b7f      	ldr	r3, [pc, #508]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a7e      	ldr	r2, [pc, #504]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4b7c      	ldr	r3, [pc, #496]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a7b      	ldr	r2, [pc, #492]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e01d      	b.n	8001504 <HAL_RCC_OscConfig+0xd8>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0xc0>
 80014d2:	4b76      	ldr	r3, [pc, #472]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a75      	ldr	r2, [pc, #468]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b73      	ldr	r3, [pc, #460]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a72      	ldr	r2, [pc, #456]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e00b      	b.n	8001504 <HAL_RCC_OscConfig+0xd8>
 80014ec:	4b6f      	ldr	r3, [pc, #444]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b6c      	ldr	r3, [pc, #432]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a6b      	ldr	r2, [pc, #428]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d013      	beq.n	8001534 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff fccc 	bl	8000ea8 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fcc8 	bl	8000ea8 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	; 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e21f      	b.n	8001966 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	4b61      	ldr	r3, [pc, #388]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0xe8>
 8001532:	e014      	b.n	800155e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff fcb8 	bl	8000ea8 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800153c:	f7ff fcb4 	bl	8000ea8 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b64      	cmp	r3, #100	; 0x64
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e20b      	b.n	8001966 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154e:	4b57      	ldr	r3, [pc, #348]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x110>
 800155a:	e000      	b.n	800155e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d069      	beq.n	800163e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800156a:	4b50      	ldr	r3, [pc, #320]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00b      	beq.n	800158e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001576:	4b4d      	ldr	r3, [pc, #308]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b08      	cmp	r3, #8
 8001580:	d11c      	bne.n	80015bc <HAL_RCC_OscConfig+0x190>
 8001582:	4b4a      	ldr	r3, [pc, #296]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d116      	bne.n	80015bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	4b47      	ldr	r3, [pc, #284]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d005      	beq.n	80015a6 <HAL_RCC_OscConfig+0x17a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d001      	beq.n	80015a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e1df      	b.n	8001966 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	493d      	ldr	r1, [pc, #244]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ba:	e040      	b.n	800163e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d023      	beq.n	800160c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c4:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a38      	ldr	r2, [pc, #224]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff fc6a 	bl	8000ea8 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff fc66 	bl	8000ea8 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e1bd      	b.n	8001966 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ea:	4b30      	ldr	r3, [pc, #192]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4929      	ldr	r1, [pc, #164]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
 800160a:	e018      	b.n	800163e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a26      	ldr	r2, [pc, #152]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fc46 	bl	8000ea8 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001620:	f7ff fc42 	bl	8000ea8 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e199      	b.n	8001966 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d038      	beq.n	80016bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d019      	beq.n	8001686 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001656:	4a15      	ldr	r2, [pc, #84]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165e:	f7ff fc23 	bl	8000ea8 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001666:	f7ff fc1f 	bl	8000ea8 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e176      	b.n	8001966 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 800167a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x23a>
 8001684:	e01a      	b.n	80016bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001692:	f7ff fc09 	bl	8000ea8 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001698:	e00a      	b.n	80016b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169a:	f7ff fc05 	bl	8000ea8 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d903      	bls.n	80016b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e15c      	b.n	8001966 <HAL_RCC_OscConfig+0x53a>
 80016ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b0:	4b91      	ldr	r3, [pc, #580]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 80016b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1ee      	bne.n	800169a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80a4 	beq.w	8001812 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ca:	4b8b      	ldr	r3, [pc, #556]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10d      	bne.n	80016f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b88      	ldr	r3, [pc, #544]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a87      	ldr	r2, [pc, #540]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b85      	ldr	r3, [pc, #532]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ee:	2301      	movs	r3, #1
 80016f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f2:	4b82      	ldr	r3, [pc, #520]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d118      	bne.n	8001730 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80016fe:	4b7f      	ldr	r3, [pc, #508]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a7e      	ldr	r2, [pc, #504]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170a:	f7ff fbcd 	bl	8000ea8 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001712:	f7ff fbc9 	bl	8000ea8 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b64      	cmp	r3, #100	; 0x64
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e120      	b.n	8001966 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001724:	4b75      	ldr	r3, [pc, #468]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x31a>
 8001738:	4b6f      	ldr	r3, [pc, #444]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173c:	4a6e      	ldr	r2, [pc, #440]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6713      	str	r3, [r2, #112]	; 0x70
 8001744:	e02d      	b.n	80017a2 <HAL_RCC_OscConfig+0x376>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x33c>
 800174e:	4b6a      	ldr	r3, [pc, #424]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001752:	4a69      	ldr	r2, [pc, #420]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	6713      	str	r3, [r2, #112]	; 0x70
 800175a:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 800175c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175e:	4a66      	ldr	r2, [pc, #408]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 8001760:	f023 0304 	bic.w	r3, r3, #4
 8001764:	6713      	str	r3, [r2, #112]	; 0x70
 8001766:	e01c      	b.n	80017a2 <HAL_RCC_OscConfig+0x376>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d10c      	bne.n	800178a <HAL_RCC_OscConfig+0x35e>
 8001770:	4b61      	ldr	r3, [pc, #388]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001774:	4a60      	ldr	r2, [pc, #384]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6713      	str	r3, [r2, #112]	; 0x70
 800177c:	4b5e      	ldr	r3, [pc, #376]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001780:	4a5d      	ldr	r2, [pc, #372]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6713      	str	r3, [r2, #112]	; 0x70
 8001788:	e00b      	b.n	80017a2 <HAL_RCC_OscConfig+0x376>
 800178a:	4b5b      	ldr	r3, [pc, #364]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178e:	4a5a      	ldr	r2, [pc, #360]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6713      	str	r3, [r2, #112]	; 0x70
 8001796:	4b58      	ldr	r3, [pc, #352]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 8001798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179a:	4a57      	ldr	r2, [pc, #348]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d015      	beq.n	80017d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017aa:	f7ff fb7d 	bl	8000ea8 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7ff fb79 	bl	8000ea8 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e0ce      	b.n	8001966 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c8:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0ee      	beq.n	80017b2 <HAL_RCC_OscConfig+0x386>
 80017d4:	e014      	b.n	8001800 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d6:	f7ff fb67 	bl	8000ea8 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7ff fb63 	bl	8000ea8 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e0b8      	b.n	8001966 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f4:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1ee      	bne.n	80017de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d105      	bne.n	8001812 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001806:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a3b      	ldr	r2, [pc, #236]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 800180c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80a4 	beq.w	8001964 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800181c:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d06b      	beq.n	8001900 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d149      	bne.n	80018c4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001830:	4b31      	ldr	r3, [pc, #196]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a30      	ldr	r2, [pc, #192]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 8001836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800183a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff fb34 	bl	8000ea8 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff fb30 	bl	8000ea8 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e087      	b.n	8001966 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001856:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69da      	ldr	r2, [r3, #28]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	019b      	lsls	r3, r3, #6
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	085b      	lsrs	r3, r3, #1
 800187a:	3b01      	subs	r3, #1
 800187c:	041b      	lsls	r3, r3, #16
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	061b      	lsls	r3, r3, #24
 8001886:	4313      	orrs	r3, r2
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 800188a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800188e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 8001896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff fb04 	bl	8000ea8 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a4:	f7ff fb00 	bl	8000ea8 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e057      	b.n	8001966 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x478>
 80018c2:	e04f      	b.n	8001964 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 80018ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff faea 	bl	8000ea8 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff fae6 	bl	8000ea8 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e03d      	b.n	8001966 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ea:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x4ac>
 80018f6:	e035      	b.n	8001964 <HAL_RCC_OscConfig+0x538>
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_RCC_OscConfig+0x544>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d028      	beq.n	8001960 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d121      	bne.n	8001960 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d11a      	bne.n	8001960 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001930:	4013      	ands	r3, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001936:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001938:	4293      	cmp	r3, r2
 800193a:	d111      	bne.n	8001960 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	085b      	lsrs	r3, r3, #1
 8001948:	3b01      	subs	r3, #1
 800194a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d107      	bne.n	8001960 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800

08001974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0d0      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800198c:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 030f 	and.w	r3, r3, #15
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d910      	bls.n	80019bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	4b67      	ldr	r3, [pc, #412]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 020f 	bic.w	r2, r3, #15
 80019a2:	4965      	ldr	r1, [pc, #404]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	4b63      	ldr	r3, [pc, #396]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0b8      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d020      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d4:	4b59      	ldr	r3, [pc, #356]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4a58      	ldr	r2, [pc, #352]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 80019da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019ec:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4a52      	ldr	r2, [pc, #328]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 80019f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f8:	4b50      	ldr	r3, [pc, #320]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	494d      	ldr	r1, [pc, #308]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d040      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d115      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e07f      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a36:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d109      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e073      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a46:	4b3d      	ldr	r3, [pc, #244]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e06b      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a56:	4b39      	ldr	r3, [pc, #228]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f023 0203 	bic.w	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4936      	ldr	r1, [pc, #216]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a68:	f7ff fa1e 	bl	8000ea8 <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	e00a      	b.n	8001a86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a70:	f7ff fa1a 	bl	8000ea8 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e053      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 020c 	and.w	r2, r3, #12
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d1eb      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 030f 	and.w	r3, r3, #15
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d210      	bcs.n	8001ac8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 020f 	bic.w	r2, r3, #15
 8001aae:	4922      	ldr	r1, [pc, #136]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e032      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4916      	ldr	r1, [pc, #88]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	490e      	ldr	r1, [pc, #56]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b06:	f000 f821 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	490a      	ldr	r1, [pc, #40]	; (8001b40 <HAL_RCC_ClockConfig+0x1cc>)
 8001b18:	5ccb      	ldrb	r3, [r1, r3]
 8001b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1e:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <HAL_RCC_ClockConfig+0x1d0>)
 8001b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_ClockConfig+0x1d4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f97a 	bl	8000e20 <HAL_InitTick>

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023c00 	.word	0x40023c00
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	08004448 	.word	0x08004448
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b50:	b090      	sub	sp, #64	; 0x40
 8001b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	637b      	str	r3, [r7, #52]	; 0x34
 8001b58:	2300      	movs	r3, #0
 8001b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b64:	4b59      	ldr	r3, [pc, #356]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d00d      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x40>
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	f200 80a1 	bhi.w	8001cb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0x34>
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d003      	beq.n	8001b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b7e:	e09b      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b80:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b84:	e09b      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b86:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b8a:	e098      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b8c:	4b4f      	ldr	r3, [pc, #316]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b96:	4b4d      	ldr	r3, [pc, #308]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d028      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba2:	4b4a      	ldr	r3, [pc, #296]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	099b      	lsrs	r3, r3, #6
 8001ba8:	2200      	movs	r2, #0
 8001baa:	623b      	str	r3, [r7, #32]
 8001bac:	627a      	str	r2, [r7, #36]	; 0x24
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bb8:	fb03 f201 	mul.w	r2, r3, r1
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	fb00 f303 	mul.w	r3, r0, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a43      	ldr	r2, [pc, #268]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bc6:	fba0 1202 	umull	r1, r2, r0, r2
 8001bca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bcc:	460a      	mov	r2, r1
 8001bce:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd2:	4413      	add	r3, r2
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd8:	2200      	movs	r2, #0
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	61fa      	str	r2, [r7, #28]
 8001bde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001be6:	f7fe fb63 	bl	80002b0 <__aeabi_uldivmod>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4613      	mov	r3, r2
 8001bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf2:	e053      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf4:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	099b      	lsrs	r3, r3, #6
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	617a      	str	r2, [r7, #20]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c06:	f04f 0b00 	mov.w	fp, #0
 8001c0a:	4652      	mov	r2, sl
 8001c0c:	465b      	mov	r3, fp
 8001c0e:	f04f 0000 	mov.w	r0, #0
 8001c12:	f04f 0100 	mov.w	r1, #0
 8001c16:	0159      	lsls	r1, r3, #5
 8001c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c1c:	0150      	lsls	r0, r2, #5
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	ebb2 080a 	subs.w	r8, r2, sl
 8001c26:	eb63 090b 	sbc.w	r9, r3, fp
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c3e:	ebb2 0408 	subs.w	r4, r2, r8
 8001c42:	eb63 0509 	sbc.w	r5, r3, r9
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	00eb      	lsls	r3, r5, #3
 8001c50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c54:	00e2      	lsls	r2, r4, #3
 8001c56:	4614      	mov	r4, r2
 8001c58:	461d      	mov	r5, r3
 8001c5a:	eb14 030a 	adds.w	r3, r4, sl
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	eb45 030b 	adc.w	r3, r5, fp
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c72:	4629      	mov	r1, r5
 8001c74:	028b      	lsls	r3, r1, #10
 8001c76:	4621      	mov	r1, r4
 8001c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	028a      	lsls	r2, r1, #10
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c86:	2200      	movs	r2, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	60fa      	str	r2, [r7, #12]
 8001c8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c90:	f7fe fb0e 	bl	80002b0 <__aeabi_uldivmod>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4613      	mov	r3, r2
 8001c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	0c1b      	lsrs	r3, r3, #16
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001cac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cb6:	e002      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3740      	adds	r7, #64	; 0x40
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	00f42400 	.word	0x00f42400
 8001cd4:	017d7840 	.word	0x017d7840

08001cd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_RCC_GetHCLKFreq+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000000 	.word	0x20000000

08001cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cf4:	f7ff fff0 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	0a9b      	lsrs	r3, r3, #10
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	4903      	ldr	r1, [pc, #12]	; (8001d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	08004458 	.word	0x08004458

08001d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d1c:	f7ff ffdc 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	0b5b      	lsrs	r3, r3, #13
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4903      	ldr	r1, [pc, #12]	; (8001d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	08004458 	.word	0x08004458

08001d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d012      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d68:	4b69      	ldr	r3, [pc, #420]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4a68      	ldr	r2, [pc, #416]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d72:	6093      	str	r3, [r2, #8]
 8001d74:	4b66      	ldr	r3, [pc, #408]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7c:	4964      	ldr	r1, [pc, #400]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d017      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d9a:	4b5d      	ldr	r3, [pc, #372]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001da0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da8:	4959      	ldr	r1, [pc, #356]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001db8:	d101      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d017      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001dd6:	4b4e      	ldr	r3, [pc, #312]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ddc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	494a      	ldr	r1, [pc, #296]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001df4:	d101      	bne.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001df6:	2301      	movs	r3, #1
 8001df8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e02:	2301      	movs	r3, #1
 8001e04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001e12:	2301      	movs	r3, #1
 8001e14:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 808b 	beq.w	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e24:	4b3a      	ldr	r3, [pc, #232]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	4a39      	ldr	r2, [pc, #228]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e30:	4b37      	ldr	r3, [pc, #220]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e3c:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a34      	ldr	r2, [pc, #208]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e48:	f7ff f82e 	bl	8000ea8 <HAL_GetTick>
 8001e4c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e50:	f7ff f82a 	bl	8000ea8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	; 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e357      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e62:	4b2c      	ldr	r3, [pc, #176]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e6e:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e76:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d035      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d02e      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e8c:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e94:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e96:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9a:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea6:	4a1a      	ldr	r2, [pc, #104]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001eae:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d114      	bne.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7fe fff2 	bl	8000ea8 <HAL_GetTick>
 8001ec4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec6:	e00a      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec8:	f7fe ffee 	bl	8000ea8 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e319      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0ee      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ef6:	d111      	bne.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f06:	400b      	ands	r3, r1
 8001f08:	4901      	ldr	r1, [pc, #4]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40007000 	.word	0x40007000
 8001f18:	0ffffcff 	.word	0x0ffffcff
 8001f1c:	4baa      	ldr	r3, [pc, #680]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4aa9      	ldr	r2, [pc, #676]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f26:	6093      	str	r3, [r2, #8]
 8001f28:	4ba7      	ldr	r3, [pc, #668]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f34:	49a4      	ldr	r1, [pc, #656]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d010      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f46:	4ba0      	ldr	r3, [pc, #640]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f4c:	4a9e      	ldr	r2, [pc, #632]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f56:	4b9c      	ldr	r3, [pc, #624]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f58:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f60:	4999      	ldr	r1, [pc, #612]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00a      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f74:	4b94      	ldr	r3, [pc, #592]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f82:	4991      	ldr	r1, [pc, #580]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00a      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f96:	4b8c      	ldr	r3, [pc, #560]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fa4:	4988      	ldr	r1, [pc, #544]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00a      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fb8:	4b83      	ldr	r3, [pc, #524]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fc6:	4980      	ldr	r1, [pc, #512]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001fda:	4b7b      	ldr	r3, [pc, #492]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe8:	4977      	ldr	r1, [pc, #476]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00a      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ffc:	4b72      	ldr	r3, [pc, #456]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002002:	f023 0203 	bic.w	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	496f      	ldr	r1, [pc, #444]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800201e:	4b6a      	ldr	r3, [pc, #424]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002024:	f023 020c 	bic.w	r2, r3, #12
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800202c:	4966      	ldr	r1, [pc, #408]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002040:	4b61      	ldr	r3, [pc, #388]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	495e      	ldr	r1, [pc, #376]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00a      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002062:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002068:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002070:	4955      	ldr	r1, [pc, #340]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002072:	4313      	orrs	r3, r2
 8002074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00a      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	494d      	ldr	r1, [pc, #308]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002094:	4313      	orrs	r3, r2
 8002096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80020a6:	4b48      	ldr	r3, [pc, #288]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	4944      	ldr	r1, [pc, #272]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80020c8:	4b3f      	ldr	r3, [pc, #252]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	493c      	ldr	r1, [pc, #240]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80020ea:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f8:	4933      	ldr	r1, [pc, #204]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00a      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800210c:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800210e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002112:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800211a:	492b      	ldr	r1, [pc, #172]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d011      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800212e:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002134:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800213c:	4922      	ldr	r1, [pc, #136]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002148:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800214c:	d101      	bne.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800214e:	2301      	movs	r3, #1
 8002150:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800215e:	2301      	movs	r3, #1
 8002160:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002174:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217c:	4912      	ldr	r1, [pc, #72]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00b      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002190:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021a0:	4909      	ldr	r1, [pc, #36]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d006      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 80d9 	beq.w	800236e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021bc:	4b02      	ldr	r3, [pc, #8]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a01      	ldr	r2, [pc, #4]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021c6:	e001      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80021c8:	40023800 	.word	0x40023800
 80021cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021ce:	f7fe fe6b 	bl	8000ea8 <HAL_GetTick>
 80021d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021d6:	f7fe fe67 	bl	8000ea8 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b64      	cmp	r3, #100	; 0x64
 80021e2:	d901      	bls.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e194      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021e8:	4b6c      	ldr	r3, [pc, #432]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f0      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d021      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002204:	2b00      	cmp	r3, #0
 8002206:	d11d      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002208:	4b64      	ldr	r3, [pc, #400]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800220a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800220e:	0c1b      	lsrs	r3, r3, #16
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002216:	4b61      	ldr	r3, [pc, #388]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800221c:	0e1b      	lsrs	r3, r3, #24
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	019a      	lsls	r2, r3, #6
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	041b      	lsls	r3, r3, #16
 800222e:	431a      	orrs	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	061b      	lsls	r3, r3, #24
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	071b      	lsls	r3, r3, #28
 800223c:	4957      	ldr	r1, [pc, #348]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d004      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002254:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002262:	2b00      	cmp	r3, #0
 8002264:	d02e      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800226e:	d129      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002270:	4b4a      	ldr	r3, [pc, #296]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002276:	0c1b      	lsrs	r3, r3, #16
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800227e:	4b47      	ldr	r3, [pc, #284]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002284:	0f1b      	lsrs	r3, r3, #28
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	019a      	lsls	r2, r3, #6
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	041b      	lsls	r3, r3, #16
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	061b      	lsls	r3, r3, #24
 800229e:	431a      	orrs	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	071b      	lsls	r3, r3, #28
 80022a4:	493d      	ldr	r1, [pc, #244]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022ac:	4b3b      	ldr	r3, [pc, #236]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022b2:	f023 021f 	bic.w	r2, r3, #31
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	3b01      	subs	r3, #1
 80022bc:	4937      	ldr	r1, [pc, #220]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01d      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022d0:	4b32      	ldr	r3, [pc, #200]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022d6:	0e1b      	lsrs	r3, r3, #24
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022de:	4b2f      	ldr	r3, [pc, #188]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022e4:	0f1b      	lsrs	r3, r3, #28
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	019a      	lsls	r2, r3, #6
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	041b      	lsls	r3, r3, #16
 80022f8:	431a      	orrs	r2, r3
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	061b      	lsls	r3, r3, #24
 80022fe:	431a      	orrs	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	071b      	lsls	r3, r3, #28
 8002304:	4925      	ldr	r1, [pc, #148]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d011      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	019a      	lsls	r2, r3, #6
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	041b      	lsls	r3, r3, #16
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	061b      	lsls	r3, r3, #24
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	071b      	lsls	r3, r3, #28
 8002334:	4919      	ldr	r1, [pc, #100]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800233c:	4b17      	ldr	r3, [pc, #92]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a16      	ldr	r2, [pc, #88]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002342:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002348:	f7fe fdae 	bl	8000ea8 <HAL_GetTick>
 800234c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002350:	f7fe fdaa 	bl	8000ea8 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e0d7      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2b01      	cmp	r3, #1
 8002372:	f040 80cd 	bne.w	8002510 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800237c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002382:	f7fe fd91 	bl	8000ea8 <HAL_GetTick>
 8002386:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002388:	e00a      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800238a:	f7fe fd8d 	bl	8000ea8 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b64      	cmp	r3, #100	; 0x64
 8002396:	d903      	bls.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0ba      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800239c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023a0:	4b5e      	ldr	r3, [pc, #376]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023ac:	d0ed      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d02e      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d12a      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023d6:	4b51      	ldr	r3, [pc, #324]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023e4:	4b4d      	ldr	r3, [pc, #308]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	0f1b      	lsrs	r3, r3, #28
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	019a      	lsls	r2, r3, #6
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	041b      	lsls	r3, r3, #16
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	061b      	lsls	r3, r3, #24
 8002404:	431a      	orrs	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	071b      	lsls	r3, r3, #28
 800240a:	4944      	ldr	r1, [pc, #272]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002412:	4b42      	ldr	r3, [pc, #264]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002418:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	3b01      	subs	r3, #1
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	493d      	ldr	r1, [pc, #244]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d022      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800243c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002440:	d11d      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002442:	4b36      	ldr	r3, [pc, #216]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	0e1b      	lsrs	r3, r3, #24
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002450:	4b32      	ldr	r3, [pc, #200]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	0f1b      	lsrs	r3, r3, #28
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	019a      	lsls	r2, r3, #6
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	041b      	lsls	r3, r3, #16
 800246a:	431a      	orrs	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	061b      	lsls	r3, r3, #24
 8002470:	431a      	orrs	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	071b      	lsls	r3, r3, #28
 8002476:	4929      	ldr	r1, [pc, #164]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d028      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	0e1b      	lsrs	r3, r3, #24
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002498:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	0c1b      	lsrs	r3, r3, #16
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	019a      	lsls	r2, r3, #6
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	041b      	lsls	r3, r3, #16
 80024b0:	431a      	orrs	r2, r3
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	061b      	lsls	r3, r3, #24
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	071b      	lsls	r3, r3, #28
 80024be:	4917      	ldr	r1, [pc, #92]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	4911      	ldr	r1, [pc, #68]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a0e      	ldr	r2, [pc, #56]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e8:	f7fe fcde 	bl	8000ea8 <HAL_GetTick>
 80024ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024f0:	f7fe fcda 	bl	8000ea8 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e007      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800250a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800250e:	d1ef      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800

08002520 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e040      	b.n	80025b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe fa78 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2224      	movs	r2, #36	; 0x24
 800254c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0201 	bic.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fa8a 	bl	8002a78 <UART_SetConfig>
 8002564:	4603      	mov	r3, r0
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e022      	b.n	80025b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fce2 	bl	8002f40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800258a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800259a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fd69 	bl	8003084 <UART_CheckIdleState>
 80025b2:	4603      	mov	r3, r0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e048      	b.n	8002660 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7fe fa2a 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2224      	movs	r2, #36	; 0x24
 80025e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0201 	bic.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fa3c 	bl	8002a78 <UART_SetConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e02a      	b.n	8002660 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fc94 	bl	8002f40 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002626:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002636:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0208 	orr.w	r2, r2, #8
 8002646:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 fd13 	bl	8003084 <UART_CheckIdleState>
 800265e:	4603      	mov	r3, r0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	; 0x28
 800266c:	af02      	add	r7, sp, #8
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	4613      	mov	r3, r2
 8002676:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800267c:	2b20      	cmp	r3, #32
 800267e:	f040 8081 	bne.w	8002784 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <HAL_UART_Transmit+0x26>
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e079      	b.n	8002786 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_UART_Transmit+0x38>
 800269c:	2302      	movs	r3, #2
 800269e:	e072      	b.n	8002786 <HAL_UART_Transmit+0x11e>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2221      	movs	r2, #33	; 0x21
 80026b4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026b6:	f7fe fbf7 	bl	8000ea8 <HAL_GetTick>
 80026ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	88fa      	ldrh	r2, [r7, #6]
 80026c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	88fa      	ldrh	r2, [r7, #6]
 80026c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d4:	d108      	bne.n	80026e8 <HAL_UART_Transmit+0x80>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d104      	bne.n	80026e8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	e003      	b.n	80026f0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80026f8:	e02c      	b.n	8002754 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2200      	movs	r2, #0
 8002702:	2180      	movs	r1, #128	; 0x80
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fcf0 	bl	80030ea <UART_WaitOnFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e038      	b.n	8002786 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10b      	bne.n	8002732 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002728:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	3302      	adds	r3, #2
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	e007      	b.n	8002742 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	781a      	ldrb	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	3301      	adds	r3, #1
 8002740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1cc      	bne.n	80026fa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2200      	movs	r2, #0
 8002768:	2140      	movs	r1, #64	; 0x40
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 fcbd 	bl	80030ea <UART_WaitOnFlagUntilTimeout>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e005      	b.n	8002786 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	e000      	b.n	8002786 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002784:	2302      	movs	r3, #2
  }
}
 8002786:	4618      	mov	r0, r3
 8002788:	3720      	adds	r7, #32
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b08a      	sub	sp, #40	; 0x28
 8002792:	af02      	add	r7, sp, #8
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	603b      	str	r3, [r7, #0]
 800279a:	4613      	mov	r3, r2
 800279c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	f040 80be 	bne.w	8002924 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_UART_Receive+0x26>
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0b6      	b.n	8002926 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_UART_Receive+0x38>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e0af      	b.n	8002926 <HAL_UART_Receive+0x198>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2222      	movs	r2, #34	; 0x22
 80027da:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027e2:	f7fe fb61 	bl	8000ea8 <HAL_GetTick>
 80027e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	88fa      	ldrh	r2, [r7, #6]
 80027f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002800:	d10e      	bne.n	8002820 <HAL_UART_Receive+0x92>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d105      	bne.n	8002816 <HAL_UART_Receive+0x88>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002810:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002814:	e02d      	b.n	8002872 <HAL_UART_Receive+0xe4>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	22ff      	movs	r2, #255	; 0xff
 800281a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800281e:	e028      	b.n	8002872 <HAL_UART_Receive+0xe4>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10d      	bne.n	8002844 <HAL_UART_Receive+0xb6>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d104      	bne.n	800283a <HAL_UART_Receive+0xac>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	22ff      	movs	r2, #255	; 0xff
 8002834:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002838:	e01b      	b.n	8002872 <HAL_UART_Receive+0xe4>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	227f      	movs	r2, #127	; 0x7f
 800283e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002842:	e016      	b.n	8002872 <HAL_UART_Receive+0xe4>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800284c:	d10d      	bne.n	800286a <HAL_UART_Receive+0xdc>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d104      	bne.n	8002860 <HAL_UART_Receive+0xd2>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	227f      	movs	r2, #127	; 0x7f
 800285a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800285e:	e008      	b.n	8002872 <HAL_UART_Receive+0xe4>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	223f      	movs	r2, #63	; 0x3f
 8002864:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002868:	e003      	b.n	8002872 <HAL_UART_Receive+0xe4>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002878:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002882:	d108      	bne.n	8002896 <HAL_UART_Receive+0x108>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d104      	bne.n	8002896 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	e003      	b.n	800289e <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80028a6:	e032      	b.n	800290e <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2200      	movs	r2, #0
 80028b0:	2120      	movs	r1, #32
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fc19 	bl	80030ea <UART_WaitOnFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e031      	b.n	8002926 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10c      	bne.n	80028e2 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	8a7b      	ldrh	r3, [r7, #18]
 80028d2:	4013      	ands	r3, r2
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	3302      	adds	r3, #2
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	e00c      	b.n	80028fc <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	8a7b      	ldrh	r3, [r7, #18]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	4013      	ands	r3, r2
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3301      	adds	r3, #1
 80028fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1c6      	bne.n	80028a8 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2220      	movs	r2, #32
 800291e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	e000      	b.n	8002926 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8002924:	2302      	movs	r3, #2
  }
}
 8002926:	4618      	mov	r0, r3
 8002928:	3720      	adds	r7, #32
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800292e:	b480      	push	{r7}
 8002930:	b08f      	sub	sp, #60	; 0x3c
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8002940:	2302      	movs	r3, #2
 8002942:	e040      	b.n	80029c6 <HAL_HalfDuplex_EnableTransmitter+0x98>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	; 0x24
 8002950:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	e853 3f00 	ldrex	r3, [r3]
 800295e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f023 030c 	bic.w	r3, r3, #12
 8002966:	637b      	str	r3, [r7, #52]	; 0x34
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002972:	62ba      	str	r2, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002978:	e841 2300 	strex	r3, r2, [r1]
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1e6      	bne.n	8002952 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	e853 3f00 	ldrex	r3, [r3]
 8002990:	60bb      	str	r3, [r7, #8]
   return(result);
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f043 0308 	orr.w	r3, r3, #8
 8002998:	633b      	str	r3, [r7, #48]	; 0x30
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a6:	6979      	ldr	r1, [r7, #20]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	e841 2300 	strex	r3, r2, [r1]
 80029ae:	613b      	str	r3, [r7, #16]
   return(result);
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e6      	bne.n	8002984 <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	373c      	adds	r7, #60	; 0x3c
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b08f      	sub	sp, #60	; 0x3c
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_HalfDuplex_EnableReceiver+0x16>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e040      	b.n	8002a6a <HAL_HalfDuplex_EnableReceiver+0x98>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2224      	movs	r2, #36	; 0x24
 80029f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	e853 3f00 	ldrex	r3, [r3]
 8002a02:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f023 030c 	bic.w	r3, r3, #12
 8002a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a16:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1c:	e841 2300 	strex	r3, r2, [r1]
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1e6      	bne.n	80029f6 <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	e853 3f00 	ldrex	r3, [r3]
 8002a34:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4a:	6979      	ldr	r1, [r7, #20]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	e841 2300 	strex	r3, r2, [r1]
 8002a52:	613b      	str	r3, [r7, #16]
   return(result);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1e6      	bne.n	8002a28 <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	373c      	adds	r7, #60	; 0x3c
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4ba6      	ldr	r3, [pc, #664]	; (8002d3c <UART_SetConfig+0x2c4>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	6979      	ldr	r1, [r7, #20]
 8002aac:	430b      	orrs	r3, r1
 8002aae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a94      	ldr	r2, [pc, #592]	; (8002d40 <UART_SetConfig+0x2c8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d120      	bne.n	8002b36 <UART_SetConfig+0xbe>
 8002af4:	4b93      	ldr	r3, [pc, #588]	; (8002d44 <UART_SetConfig+0x2cc>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d816      	bhi.n	8002b30 <UART_SetConfig+0xb8>
 8002b02:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <UART_SetConfig+0x90>)
 8002b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002b25 	.word	0x08002b25
 8002b10:	08002b1f 	.word	0x08002b1f
 8002b14:	08002b2b 	.word	0x08002b2b
 8002b18:	2301      	movs	r3, #1
 8002b1a:	77fb      	strb	r3, [r7, #31]
 8002b1c:	e150      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	77fb      	strb	r3, [r7, #31]
 8002b22:	e14d      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002b24:	2304      	movs	r3, #4
 8002b26:	77fb      	strb	r3, [r7, #31]
 8002b28:	e14a      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	77fb      	strb	r3, [r7, #31]
 8002b2e:	e147      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002b30:	2310      	movs	r3, #16
 8002b32:	77fb      	strb	r3, [r7, #31]
 8002b34:	e144      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a83      	ldr	r2, [pc, #524]	; (8002d48 <UART_SetConfig+0x2d0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d132      	bne.n	8002ba6 <UART_SetConfig+0x12e>
 8002b40:	4b80      	ldr	r3, [pc, #512]	; (8002d44 <UART_SetConfig+0x2cc>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b0c      	cmp	r3, #12
 8002b4c:	d828      	bhi.n	8002ba0 <UART_SetConfig+0x128>
 8002b4e:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <UART_SetConfig+0xdc>)
 8002b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b54:	08002b89 	.word	0x08002b89
 8002b58:	08002ba1 	.word	0x08002ba1
 8002b5c:	08002ba1 	.word	0x08002ba1
 8002b60:	08002ba1 	.word	0x08002ba1
 8002b64:	08002b95 	.word	0x08002b95
 8002b68:	08002ba1 	.word	0x08002ba1
 8002b6c:	08002ba1 	.word	0x08002ba1
 8002b70:	08002ba1 	.word	0x08002ba1
 8002b74:	08002b8f 	.word	0x08002b8f
 8002b78:	08002ba1 	.word	0x08002ba1
 8002b7c:	08002ba1 	.word	0x08002ba1
 8002b80:	08002ba1 	.word	0x08002ba1
 8002b84:	08002b9b 	.word	0x08002b9b
 8002b88:	2300      	movs	r3, #0
 8002b8a:	77fb      	strb	r3, [r7, #31]
 8002b8c:	e118      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	77fb      	strb	r3, [r7, #31]
 8002b92:	e115      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002b94:	2304      	movs	r3, #4
 8002b96:	77fb      	strb	r3, [r7, #31]
 8002b98:	e112      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	77fb      	strb	r3, [r7, #31]
 8002b9e:	e10f      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002ba0:	2310      	movs	r3, #16
 8002ba2:	77fb      	strb	r3, [r7, #31]
 8002ba4:	e10c      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a68      	ldr	r2, [pc, #416]	; (8002d4c <UART_SetConfig+0x2d4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d120      	bne.n	8002bf2 <UART_SetConfig+0x17a>
 8002bb0:	4b64      	ldr	r3, [pc, #400]	; (8002d44 <UART_SetConfig+0x2cc>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002bba:	2b30      	cmp	r3, #48	; 0x30
 8002bbc:	d013      	beq.n	8002be6 <UART_SetConfig+0x16e>
 8002bbe:	2b30      	cmp	r3, #48	; 0x30
 8002bc0:	d814      	bhi.n	8002bec <UART_SetConfig+0x174>
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d009      	beq.n	8002bda <UART_SetConfig+0x162>
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d810      	bhi.n	8002bec <UART_SetConfig+0x174>
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <UART_SetConfig+0x15c>
 8002bce:	2b10      	cmp	r3, #16
 8002bd0:	d006      	beq.n	8002be0 <UART_SetConfig+0x168>
 8002bd2:	e00b      	b.n	8002bec <UART_SetConfig+0x174>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	77fb      	strb	r3, [r7, #31]
 8002bd8:	e0f2      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	77fb      	strb	r3, [r7, #31]
 8002bde:	e0ef      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002be0:	2304      	movs	r3, #4
 8002be2:	77fb      	strb	r3, [r7, #31]
 8002be4:	e0ec      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002be6:	2308      	movs	r3, #8
 8002be8:	77fb      	strb	r3, [r7, #31]
 8002bea:	e0e9      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002bec:	2310      	movs	r3, #16
 8002bee:	77fb      	strb	r3, [r7, #31]
 8002bf0:	e0e6      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a56      	ldr	r2, [pc, #344]	; (8002d50 <UART_SetConfig+0x2d8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d120      	bne.n	8002c3e <UART_SetConfig+0x1c6>
 8002bfc:	4b51      	ldr	r3, [pc, #324]	; (8002d44 <UART_SetConfig+0x2cc>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c06:	2bc0      	cmp	r3, #192	; 0xc0
 8002c08:	d013      	beq.n	8002c32 <UART_SetConfig+0x1ba>
 8002c0a:	2bc0      	cmp	r3, #192	; 0xc0
 8002c0c:	d814      	bhi.n	8002c38 <UART_SetConfig+0x1c0>
 8002c0e:	2b80      	cmp	r3, #128	; 0x80
 8002c10:	d009      	beq.n	8002c26 <UART_SetConfig+0x1ae>
 8002c12:	2b80      	cmp	r3, #128	; 0x80
 8002c14:	d810      	bhi.n	8002c38 <UART_SetConfig+0x1c0>
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <UART_SetConfig+0x1a8>
 8002c1a:	2b40      	cmp	r3, #64	; 0x40
 8002c1c:	d006      	beq.n	8002c2c <UART_SetConfig+0x1b4>
 8002c1e:	e00b      	b.n	8002c38 <UART_SetConfig+0x1c0>
 8002c20:	2300      	movs	r3, #0
 8002c22:	77fb      	strb	r3, [r7, #31]
 8002c24:	e0cc      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002c26:	2302      	movs	r3, #2
 8002c28:	77fb      	strb	r3, [r7, #31]
 8002c2a:	e0c9      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	77fb      	strb	r3, [r7, #31]
 8002c30:	e0c6      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002c32:	2308      	movs	r3, #8
 8002c34:	77fb      	strb	r3, [r7, #31]
 8002c36:	e0c3      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002c38:	2310      	movs	r3, #16
 8002c3a:	77fb      	strb	r3, [r7, #31]
 8002c3c:	e0c0      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a44      	ldr	r2, [pc, #272]	; (8002d54 <UART_SetConfig+0x2dc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d125      	bne.n	8002c94 <UART_SetConfig+0x21c>
 8002c48:	4b3e      	ldr	r3, [pc, #248]	; (8002d44 <UART_SetConfig+0x2cc>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c56:	d017      	beq.n	8002c88 <UART_SetConfig+0x210>
 8002c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c5c:	d817      	bhi.n	8002c8e <UART_SetConfig+0x216>
 8002c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c62:	d00b      	beq.n	8002c7c <UART_SetConfig+0x204>
 8002c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c68:	d811      	bhi.n	8002c8e <UART_SetConfig+0x216>
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <UART_SetConfig+0x1fe>
 8002c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c72:	d006      	beq.n	8002c82 <UART_SetConfig+0x20a>
 8002c74:	e00b      	b.n	8002c8e <UART_SetConfig+0x216>
 8002c76:	2300      	movs	r3, #0
 8002c78:	77fb      	strb	r3, [r7, #31]
 8002c7a:	e0a1      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	77fb      	strb	r3, [r7, #31]
 8002c80:	e09e      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002c82:	2304      	movs	r3, #4
 8002c84:	77fb      	strb	r3, [r7, #31]
 8002c86:	e09b      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002c88:	2308      	movs	r3, #8
 8002c8a:	77fb      	strb	r3, [r7, #31]
 8002c8c:	e098      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002c8e:	2310      	movs	r3, #16
 8002c90:	77fb      	strb	r3, [r7, #31]
 8002c92:	e095      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a2f      	ldr	r2, [pc, #188]	; (8002d58 <UART_SetConfig+0x2e0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d125      	bne.n	8002cea <UART_SetConfig+0x272>
 8002c9e:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <UART_SetConfig+0x2cc>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ca8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cac:	d017      	beq.n	8002cde <UART_SetConfig+0x266>
 8002cae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cb2:	d817      	bhi.n	8002ce4 <UART_SetConfig+0x26c>
 8002cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cb8:	d00b      	beq.n	8002cd2 <UART_SetConfig+0x25a>
 8002cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cbe:	d811      	bhi.n	8002ce4 <UART_SetConfig+0x26c>
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <UART_SetConfig+0x254>
 8002cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc8:	d006      	beq.n	8002cd8 <UART_SetConfig+0x260>
 8002cca:	e00b      	b.n	8002ce4 <UART_SetConfig+0x26c>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	77fb      	strb	r3, [r7, #31]
 8002cd0:	e076      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	77fb      	strb	r3, [r7, #31]
 8002cd6:	e073      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	77fb      	strb	r3, [r7, #31]
 8002cdc:	e070      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002cde:	2308      	movs	r3, #8
 8002ce0:	77fb      	strb	r3, [r7, #31]
 8002ce2:	e06d      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	77fb      	strb	r3, [r7, #31]
 8002ce8:	e06a      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <UART_SetConfig+0x2e4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d138      	bne.n	8002d66 <UART_SetConfig+0x2ee>
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <UART_SetConfig+0x2cc>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002cfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d02:	d017      	beq.n	8002d34 <UART_SetConfig+0x2bc>
 8002d04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d08:	d82a      	bhi.n	8002d60 <UART_SetConfig+0x2e8>
 8002d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0e:	d00b      	beq.n	8002d28 <UART_SetConfig+0x2b0>
 8002d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d14:	d824      	bhi.n	8002d60 <UART_SetConfig+0x2e8>
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <UART_SetConfig+0x2aa>
 8002d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d1e:	d006      	beq.n	8002d2e <UART_SetConfig+0x2b6>
 8002d20:	e01e      	b.n	8002d60 <UART_SetConfig+0x2e8>
 8002d22:	2300      	movs	r3, #0
 8002d24:	77fb      	strb	r3, [r7, #31]
 8002d26:	e04b      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	77fb      	strb	r3, [r7, #31]
 8002d2c:	e048      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002d2e:	2304      	movs	r3, #4
 8002d30:	77fb      	strb	r3, [r7, #31]
 8002d32:	e045      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002d34:	2308      	movs	r3, #8
 8002d36:	77fb      	strb	r3, [r7, #31]
 8002d38:	e042      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002d3a:	bf00      	nop
 8002d3c:	efff69f3 	.word	0xefff69f3
 8002d40:	40011000 	.word	0x40011000
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40004400 	.word	0x40004400
 8002d4c:	40004800 	.word	0x40004800
 8002d50:	40004c00 	.word	0x40004c00
 8002d54:	40005000 	.word	0x40005000
 8002d58:	40011400 	.word	0x40011400
 8002d5c:	40007800 	.word	0x40007800
 8002d60:	2310      	movs	r3, #16
 8002d62:	77fb      	strb	r3, [r7, #31]
 8002d64:	e02c      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a72      	ldr	r2, [pc, #456]	; (8002f34 <UART_SetConfig+0x4bc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d125      	bne.n	8002dbc <UART_SetConfig+0x344>
 8002d70:	4b71      	ldr	r3, [pc, #452]	; (8002f38 <UART_SetConfig+0x4c0>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d7a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d7e:	d017      	beq.n	8002db0 <UART_SetConfig+0x338>
 8002d80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d84:	d817      	bhi.n	8002db6 <UART_SetConfig+0x33e>
 8002d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d8a:	d00b      	beq.n	8002da4 <UART_SetConfig+0x32c>
 8002d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d90:	d811      	bhi.n	8002db6 <UART_SetConfig+0x33e>
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <UART_SetConfig+0x326>
 8002d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d9a:	d006      	beq.n	8002daa <UART_SetConfig+0x332>
 8002d9c:	e00b      	b.n	8002db6 <UART_SetConfig+0x33e>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	77fb      	strb	r3, [r7, #31]
 8002da2:	e00d      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002da4:	2302      	movs	r3, #2
 8002da6:	77fb      	strb	r3, [r7, #31]
 8002da8:	e00a      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002daa:	2304      	movs	r3, #4
 8002dac:	77fb      	strb	r3, [r7, #31]
 8002dae:	e007      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002db0:	2308      	movs	r3, #8
 8002db2:	77fb      	strb	r3, [r7, #31]
 8002db4:	e004      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002db6:	2310      	movs	r3, #16
 8002db8:	77fb      	strb	r3, [r7, #31]
 8002dba:	e001      	b.n	8002dc0 <UART_SetConfig+0x348>
 8002dbc:	2310      	movs	r3, #16
 8002dbe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc8:	d15b      	bne.n	8002e82 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002dca:	7ffb      	ldrb	r3, [r7, #31]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d828      	bhi.n	8002e22 <UART_SetConfig+0x3aa>
 8002dd0:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <UART_SetConfig+0x360>)
 8002dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd6:	bf00      	nop
 8002dd8:	08002dfd 	.word	0x08002dfd
 8002ddc:	08002e05 	.word	0x08002e05
 8002de0:	08002e0d 	.word	0x08002e0d
 8002de4:	08002e23 	.word	0x08002e23
 8002de8:	08002e13 	.word	0x08002e13
 8002dec:	08002e23 	.word	0x08002e23
 8002df0:	08002e23 	.word	0x08002e23
 8002df4:	08002e23 	.word	0x08002e23
 8002df8:	08002e1b 	.word	0x08002e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dfc:	f7fe ff78 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 8002e00:	61b8      	str	r0, [r7, #24]
        break;
 8002e02:	e013      	b.n	8002e2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e04:	f7fe ff88 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8002e08:	61b8      	str	r0, [r7, #24]
        break;
 8002e0a:	e00f      	b.n	8002e2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e0c:	4b4b      	ldr	r3, [pc, #300]	; (8002f3c <UART_SetConfig+0x4c4>)
 8002e0e:	61bb      	str	r3, [r7, #24]
        break;
 8002e10:	e00c      	b.n	8002e2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e12:	f7fe fe9b 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8002e16:	61b8      	str	r0, [r7, #24]
        break;
 8002e18:	e008      	b.n	8002e2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e1e:	61bb      	str	r3, [r7, #24]
        break;
 8002e20:	e004      	b.n	8002e2c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	77bb      	strb	r3, [r7, #30]
        break;
 8002e2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d074      	beq.n	8002f1c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	005a      	lsls	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	085b      	lsrs	r3, r3, #1
 8002e3c:	441a      	add	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b0f      	cmp	r3, #15
 8002e4c:	d916      	bls.n	8002e7c <UART_SetConfig+0x404>
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e54:	d212      	bcs.n	8002e7c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	f023 030f 	bic.w	r3, r3, #15
 8002e5e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	085b      	lsrs	r3, r3, #1
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	89fb      	ldrh	r3, [r7, #14]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	89fa      	ldrh	r2, [r7, #14]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	e04f      	b.n	8002f1c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	77bb      	strb	r3, [r7, #30]
 8002e80:	e04c      	b.n	8002f1c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e82:	7ffb      	ldrb	r3, [r7, #31]
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d828      	bhi.n	8002eda <UART_SetConfig+0x462>
 8002e88:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <UART_SetConfig+0x418>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002eb5 	.word	0x08002eb5
 8002e94:	08002ebd 	.word	0x08002ebd
 8002e98:	08002ec5 	.word	0x08002ec5
 8002e9c:	08002edb 	.word	0x08002edb
 8002ea0:	08002ecb 	.word	0x08002ecb
 8002ea4:	08002edb 	.word	0x08002edb
 8002ea8:	08002edb 	.word	0x08002edb
 8002eac:	08002edb 	.word	0x08002edb
 8002eb0:	08002ed3 	.word	0x08002ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eb4:	f7fe ff1c 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 8002eb8:	61b8      	str	r0, [r7, #24]
        break;
 8002eba:	e013      	b.n	8002ee4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ebc:	f7fe ff2c 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8002ec0:	61b8      	str	r0, [r7, #24]
        break;
 8002ec2:	e00f      	b.n	8002ee4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <UART_SetConfig+0x4c4>)
 8002ec6:	61bb      	str	r3, [r7, #24]
        break;
 8002ec8:	e00c      	b.n	8002ee4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eca:	f7fe fe3f 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8002ece:	61b8      	str	r0, [r7, #24]
        break;
 8002ed0:	e008      	b.n	8002ee4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ed6:	61bb      	str	r3, [r7, #24]
        break;
 8002ed8:	e004      	b.n	8002ee4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	77bb      	strb	r3, [r7, #30]
        break;
 8002ee2:	bf00      	nop
    }

    if (pclk != 0U)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d018      	beq.n	8002f1c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	085a      	lsrs	r2, r3, #1
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	441a      	add	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b0f      	cmp	r3, #15
 8002f02:	d909      	bls.n	8002f18 <UART_SetConfig+0x4a0>
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0a:	d205      	bcs.n	8002f18 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	e001      	b.n	8002f1c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f28:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3720      	adds	r7, #32
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40007c00 	.word	0x40007c00
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	00f42400 	.word	0x00f42400

08002f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301c:	2b00      	cmp	r3, #0
 800301e:	d01a      	beq.n	8003056 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800303e:	d10a      	bne.n	8003056 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	605a      	str	r2, [r3, #4]
  }
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af02      	add	r7, sp, #8
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003094:	f7fd ff08 	bl	8000ea8 <HAL_GetTick>
 8003098:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d10e      	bne.n	80030c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f817 	bl	80030ea <UART_WaitOnFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e00d      	b.n	80030e2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2220      	movs	r2, #32
 80030ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b09c      	sub	sp, #112	; 0x70
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fa:	e0a5      	b.n	8003248 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003102:	f000 80a1 	beq.w	8003248 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003106:	f7fd fecf 	bl	8000ea8 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003112:	429a      	cmp	r2, r3
 8003114:	d302      	bcc.n	800311c <UART_WaitOnFlagUntilTimeout+0x32>
 8003116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003118:	2b00      	cmp	r3, #0
 800311a:	d13e      	bne.n	800319a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003124:	e853 3f00 	ldrex	r3, [r3]
 8003128:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800312a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003130:	667b      	str	r3, [r7, #100]	; 0x64
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800313a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800313c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003140:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003142:	e841 2300 	strex	r3, r2, [r1]
 8003146:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e6      	bne.n	800311c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3308      	adds	r3, #8
 8003154:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003158:	e853 3f00 	ldrex	r3, [r3]
 800315c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	663b      	str	r3, [r7, #96]	; 0x60
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3308      	adds	r3, #8
 800316c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800316e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003170:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003172:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003176:	e841 2300 	strex	r3, r2, [r1]
 800317a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800317c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1e5      	bne.n	800314e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2220      	movs	r2, #32
 8003186:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e067      	b.n	800326a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d04f      	beq.n	8003248 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031b6:	d147      	bne.n	8003248 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	e853 3f00 	ldrex	r3, [r3]
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e0:	637b      	str	r3, [r7, #52]	; 0x34
 80031e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031e8:	e841 2300 	strex	r3, r2, [r1]
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e6      	bne.n	80031c2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3308      	adds	r3, #8
 80031fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	e853 3f00 	ldrex	r3, [r3]
 8003202:	613b      	str	r3, [r7, #16]
   return(result);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f023 0301 	bic.w	r3, r3, #1
 800320a:	66bb      	str	r3, [r7, #104]	; 0x68
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3308      	adds	r3, #8
 8003212:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003214:	623a      	str	r2, [r7, #32]
 8003216:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003218:	69f9      	ldr	r1, [r7, #28]
 800321a:	6a3a      	ldr	r2, [r7, #32]
 800321c:	e841 2300 	strex	r3, r2, [r1]
 8003220:	61bb      	str	r3, [r7, #24]
   return(result);
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1e5      	bne.n	80031f4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2220      	movs	r2, #32
 8003232:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e010      	b.n	800326a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	4013      	ands	r3, r2
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	429a      	cmp	r2, r3
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	429a      	cmp	r2, r3
 8003264:	f43f af4a 	beq.w	80030fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3770      	adds	r7, #112	; 0x70
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <__errno>:
 8003274:	4b01      	ldr	r3, [pc, #4]	; (800327c <__errno+0x8>)
 8003276:	6818      	ldr	r0, [r3, #0]
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	2000000c 	.word	0x2000000c

08003280 <__libc_init_array>:
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	4d0d      	ldr	r5, [pc, #52]	; (80032b8 <__libc_init_array+0x38>)
 8003284:	4c0d      	ldr	r4, [pc, #52]	; (80032bc <__libc_init_array+0x3c>)
 8003286:	1b64      	subs	r4, r4, r5
 8003288:	10a4      	asrs	r4, r4, #2
 800328a:	2600      	movs	r6, #0
 800328c:	42a6      	cmp	r6, r4
 800328e:	d109      	bne.n	80032a4 <__libc_init_array+0x24>
 8003290:	4d0b      	ldr	r5, [pc, #44]	; (80032c0 <__libc_init_array+0x40>)
 8003292:	4c0c      	ldr	r4, [pc, #48]	; (80032c4 <__libc_init_array+0x44>)
 8003294:	f000 ffbc 	bl	8004210 <_init>
 8003298:	1b64      	subs	r4, r4, r5
 800329a:	10a4      	asrs	r4, r4, #2
 800329c:	2600      	movs	r6, #0
 800329e:	42a6      	cmp	r6, r4
 80032a0:	d105      	bne.n	80032ae <__libc_init_array+0x2e>
 80032a2:	bd70      	pop	{r4, r5, r6, pc}
 80032a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a8:	4798      	blx	r3
 80032aa:	3601      	adds	r6, #1
 80032ac:	e7ee      	b.n	800328c <__libc_init_array+0xc>
 80032ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b2:	4798      	blx	r3
 80032b4:	3601      	adds	r6, #1
 80032b6:	e7f2      	b.n	800329e <__libc_init_array+0x1e>
 80032b8:	08004500 	.word	0x08004500
 80032bc:	08004500 	.word	0x08004500
 80032c0:	08004500 	.word	0x08004500
 80032c4:	08004504 	.word	0x08004504

080032c8 <memcpy>:
 80032c8:	440a      	add	r2, r1
 80032ca:	4291      	cmp	r1, r2
 80032cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80032d0:	d100      	bne.n	80032d4 <memcpy+0xc>
 80032d2:	4770      	bx	lr
 80032d4:	b510      	push	{r4, lr}
 80032d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032de:	4291      	cmp	r1, r2
 80032e0:	d1f9      	bne.n	80032d6 <memcpy+0xe>
 80032e2:	bd10      	pop	{r4, pc}

080032e4 <memset>:
 80032e4:	4402      	add	r2, r0
 80032e6:	4603      	mov	r3, r0
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d100      	bne.n	80032ee <memset+0xa>
 80032ec:	4770      	bx	lr
 80032ee:	f803 1b01 	strb.w	r1, [r3], #1
 80032f2:	e7f9      	b.n	80032e8 <memset+0x4>

080032f4 <iprintf>:
 80032f4:	b40f      	push	{r0, r1, r2, r3}
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <iprintf+0x2c>)
 80032f8:	b513      	push	{r0, r1, r4, lr}
 80032fa:	681c      	ldr	r4, [r3, #0]
 80032fc:	b124      	cbz	r4, 8003308 <iprintf+0x14>
 80032fe:	69a3      	ldr	r3, [r4, #24]
 8003300:	b913      	cbnz	r3, 8003308 <iprintf+0x14>
 8003302:	4620      	mov	r0, r4
 8003304:	f000 f866 	bl	80033d4 <__sinit>
 8003308:	ab05      	add	r3, sp, #20
 800330a:	9a04      	ldr	r2, [sp, #16]
 800330c:	68a1      	ldr	r1, [r4, #8]
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	4620      	mov	r0, r4
 8003312:	f000 f9bd 	bl	8003690 <_vfiprintf_r>
 8003316:	b002      	add	sp, #8
 8003318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800331c:	b004      	add	sp, #16
 800331e:	4770      	bx	lr
 8003320:	2000000c 	.word	0x2000000c

08003324 <std>:
 8003324:	2300      	movs	r3, #0
 8003326:	b510      	push	{r4, lr}
 8003328:	4604      	mov	r4, r0
 800332a:	e9c0 3300 	strd	r3, r3, [r0]
 800332e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003332:	6083      	str	r3, [r0, #8]
 8003334:	8181      	strh	r1, [r0, #12]
 8003336:	6643      	str	r3, [r0, #100]	; 0x64
 8003338:	81c2      	strh	r2, [r0, #14]
 800333a:	6183      	str	r3, [r0, #24]
 800333c:	4619      	mov	r1, r3
 800333e:	2208      	movs	r2, #8
 8003340:	305c      	adds	r0, #92	; 0x5c
 8003342:	f7ff ffcf 	bl	80032e4 <memset>
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <std+0x38>)
 8003348:	6263      	str	r3, [r4, #36]	; 0x24
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <std+0x3c>)
 800334c:	62a3      	str	r3, [r4, #40]	; 0x28
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <std+0x40>)
 8003350:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <std+0x44>)
 8003354:	6224      	str	r4, [r4, #32]
 8003356:	6323      	str	r3, [r4, #48]	; 0x30
 8003358:	bd10      	pop	{r4, pc}
 800335a:	bf00      	nop
 800335c:	08003c39 	.word	0x08003c39
 8003360:	08003c5b 	.word	0x08003c5b
 8003364:	08003c93 	.word	0x08003c93
 8003368:	08003cb7 	.word	0x08003cb7

0800336c <_cleanup_r>:
 800336c:	4901      	ldr	r1, [pc, #4]	; (8003374 <_cleanup_r+0x8>)
 800336e:	f000 b8af 	b.w	80034d0 <_fwalk_reent>
 8003372:	bf00      	nop
 8003374:	08003f91 	.word	0x08003f91

08003378 <__sfmoreglue>:
 8003378:	b570      	push	{r4, r5, r6, lr}
 800337a:	2268      	movs	r2, #104	; 0x68
 800337c:	1e4d      	subs	r5, r1, #1
 800337e:	4355      	muls	r5, r2
 8003380:	460e      	mov	r6, r1
 8003382:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003386:	f000 f8e5 	bl	8003554 <_malloc_r>
 800338a:	4604      	mov	r4, r0
 800338c:	b140      	cbz	r0, 80033a0 <__sfmoreglue+0x28>
 800338e:	2100      	movs	r1, #0
 8003390:	e9c0 1600 	strd	r1, r6, [r0]
 8003394:	300c      	adds	r0, #12
 8003396:	60a0      	str	r0, [r4, #8]
 8003398:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800339c:	f7ff ffa2 	bl	80032e4 <memset>
 80033a0:	4620      	mov	r0, r4
 80033a2:	bd70      	pop	{r4, r5, r6, pc}

080033a4 <__sfp_lock_acquire>:
 80033a4:	4801      	ldr	r0, [pc, #4]	; (80033ac <__sfp_lock_acquire+0x8>)
 80033a6:	f000 b8b3 	b.w	8003510 <__retarget_lock_acquire_recursive>
 80033aa:	bf00      	nop
 80033ac:	2000019d 	.word	0x2000019d

080033b0 <__sfp_lock_release>:
 80033b0:	4801      	ldr	r0, [pc, #4]	; (80033b8 <__sfp_lock_release+0x8>)
 80033b2:	f000 b8ae 	b.w	8003512 <__retarget_lock_release_recursive>
 80033b6:	bf00      	nop
 80033b8:	2000019d 	.word	0x2000019d

080033bc <__sinit_lock_acquire>:
 80033bc:	4801      	ldr	r0, [pc, #4]	; (80033c4 <__sinit_lock_acquire+0x8>)
 80033be:	f000 b8a7 	b.w	8003510 <__retarget_lock_acquire_recursive>
 80033c2:	bf00      	nop
 80033c4:	2000019e 	.word	0x2000019e

080033c8 <__sinit_lock_release>:
 80033c8:	4801      	ldr	r0, [pc, #4]	; (80033d0 <__sinit_lock_release+0x8>)
 80033ca:	f000 b8a2 	b.w	8003512 <__retarget_lock_release_recursive>
 80033ce:	bf00      	nop
 80033d0:	2000019e 	.word	0x2000019e

080033d4 <__sinit>:
 80033d4:	b510      	push	{r4, lr}
 80033d6:	4604      	mov	r4, r0
 80033d8:	f7ff fff0 	bl	80033bc <__sinit_lock_acquire>
 80033dc:	69a3      	ldr	r3, [r4, #24]
 80033de:	b11b      	cbz	r3, 80033e8 <__sinit+0x14>
 80033e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033e4:	f7ff bff0 	b.w	80033c8 <__sinit_lock_release>
 80033e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033ec:	6523      	str	r3, [r4, #80]	; 0x50
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <__sinit+0x68>)
 80033f0:	4a13      	ldr	r2, [pc, #76]	; (8003440 <__sinit+0x6c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80033f6:	42a3      	cmp	r3, r4
 80033f8:	bf04      	itt	eq
 80033fa:	2301      	moveq	r3, #1
 80033fc:	61a3      	streq	r3, [r4, #24]
 80033fe:	4620      	mov	r0, r4
 8003400:	f000 f820 	bl	8003444 <__sfp>
 8003404:	6060      	str	r0, [r4, #4]
 8003406:	4620      	mov	r0, r4
 8003408:	f000 f81c 	bl	8003444 <__sfp>
 800340c:	60a0      	str	r0, [r4, #8]
 800340e:	4620      	mov	r0, r4
 8003410:	f000 f818 	bl	8003444 <__sfp>
 8003414:	2200      	movs	r2, #0
 8003416:	60e0      	str	r0, [r4, #12]
 8003418:	2104      	movs	r1, #4
 800341a:	6860      	ldr	r0, [r4, #4]
 800341c:	f7ff ff82 	bl	8003324 <std>
 8003420:	68a0      	ldr	r0, [r4, #8]
 8003422:	2201      	movs	r2, #1
 8003424:	2109      	movs	r1, #9
 8003426:	f7ff ff7d 	bl	8003324 <std>
 800342a:	68e0      	ldr	r0, [r4, #12]
 800342c:	2202      	movs	r2, #2
 800342e:	2112      	movs	r1, #18
 8003430:	f7ff ff78 	bl	8003324 <std>
 8003434:	2301      	movs	r3, #1
 8003436:	61a3      	str	r3, [r4, #24]
 8003438:	e7d2      	b.n	80033e0 <__sinit+0xc>
 800343a:	bf00      	nop
 800343c:	08004460 	.word	0x08004460
 8003440:	0800336d 	.word	0x0800336d

08003444 <__sfp>:
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	4607      	mov	r7, r0
 8003448:	f7ff ffac 	bl	80033a4 <__sfp_lock_acquire>
 800344c:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <__sfp+0x84>)
 800344e:	681e      	ldr	r6, [r3, #0]
 8003450:	69b3      	ldr	r3, [r6, #24]
 8003452:	b913      	cbnz	r3, 800345a <__sfp+0x16>
 8003454:	4630      	mov	r0, r6
 8003456:	f7ff ffbd 	bl	80033d4 <__sinit>
 800345a:	3648      	adds	r6, #72	; 0x48
 800345c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003460:	3b01      	subs	r3, #1
 8003462:	d503      	bpl.n	800346c <__sfp+0x28>
 8003464:	6833      	ldr	r3, [r6, #0]
 8003466:	b30b      	cbz	r3, 80034ac <__sfp+0x68>
 8003468:	6836      	ldr	r6, [r6, #0]
 800346a:	e7f7      	b.n	800345c <__sfp+0x18>
 800346c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003470:	b9d5      	cbnz	r5, 80034a8 <__sfp+0x64>
 8003472:	4b16      	ldr	r3, [pc, #88]	; (80034cc <__sfp+0x88>)
 8003474:	60e3      	str	r3, [r4, #12]
 8003476:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800347a:	6665      	str	r5, [r4, #100]	; 0x64
 800347c:	f000 f847 	bl	800350e <__retarget_lock_init_recursive>
 8003480:	f7ff ff96 	bl	80033b0 <__sfp_lock_release>
 8003484:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003488:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800348c:	6025      	str	r5, [r4, #0]
 800348e:	61a5      	str	r5, [r4, #24]
 8003490:	2208      	movs	r2, #8
 8003492:	4629      	mov	r1, r5
 8003494:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003498:	f7ff ff24 	bl	80032e4 <memset>
 800349c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80034a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80034a4:	4620      	mov	r0, r4
 80034a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034a8:	3468      	adds	r4, #104	; 0x68
 80034aa:	e7d9      	b.n	8003460 <__sfp+0x1c>
 80034ac:	2104      	movs	r1, #4
 80034ae:	4638      	mov	r0, r7
 80034b0:	f7ff ff62 	bl	8003378 <__sfmoreglue>
 80034b4:	4604      	mov	r4, r0
 80034b6:	6030      	str	r0, [r6, #0]
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d1d5      	bne.n	8003468 <__sfp+0x24>
 80034bc:	f7ff ff78 	bl	80033b0 <__sfp_lock_release>
 80034c0:	230c      	movs	r3, #12
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	e7ee      	b.n	80034a4 <__sfp+0x60>
 80034c6:	bf00      	nop
 80034c8:	08004460 	.word	0x08004460
 80034cc:	ffff0001 	.word	0xffff0001

080034d0 <_fwalk_reent>:
 80034d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034d4:	4606      	mov	r6, r0
 80034d6:	4688      	mov	r8, r1
 80034d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034dc:	2700      	movs	r7, #0
 80034de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034e2:	f1b9 0901 	subs.w	r9, r9, #1
 80034e6:	d505      	bpl.n	80034f4 <_fwalk_reent+0x24>
 80034e8:	6824      	ldr	r4, [r4, #0]
 80034ea:	2c00      	cmp	r4, #0
 80034ec:	d1f7      	bne.n	80034de <_fwalk_reent+0xe>
 80034ee:	4638      	mov	r0, r7
 80034f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034f4:	89ab      	ldrh	r3, [r5, #12]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d907      	bls.n	800350a <_fwalk_reent+0x3a>
 80034fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034fe:	3301      	adds	r3, #1
 8003500:	d003      	beq.n	800350a <_fwalk_reent+0x3a>
 8003502:	4629      	mov	r1, r5
 8003504:	4630      	mov	r0, r6
 8003506:	47c0      	blx	r8
 8003508:	4307      	orrs	r7, r0
 800350a:	3568      	adds	r5, #104	; 0x68
 800350c:	e7e9      	b.n	80034e2 <_fwalk_reent+0x12>

0800350e <__retarget_lock_init_recursive>:
 800350e:	4770      	bx	lr

08003510 <__retarget_lock_acquire_recursive>:
 8003510:	4770      	bx	lr

08003512 <__retarget_lock_release_recursive>:
 8003512:	4770      	bx	lr

08003514 <sbrk_aligned>:
 8003514:	b570      	push	{r4, r5, r6, lr}
 8003516:	4e0e      	ldr	r6, [pc, #56]	; (8003550 <sbrk_aligned+0x3c>)
 8003518:	460c      	mov	r4, r1
 800351a:	6831      	ldr	r1, [r6, #0]
 800351c:	4605      	mov	r5, r0
 800351e:	b911      	cbnz	r1, 8003526 <sbrk_aligned+0x12>
 8003520:	f000 fb7a 	bl	8003c18 <_sbrk_r>
 8003524:	6030      	str	r0, [r6, #0]
 8003526:	4621      	mov	r1, r4
 8003528:	4628      	mov	r0, r5
 800352a:	f000 fb75 	bl	8003c18 <_sbrk_r>
 800352e:	1c43      	adds	r3, r0, #1
 8003530:	d00a      	beq.n	8003548 <sbrk_aligned+0x34>
 8003532:	1cc4      	adds	r4, r0, #3
 8003534:	f024 0403 	bic.w	r4, r4, #3
 8003538:	42a0      	cmp	r0, r4
 800353a:	d007      	beq.n	800354c <sbrk_aligned+0x38>
 800353c:	1a21      	subs	r1, r4, r0
 800353e:	4628      	mov	r0, r5
 8003540:	f000 fb6a 	bl	8003c18 <_sbrk_r>
 8003544:	3001      	adds	r0, #1
 8003546:	d101      	bne.n	800354c <sbrk_aligned+0x38>
 8003548:	f04f 34ff 	mov.w	r4, #4294967295
 800354c:	4620      	mov	r0, r4
 800354e:	bd70      	pop	{r4, r5, r6, pc}
 8003550:	200001a4 	.word	0x200001a4

08003554 <_malloc_r>:
 8003554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003558:	1ccd      	adds	r5, r1, #3
 800355a:	f025 0503 	bic.w	r5, r5, #3
 800355e:	3508      	adds	r5, #8
 8003560:	2d0c      	cmp	r5, #12
 8003562:	bf38      	it	cc
 8003564:	250c      	movcc	r5, #12
 8003566:	2d00      	cmp	r5, #0
 8003568:	4607      	mov	r7, r0
 800356a:	db01      	blt.n	8003570 <_malloc_r+0x1c>
 800356c:	42a9      	cmp	r1, r5
 800356e:	d905      	bls.n	800357c <_malloc_r+0x28>
 8003570:	230c      	movs	r3, #12
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	2600      	movs	r6, #0
 8003576:	4630      	mov	r0, r6
 8003578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800357c:	4e2e      	ldr	r6, [pc, #184]	; (8003638 <_malloc_r+0xe4>)
 800357e:	f000 fdbb 	bl	80040f8 <__malloc_lock>
 8003582:	6833      	ldr	r3, [r6, #0]
 8003584:	461c      	mov	r4, r3
 8003586:	bb34      	cbnz	r4, 80035d6 <_malloc_r+0x82>
 8003588:	4629      	mov	r1, r5
 800358a:	4638      	mov	r0, r7
 800358c:	f7ff ffc2 	bl	8003514 <sbrk_aligned>
 8003590:	1c43      	adds	r3, r0, #1
 8003592:	4604      	mov	r4, r0
 8003594:	d14d      	bne.n	8003632 <_malloc_r+0xde>
 8003596:	6834      	ldr	r4, [r6, #0]
 8003598:	4626      	mov	r6, r4
 800359a:	2e00      	cmp	r6, #0
 800359c:	d140      	bne.n	8003620 <_malloc_r+0xcc>
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	4631      	mov	r1, r6
 80035a2:	4638      	mov	r0, r7
 80035a4:	eb04 0803 	add.w	r8, r4, r3
 80035a8:	f000 fb36 	bl	8003c18 <_sbrk_r>
 80035ac:	4580      	cmp	r8, r0
 80035ae:	d13a      	bne.n	8003626 <_malloc_r+0xd2>
 80035b0:	6821      	ldr	r1, [r4, #0]
 80035b2:	3503      	adds	r5, #3
 80035b4:	1a6d      	subs	r5, r5, r1
 80035b6:	f025 0503 	bic.w	r5, r5, #3
 80035ba:	3508      	adds	r5, #8
 80035bc:	2d0c      	cmp	r5, #12
 80035be:	bf38      	it	cc
 80035c0:	250c      	movcc	r5, #12
 80035c2:	4629      	mov	r1, r5
 80035c4:	4638      	mov	r0, r7
 80035c6:	f7ff ffa5 	bl	8003514 <sbrk_aligned>
 80035ca:	3001      	adds	r0, #1
 80035cc:	d02b      	beq.n	8003626 <_malloc_r+0xd2>
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	442b      	add	r3, r5
 80035d2:	6023      	str	r3, [r4, #0]
 80035d4:	e00e      	b.n	80035f4 <_malloc_r+0xa0>
 80035d6:	6822      	ldr	r2, [r4, #0]
 80035d8:	1b52      	subs	r2, r2, r5
 80035da:	d41e      	bmi.n	800361a <_malloc_r+0xc6>
 80035dc:	2a0b      	cmp	r2, #11
 80035de:	d916      	bls.n	800360e <_malloc_r+0xba>
 80035e0:	1961      	adds	r1, r4, r5
 80035e2:	42a3      	cmp	r3, r4
 80035e4:	6025      	str	r5, [r4, #0]
 80035e6:	bf18      	it	ne
 80035e8:	6059      	strne	r1, [r3, #4]
 80035ea:	6863      	ldr	r3, [r4, #4]
 80035ec:	bf08      	it	eq
 80035ee:	6031      	streq	r1, [r6, #0]
 80035f0:	5162      	str	r2, [r4, r5]
 80035f2:	604b      	str	r3, [r1, #4]
 80035f4:	4638      	mov	r0, r7
 80035f6:	f104 060b 	add.w	r6, r4, #11
 80035fa:	f000 fd83 	bl	8004104 <__malloc_unlock>
 80035fe:	f026 0607 	bic.w	r6, r6, #7
 8003602:	1d23      	adds	r3, r4, #4
 8003604:	1af2      	subs	r2, r6, r3
 8003606:	d0b6      	beq.n	8003576 <_malloc_r+0x22>
 8003608:	1b9b      	subs	r3, r3, r6
 800360a:	50a3      	str	r3, [r4, r2]
 800360c:	e7b3      	b.n	8003576 <_malloc_r+0x22>
 800360e:	6862      	ldr	r2, [r4, #4]
 8003610:	42a3      	cmp	r3, r4
 8003612:	bf0c      	ite	eq
 8003614:	6032      	streq	r2, [r6, #0]
 8003616:	605a      	strne	r2, [r3, #4]
 8003618:	e7ec      	b.n	80035f4 <_malloc_r+0xa0>
 800361a:	4623      	mov	r3, r4
 800361c:	6864      	ldr	r4, [r4, #4]
 800361e:	e7b2      	b.n	8003586 <_malloc_r+0x32>
 8003620:	4634      	mov	r4, r6
 8003622:	6876      	ldr	r6, [r6, #4]
 8003624:	e7b9      	b.n	800359a <_malloc_r+0x46>
 8003626:	230c      	movs	r3, #12
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	4638      	mov	r0, r7
 800362c:	f000 fd6a 	bl	8004104 <__malloc_unlock>
 8003630:	e7a1      	b.n	8003576 <_malloc_r+0x22>
 8003632:	6025      	str	r5, [r4, #0]
 8003634:	e7de      	b.n	80035f4 <_malloc_r+0xa0>
 8003636:	bf00      	nop
 8003638:	200001a0 	.word	0x200001a0

0800363c <__sfputc_r>:
 800363c:	6893      	ldr	r3, [r2, #8]
 800363e:	3b01      	subs	r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	b410      	push	{r4}
 8003644:	6093      	str	r3, [r2, #8]
 8003646:	da08      	bge.n	800365a <__sfputc_r+0x1e>
 8003648:	6994      	ldr	r4, [r2, #24]
 800364a:	42a3      	cmp	r3, r4
 800364c:	db01      	blt.n	8003652 <__sfputc_r+0x16>
 800364e:	290a      	cmp	r1, #10
 8003650:	d103      	bne.n	800365a <__sfputc_r+0x1e>
 8003652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003656:	f000 bb33 	b.w	8003cc0 <__swbuf_r>
 800365a:	6813      	ldr	r3, [r2, #0]
 800365c:	1c58      	adds	r0, r3, #1
 800365e:	6010      	str	r0, [r2, #0]
 8003660:	7019      	strb	r1, [r3, #0]
 8003662:	4608      	mov	r0, r1
 8003664:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003668:	4770      	bx	lr

0800366a <__sfputs_r>:
 800366a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366c:	4606      	mov	r6, r0
 800366e:	460f      	mov	r7, r1
 8003670:	4614      	mov	r4, r2
 8003672:	18d5      	adds	r5, r2, r3
 8003674:	42ac      	cmp	r4, r5
 8003676:	d101      	bne.n	800367c <__sfputs_r+0x12>
 8003678:	2000      	movs	r0, #0
 800367a:	e007      	b.n	800368c <__sfputs_r+0x22>
 800367c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003680:	463a      	mov	r2, r7
 8003682:	4630      	mov	r0, r6
 8003684:	f7ff ffda 	bl	800363c <__sfputc_r>
 8003688:	1c43      	adds	r3, r0, #1
 800368a:	d1f3      	bne.n	8003674 <__sfputs_r+0xa>
 800368c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003690 <_vfiprintf_r>:
 8003690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003694:	460d      	mov	r5, r1
 8003696:	b09d      	sub	sp, #116	; 0x74
 8003698:	4614      	mov	r4, r2
 800369a:	4698      	mov	r8, r3
 800369c:	4606      	mov	r6, r0
 800369e:	b118      	cbz	r0, 80036a8 <_vfiprintf_r+0x18>
 80036a0:	6983      	ldr	r3, [r0, #24]
 80036a2:	b90b      	cbnz	r3, 80036a8 <_vfiprintf_r+0x18>
 80036a4:	f7ff fe96 	bl	80033d4 <__sinit>
 80036a8:	4b89      	ldr	r3, [pc, #548]	; (80038d0 <_vfiprintf_r+0x240>)
 80036aa:	429d      	cmp	r5, r3
 80036ac:	d11b      	bne.n	80036e6 <_vfiprintf_r+0x56>
 80036ae:	6875      	ldr	r5, [r6, #4]
 80036b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036b2:	07d9      	lsls	r1, r3, #31
 80036b4:	d405      	bmi.n	80036c2 <_vfiprintf_r+0x32>
 80036b6:	89ab      	ldrh	r3, [r5, #12]
 80036b8:	059a      	lsls	r2, r3, #22
 80036ba:	d402      	bmi.n	80036c2 <_vfiprintf_r+0x32>
 80036bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036be:	f7ff ff27 	bl	8003510 <__retarget_lock_acquire_recursive>
 80036c2:	89ab      	ldrh	r3, [r5, #12]
 80036c4:	071b      	lsls	r3, r3, #28
 80036c6:	d501      	bpl.n	80036cc <_vfiprintf_r+0x3c>
 80036c8:	692b      	ldr	r3, [r5, #16]
 80036ca:	b9eb      	cbnz	r3, 8003708 <_vfiprintf_r+0x78>
 80036cc:	4629      	mov	r1, r5
 80036ce:	4630      	mov	r0, r6
 80036d0:	f000 fb5a 	bl	8003d88 <__swsetup_r>
 80036d4:	b1c0      	cbz	r0, 8003708 <_vfiprintf_r+0x78>
 80036d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036d8:	07dc      	lsls	r4, r3, #31
 80036da:	d50e      	bpl.n	80036fa <_vfiprintf_r+0x6a>
 80036dc:	f04f 30ff 	mov.w	r0, #4294967295
 80036e0:	b01d      	add	sp, #116	; 0x74
 80036e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036e6:	4b7b      	ldr	r3, [pc, #492]	; (80038d4 <_vfiprintf_r+0x244>)
 80036e8:	429d      	cmp	r5, r3
 80036ea:	d101      	bne.n	80036f0 <_vfiprintf_r+0x60>
 80036ec:	68b5      	ldr	r5, [r6, #8]
 80036ee:	e7df      	b.n	80036b0 <_vfiprintf_r+0x20>
 80036f0:	4b79      	ldr	r3, [pc, #484]	; (80038d8 <_vfiprintf_r+0x248>)
 80036f2:	429d      	cmp	r5, r3
 80036f4:	bf08      	it	eq
 80036f6:	68f5      	ldreq	r5, [r6, #12]
 80036f8:	e7da      	b.n	80036b0 <_vfiprintf_r+0x20>
 80036fa:	89ab      	ldrh	r3, [r5, #12]
 80036fc:	0598      	lsls	r0, r3, #22
 80036fe:	d4ed      	bmi.n	80036dc <_vfiprintf_r+0x4c>
 8003700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003702:	f7ff ff06 	bl	8003512 <__retarget_lock_release_recursive>
 8003706:	e7e9      	b.n	80036dc <_vfiprintf_r+0x4c>
 8003708:	2300      	movs	r3, #0
 800370a:	9309      	str	r3, [sp, #36]	; 0x24
 800370c:	2320      	movs	r3, #32
 800370e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003712:	f8cd 800c 	str.w	r8, [sp, #12]
 8003716:	2330      	movs	r3, #48	; 0x30
 8003718:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80038dc <_vfiprintf_r+0x24c>
 800371c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003720:	f04f 0901 	mov.w	r9, #1
 8003724:	4623      	mov	r3, r4
 8003726:	469a      	mov	sl, r3
 8003728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800372c:	b10a      	cbz	r2, 8003732 <_vfiprintf_r+0xa2>
 800372e:	2a25      	cmp	r2, #37	; 0x25
 8003730:	d1f9      	bne.n	8003726 <_vfiprintf_r+0x96>
 8003732:	ebba 0b04 	subs.w	fp, sl, r4
 8003736:	d00b      	beq.n	8003750 <_vfiprintf_r+0xc0>
 8003738:	465b      	mov	r3, fp
 800373a:	4622      	mov	r2, r4
 800373c:	4629      	mov	r1, r5
 800373e:	4630      	mov	r0, r6
 8003740:	f7ff ff93 	bl	800366a <__sfputs_r>
 8003744:	3001      	adds	r0, #1
 8003746:	f000 80aa 	beq.w	800389e <_vfiprintf_r+0x20e>
 800374a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800374c:	445a      	add	r2, fp
 800374e:	9209      	str	r2, [sp, #36]	; 0x24
 8003750:	f89a 3000 	ldrb.w	r3, [sl]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80a2 	beq.w	800389e <_vfiprintf_r+0x20e>
 800375a:	2300      	movs	r3, #0
 800375c:	f04f 32ff 	mov.w	r2, #4294967295
 8003760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003764:	f10a 0a01 	add.w	sl, sl, #1
 8003768:	9304      	str	r3, [sp, #16]
 800376a:	9307      	str	r3, [sp, #28]
 800376c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003770:	931a      	str	r3, [sp, #104]	; 0x68
 8003772:	4654      	mov	r4, sl
 8003774:	2205      	movs	r2, #5
 8003776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800377a:	4858      	ldr	r0, [pc, #352]	; (80038dc <_vfiprintf_r+0x24c>)
 800377c:	f7fc fd48 	bl	8000210 <memchr>
 8003780:	9a04      	ldr	r2, [sp, #16]
 8003782:	b9d8      	cbnz	r0, 80037bc <_vfiprintf_r+0x12c>
 8003784:	06d1      	lsls	r1, r2, #27
 8003786:	bf44      	itt	mi
 8003788:	2320      	movmi	r3, #32
 800378a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800378e:	0713      	lsls	r3, r2, #28
 8003790:	bf44      	itt	mi
 8003792:	232b      	movmi	r3, #43	; 0x2b
 8003794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003798:	f89a 3000 	ldrb.w	r3, [sl]
 800379c:	2b2a      	cmp	r3, #42	; 0x2a
 800379e:	d015      	beq.n	80037cc <_vfiprintf_r+0x13c>
 80037a0:	9a07      	ldr	r2, [sp, #28]
 80037a2:	4654      	mov	r4, sl
 80037a4:	2000      	movs	r0, #0
 80037a6:	f04f 0c0a 	mov.w	ip, #10
 80037aa:	4621      	mov	r1, r4
 80037ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037b0:	3b30      	subs	r3, #48	; 0x30
 80037b2:	2b09      	cmp	r3, #9
 80037b4:	d94e      	bls.n	8003854 <_vfiprintf_r+0x1c4>
 80037b6:	b1b0      	cbz	r0, 80037e6 <_vfiprintf_r+0x156>
 80037b8:	9207      	str	r2, [sp, #28]
 80037ba:	e014      	b.n	80037e6 <_vfiprintf_r+0x156>
 80037bc:	eba0 0308 	sub.w	r3, r0, r8
 80037c0:	fa09 f303 	lsl.w	r3, r9, r3
 80037c4:	4313      	orrs	r3, r2
 80037c6:	9304      	str	r3, [sp, #16]
 80037c8:	46a2      	mov	sl, r4
 80037ca:	e7d2      	b.n	8003772 <_vfiprintf_r+0xe2>
 80037cc:	9b03      	ldr	r3, [sp, #12]
 80037ce:	1d19      	adds	r1, r3, #4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	9103      	str	r1, [sp, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bfbb      	ittet	lt
 80037d8:	425b      	neglt	r3, r3
 80037da:	f042 0202 	orrlt.w	r2, r2, #2
 80037de:	9307      	strge	r3, [sp, #28]
 80037e0:	9307      	strlt	r3, [sp, #28]
 80037e2:	bfb8      	it	lt
 80037e4:	9204      	strlt	r2, [sp, #16]
 80037e6:	7823      	ldrb	r3, [r4, #0]
 80037e8:	2b2e      	cmp	r3, #46	; 0x2e
 80037ea:	d10c      	bne.n	8003806 <_vfiprintf_r+0x176>
 80037ec:	7863      	ldrb	r3, [r4, #1]
 80037ee:	2b2a      	cmp	r3, #42	; 0x2a
 80037f0:	d135      	bne.n	800385e <_vfiprintf_r+0x1ce>
 80037f2:	9b03      	ldr	r3, [sp, #12]
 80037f4:	1d1a      	adds	r2, r3, #4
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	9203      	str	r2, [sp, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bfb8      	it	lt
 80037fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8003802:	3402      	adds	r4, #2
 8003804:	9305      	str	r3, [sp, #20]
 8003806:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80038ec <_vfiprintf_r+0x25c>
 800380a:	7821      	ldrb	r1, [r4, #0]
 800380c:	2203      	movs	r2, #3
 800380e:	4650      	mov	r0, sl
 8003810:	f7fc fcfe 	bl	8000210 <memchr>
 8003814:	b140      	cbz	r0, 8003828 <_vfiprintf_r+0x198>
 8003816:	2340      	movs	r3, #64	; 0x40
 8003818:	eba0 000a 	sub.w	r0, r0, sl
 800381c:	fa03 f000 	lsl.w	r0, r3, r0
 8003820:	9b04      	ldr	r3, [sp, #16]
 8003822:	4303      	orrs	r3, r0
 8003824:	3401      	adds	r4, #1
 8003826:	9304      	str	r3, [sp, #16]
 8003828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800382c:	482c      	ldr	r0, [pc, #176]	; (80038e0 <_vfiprintf_r+0x250>)
 800382e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003832:	2206      	movs	r2, #6
 8003834:	f7fc fcec 	bl	8000210 <memchr>
 8003838:	2800      	cmp	r0, #0
 800383a:	d03f      	beq.n	80038bc <_vfiprintf_r+0x22c>
 800383c:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <_vfiprintf_r+0x254>)
 800383e:	bb1b      	cbnz	r3, 8003888 <_vfiprintf_r+0x1f8>
 8003840:	9b03      	ldr	r3, [sp, #12]
 8003842:	3307      	adds	r3, #7
 8003844:	f023 0307 	bic.w	r3, r3, #7
 8003848:	3308      	adds	r3, #8
 800384a:	9303      	str	r3, [sp, #12]
 800384c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800384e:	443b      	add	r3, r7
 8003850:	9309      	str	r3, [sp, #36]	; 0x24
 8003852:	e767      	b.n	8003724 <_vfiprintf_r+0x94>
 8003854:	fb0c 3202 	mla	r2, ip, r2, r3
 8003858:	460c      	mov	r4, r1
 800385a:	2001      	movs	r0, #1
 800385c:	e7a5      	b.n	80037aa <_vfiprintf_r+0x11a>
 800385e:	2300      	movs	r3, #0
 8003860:	3401      	adds	r4, #1
 8003862:	9305      	str	r3, [sp, #20]
 8003864:	4619      	mov	r1, r3
 8003866:	f04f 0c0a 	mov.w	ip, #10
 800386a:	4620      	mov	r0, r4
 800386c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003870:	3a30      	subs	r2, #48	; 0x30
 8003872:	2a09      	cmp	r2, #9
 8003874:	d903      	bls.n	800387e <_vfiprintf_r+0x1ee>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0c5      	beq.n	8003806 <_vfiprintf_r+0x176>
 800387a:	9105      	str	r1, [sp, #20]
 800387c:	e7c3      	b.n	8003806 <_vfiprintf_r+0x176>
 800387e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003882:	4604      	mov	r4, r0
 8003884:	2301      	movs	r3, #1
 8003886:	e7f0      	b.n	800386a <_vfiprintf_r+0x1da>
 8003888:	ab03      	add	r3, sp, #12
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	462a      	mov	r2, r5
 800388e:	4b16      	ldr	r3, [pc, #88]	; (80038e8 <_vfiprintf_r+0x258>)
 8003890:	a904      	add	r1, sp, #16
 8003892:	4630      	mov	r0, r6
 8003894:	f3af 8000 	nop.w
 8003898:	4607      	mov	r7, r0
 800389a:	1c78      	adds	r0, r7, #1
 800389c:	d1d6      	bne.n	800384c <_vfiprintf_r+0x1bc>
 800389e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038a0:	07d9      	lsls	r1, r3, #31
 80038a2:	d405      	bmi.n	80038b0 <_vfiprintf_r+0x220>
 80038a4:	89ab      	ldrh	r3, [r5, #12]
 80038a6:	059a      	lsls	r2, r3, #22
 80038a8:	d402      	bmi.n	80038b0 <_vfiprintf_r+0x220>
 80038aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038ac:	f7ff fe31 	bl	8003512 <__retarget_lock_release_recursive>
 80038b0:	89ab      	ldrh	r3, [r5, #12]
 80038b2:	065b      	lsls	r3, r3, #25
 80038b4:	f53f af12 	bmi.w	80036dc <_vfiprintf_r+0x4c>
 80038b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038ba:	e711      	b.n	80036e0 <_vfiprintf_r+0x50>
 80038bc:	ab03      	add	r3, sp, #12
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	462a      	mov	r2, r5
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <_vfiprintf_r+0x258>)
 80038c4:	a904      	add	r1, sp, #16
 80038c6:	4630      	mov	r0, r6
 80038c8:	f000 f880 	bl	80039cc <_printf_i>
 80038cc:	e7e4      	b.n	8003898 <_vfiprintf_r+0x208>
 80038ce:	bf00      	nop
 80038d0:	08004484 	.word	0x08004484
 80038d4:	080044a4 	.word	0x080044a4
 80038d8:	08004464 	.word	0x08004464
 80038dc:	080044c4 	.word	0x080044c4
 80038e0:	080044ce 	.word	0x080044ce
 80038e4:	00000000 	.word	0x00000000
 80038e8:	0800366b 	.word	0x0800366b
 80038ec:	080044ca 	.word	0x080044ca

080038f0 <_printf_common>:
 80038f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f4:	4616      	mov	r6, r2
 80038f6:	4699      	mov	r9, r3
 80038f8:	688a      	ldr	r2, [r1, #8]
 80038fa:	690b      	ldr	r3, [r1, #16]
 80038fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003900:	4293      	cmp	r3, r2
 8003902:	bfb8      	it	lt
 8003904:	4613      	movlt	r3, r2
 8003906:	6033      	str	r3, [r6, #0]
 8003908:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800390c:	4607      	mov	r7, r0
 800390e:	460c      	mov	r4, r1
 8003910:	b10a      	cbz	r2, 8003916 <_printf_common+0x26>
 8003912:	3301      	adds	r3, #1
 8003914:	6033      	str	r3, [r6, #0]
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	0699      	lsls	r1, r3, #26
 800391a:	bf42      	ittt	mi
 800391c:	6833      	ldrmi	r3, [r6, #0]
 800391e:	3302      	addmi	r3, #2
 8003920:	6033      	strmi	r3, [r6, #0]
 8003922:	6825      	ldr	r5, [r4, #0]
 8003924:	f015 0506 	ands.w	r5, r5, #6
 8003928:	d106      	bne.n	8003938 <_printf_common+0x48>
 800392a:	f104 0a19 	add.w	sl, r4, #25
 800392e:	68e3      	ldr	r3, [r4, #12]
 8003930:	6832      	ldr	r2, [r6, #0]
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	42ab      	cmp	r3, r5
 8003936:	dc26      	bgt.n	8003986 <_printf_common+0x96>
 8003938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800393c:	1e13      	subs	r3, r2, #0
 800393e:	6822      	ldr	r2, [r4, #0]
 8003940:	bf18      	it	ne
 8003942:	2301      	movne	r3, #1
 8003944:	0692      	lsls	r2, r2, #26
 8003946:	d42b      	bmi.n	80039a0 <_printf_common+0xb0>
 8003948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800394c:	4649      	mov	r1, r9
 800394e:	4638      	mov	r0, r7
 8003950:	47c0      	blx	r8
 8003952:	3001      	adds	r0, #1
 8003954:	d01e      	beq.n	8003994 <_printf_common+0xa4>
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	68e5      	ldr	r5, [r4, #12]
 800395a:	6832      	ldr	r2, [r6, #0]
 800395c:	f003 0306 	and.w	r3, r3, #6
 8003960:	2b04      	cmp	r3, #4
 8003962:	bf08      	it	eq
 8003964:	1aad      	subeq	r5, r5, r2
 8003966:	68a3      	ldr	r3, [r4, #8]
 8003968:	6922      	ldr	r2, [r4, #16]
 800396a:	bf0c      	ite	eq
 800396c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003970:	2500      	movne	r5, #0
 8003972:	4293      	cmp	r3, r2
 8003974:	bfc4      	itt	gt
 8003976:	1a9b      	subgt	r3, r3, r2
 8003978:	18ed      	addgt	r5, r5, r3
 800397a:	2600      	movs	r6, #0
 800397c:	341a      	adds	r4, #26
 800397e:	42b5      	cmp	r5, r6
 8003980:	d11a      	bne.n	80039b8 <_printf_common+0xc8>
 8003982:	2000      	movs	r0, #0
 8003984:	e008      	b.n	8003998 <_printf_common+0xa8>
 8003986:	2301      	movs	r3, #1
 8003988:	4652      	mov	r2, sl
 800398a:	4649      	mov	r1, r9
 800398c:	4638      	mov	r0, r7
 800398e:	47c0      	blx	r8
 8003990:	3001      	adds	r0, #1
 8003992:	d103      	bne.n	800399c <_printf_common+0xac>
 8003994:	f04f 30ff 	mov.w	r0, #4294967295
 8003998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800399c:	3501      	adds	r5, #1
 800399e:	e7c6      	b.n	800392e <_printf_common+0x3e>
 80039a0:	18e1      	adds	r1, r4, r3
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	2030      	movs	r0, #48	; 0x30
 80039a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039aa:	4422      	add	r2, r4
 80039ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039b4:	3302      	adds	r3, #2
 80039b6:	e7c7      	b.n	8003948 <_printf_common+0x58>
 80039b8:	2301      	movs	r3, #1
 80039ba:	4622      	mov	r2, r4
 80039bc:	4649      	mov	r1, r9
 80039be:	4638      	mov	r0, r7
 80039c0:	47c0      	blx	r8
 80039c2:	3001      	adds	r0, #1
 80039c4:	d0e6      	beq.n	8003994 <_printf_common+0xa4>
 80039c6:	3601      	adds	r6, #1
 80039c8:	e7d9      	b.n	800397e <_printf_common+0x8e>
	...

080039cc <_printf_i>:
 80039cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039d0:	7e0f      	ldrb	r7, [r1, #24]
 80039d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039d4:	2f78      	cmp	r7, #120	; 0x78
 80039d6:	4691      	mov	r9, r2
 80039d8:	4680      	mov	r8, r0
 80039da:	460c      	mov	r4, r1
 80039dc:	469a      	mov	sl, r3
 80039de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039e2:	d807      	bhi.n	80039f4 <_printf_i+0x28>
 80039e4:	2f62      	cmp	r7, #98	; 0x62
 80039e6:	d80a      	bhi.n	80039fe <_printf_i+0x32>
 80039e8:	2f00      	cmp	r7, #0
 80039ea:	f000 80d8 	beq.w	8003b9e <_printf_i+0x1d2>
 80039ee:	2f58      	cmp	r7, #88	; 0x58
 80039f0:	f000 80a3 	beq.w	8003b3a <_printf_i+0x16e>
 80039f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039fc:	e03a      	b.n	8003a74 <_printf_i+0xa8>
 80039fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a02:	2b15      	cmp	r3, #21
 8003a04:	d8f6      	bhi.n	80039f4 <_printf_i+0x28>
 8003a06:	a101      	add	r1, pc, #4	; (adr r1, 8003a0c <_printf_i+0x40>)
 8003a08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a0c:	08003a65 	.word	0x08003a65
 8003a10:	08003a79 	.word	0x08003a79
 8003a14:	080039f5 	.word	0x080039f5
 8003a18:	080039f5 	.word	0x080039f5
 8003a1c:	080039f5 	.word	0x080039f5
 8003a20:	080039f5 	.word	0x080039f5
 8003a24:	08003a79 	.word	0x08003a79
 8003a28:	080039f5 	.word	0x080039f5
 8003a2c:	080039f5 	.word	0x080039f5
 8003a30:	080039f5 	.word	0x080039f5
 8003a34:	080039f5 	.word	0x080039f5
 8003a38:	08003b85 	.word	0x08003b85
 8003a3c:	08003aa9 	.word	0x08003aa9
 8003a40:	08003b67 	.word	0x08003b67
 8003a44:	080039f5 	.word	0x080039f5
 8003a48:	080039f5 	.word	0x080039f5
 8003a4c:	08003ba7 	.word	0x08003ba7
 8003a50:	080039f5 	.word	0x080039f5
 8003a54:	08003aa9 	.word	0x08003aa9
 8003a58:	080039f5 	.word	0x080039f5
 8003a5c:	080039f5 	.word	0x080039f5
 8003a60:	08003b6f 	.word	0x08003b6f
 8003a64:	682b      	ldr	r3, [r5, #0]
 8003a66:	1d1a      	adds	r2, r3, #4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	602a      	str	r2, [r5, #0]
 8003a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0a3      	b.n	8003bc0 <_printf_i+0x1f4>
 8003a78:	6820      	ldr	r0, [r4, #0]
 8003a7a:	6829      	ldr	r1, [r5, #0]
 8003a7c:	0606      	lsls	r6, r0, #24
 8003a7e:	f101 0304 	add.w	r3, r1, #4
 8003a82:	d50a      	bpl.n	8003a9a <_printf_i+0xce>
 8003a84:	680e      	ldr	r6, [r1, #0]
 8003a86:	602b      	str	r3, [r5, #0]
 8003a88:	2e00      	cmp	r6, #0
 8003a8a:	da03      	bge.n	8003a94 <_printf_i+0xc8>
 8003a8c:	232d      	movs	r3, #45	; 0x2d
 8003a8e:	4276      	negs	r6, r6
 8003a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a94:	485e      	ldr	r0, [pc, #376]	; (8003c10 <_printf_i+0x244>)
 8003a96:	230a      	movs	r3, #10
 8003a98:	e019      	b.n	8003ace <_printf_i+0x102>
 8003a9a:	680e      	ldr	r6, [r1, #0]
 8003a9c:	602b      	str	r3, [r5, #0]
 8003a9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003aa2:	bf18      	it	ne
 8003aa4:	b236      	sxthne	r6, r6
 8003aa6:	e7ef      	b.n	8003a88 <_printf_i+0xbc>
 8003aa8:	682b      	ldr	r3, [r5, #0]
 8003aaa:	6820      	ldr	r0, [r4, #0]
 8003aac:	1d19      	adds	r1, r3, #4
 8003aae:	6029      	str	r1, [r5, #0]
 8003ab0:	0601      	lsls	r1, r0, #24
 8003ab2:	d501      	bpl.n	8003ab8 <_printf_i+0xec>
 8003ab4:	681e      	ldr	r6, [r3, #0]
 8003ab6:	e002      	b.n	8003abe <_printf_i+0xf2>
 8003ab8:	0646      	lsls	r6, r0, #25
 8003aba:	d5fb      	bpl.n	8003ab4 <_printf_i+0xe8>
 8003abc:	881e      	ldrh	r6, [r3, #0]
 8003abe:	4854      	ldr	r0, [pc, #336]	; (8003c10 <_printf_i+0x244>)
 8003ac0:	2f6f      	cmp	r7, #111	; 0x6f
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2308      	moveq	r3, #8
 8003ac6:	230a      	movne	r3, #10
 8003ac8:	2100      	movs	r1, #0
 8003aca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ace:	6865      	ldr	r5, [r4, #4]
 8003ad0:	60a5      	str	r5, [r4, #8]
 8003ad2:	2d00      	cmp	r5, #0
 8003ad4:	bfa2      	ittt	ge
 8003ad6:	6821      	ldrge	r1, [r4, #0]
 8003ad8:	f021 0104 	bicge.w	r1, r1, #4
 8003adc:	6021      	strge	r1, [r4, #0]
 8003ade:	b90e      	cbnz	r6, 8003ae4 <_printf_i+0x118>
 8003ae0:	2d00      	cmp	r5, #0
 8003ae2:	d04d      	beq.n	8003b80 <_printf_i+0x1b4>
 8003ae4:	4615      	mov	r5, r2
 8003ae6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003aea:	fb03 6711 	mls	r7, r3, r1, r6
 8003aee:	5dc7      	ldrb	r7, [r0, r7]
 8003af0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003af4:	4637      	mov	r7, r6
 8003af6:	42bb      	cmp	r3, r7
 8003af8:	460e      	mov	r6, r1
 8003afa:	d9f4      	bls.n	8003ae6 <_printf_i+0x11a>
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d10b      	bne.n	8003b18 <_printf_i+0x14c>
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	07de      	lsls	r6, r3, #31
 8003b04:	d508      	bpl.n	8003b18 <_printf_i+0x14c>
 8003b06:	6923      	ldr	r3, [r4, #16]
 8003b08:	6861      	ldr	r1, [r4, #4]
 8003b0a:	4299      	cmp	r1, r3
 8003b0c:	bfde      	ittt	le
 8003b0e:	2330      	movle	r3, #48	; 0x30
 8003b10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b18:	1b52      	subs	r2, r2, r5
 8003b1a:	6122      	str	r2, [r4, #16]
 8003b1c:	f8cd a000 	str.w	sl, [sp]
 8003b20:	464b      	mov	r3, r9
 8003b22:	aa03      	add	r2, sp, #12
 8003b24:	4621      	mov	r1, r4
 8003b26:	4640      	mov	r0, r8
 8003b28:	f7ff fee2 	bl	80038f0 <_printf_common>
 8003b2c:	3001      	adds	r0, #1
 8003b2e:	d14c      	bne.n	8003bca <_printf_i+0x1fe>
 8003b30:	f04f 30ff 	mov.w	r0, #4294967295
 8003b34:	b004      	add	sp, #16
 8003b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b3a:	4835      	ldr	r0, [pc, #212]	; (8003c10 <_printf_i+0x244>)
 8003b3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b40:	6829      	ldr	r1, [r5, #0]
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b48:	6029      	str	r1, [r5, #0]
 8003b4a:	061d      	lsls	r5, r3, #24
 8003b4c:	d514      	bpl.n	8003b78 <_printf_i+0x1ac>
 8003b4e:	07df      	lsls	r7, r3, #31
 8003b50:	bf44      	itt	mi
 8003b52:	f043 0320 	orrmi.w	r3, r3, #32
 8003b56:	6023      	strmi	r3, [r4, #0]
 8003b58:	b91e      	cbnz	r6, 8003b62 <_printf_i+0x196>
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	f023 0320 	bic.w	r3, r3, #32
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	2310      	movs	r3, #16
 8003b64:	e7b0      	b.n	8003ac8 <_printf_i+0xfc>
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	f043 0320 	orr.w	r3, r3, #32
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	2378      	movs	r3, #120	; 0x78
 8003b70:	4828      	ldr	r0, [pc, #160]	; (8003c14 <_printf_i+0x248>)
 8003b72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b76:	e7e3      	b.n	8003b40 <_printf_i+0x174>
 8003b78:	0659      	lsls	r1, r3, #25
 8003b7a:	bf48      	it	mi
 8003b7c:	b2b6      	uxthmi	r6, r6
 8003b7e:	e7e6      	b.n	8003b4e <_printf_i+0x182>
 8003b80:	4615      	mov	r5, r2
 8003b82:	e7bb      	b.n	8003afc <_printf_i+0x130>
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	6826      	ldr	r6, [r4, #0]
 8003b88:	6961      	ldr	r1, [r4, #20]
 8003b8a:	1d18      	adds	r0, r3, #4
 8003b8c:	6028      	str	r0, [r5, #0]
 8003b8e:	0635      	lsls	r5, r6, #24
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	d501      	bpl.n	8003b98 <_printf_i+0x1cc>
 8003b94:	6019      	str	r1, [r3, #0]
 8003b96:	e002      	b.n	8003b9e <_printf_i+0x1d2>
 8003b98:	0670      	lsls	r0, r6, #25
 8003b9a:	d5fb      	bpl.n	8003b94 <_printf_i+0x1c8>
 8003b9c:	8019      	strh	r1, [r3, #0]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	6123      	str	r3, [r4, #16]
 8003ba2:	4615      	mov	r5, r2
 8003ba4:	e7ba      	b.n	8003b1c <_printf_i+0x150>
 8003ba6:	682b      	ldr	r3, [r5, #0]
 8003ba8:	1d1a      	adds	r2, r3, #4
 8003baa:	602a      	str	r2, [r5, #0]
 8003bac:	681d      	ldr	r5, [r3, #0]
 8003bae:	6862      	ldr	r2, [r4, #4]
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	f7fc fb2c 	bl	8000210 <memchr>
 8003bb8:	b108      	cbz	r0, 8003bbe <_printf_i+0x1f2>
 8003bba:	1b40      	subs	r0, r0, r5
 8003bbc:	6060      	str	r0, [r4, #4]
 8003bbe:	6863      	ldr	r3, [r4, #4]
 8003bc0:	6123      	str	r3, [r4, #16]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bc8:	e7a8      	b.n	8003b1c <_printf_i+0x150>
 8003bca:	6923      	ldr	r3, [r4, #16]
 8003bcc:	462a      	mov	r2, r5
 8003bce:	4649      	mov	r1, r9
 8003bd0:	4640      	mov	r0, r8
 8003bd2:	47d0      	blx	sl
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	d0ab      	beq.n	8003b30 <_printf_i+0x164>
 8003bd8:	6823      	ldr	r3, [r4, #0]
 8003bda:	079b      	lsls	r3, r3, #30
 8003bdc:	d413      	bmi.n	8003c06 <_printf_i+0x23a>
 8003bde:	68e0      	ldr	r0, [r4, #12]
 8003be0:	9b03      	ldr	r3, [sp, #12]
 8003be2:	4298      	cmp	r0, r3
 8003be4:	bfb8      	it	lt
 8003be6:	4618      	movlt	r0, r3
 8003be8:	e7a4      	b.n	8003b34 <_printf_i+0x168>
 8003bea:	2301      	movs	r3, #1
 8003bec:	4632      	mov	r2, r6
 8003bee:	4649      	mov	r1, r9
 8003bf0:	4640      	mov	r0, r8
 8003bf2:	47d0      	blx	sl
 8003bf4:	3001      	adds	r0, #1
 8003bf6:	d09b      	beq.n	8003b30 <_printf_i+0x164>
 8003bf8:	3501      	adds	r5, #1
 8003bfa:	68e3      	ldr	r3, [r4, #12]
 8003bfc:	9903      	ldr	r1, [sp, #12]
 8003bfe:	1a5b      	subs	r3, r3, r1
 8003c00:	42ab      	cmp	r3, r5
 8003c02:	dcf2      	bgt.n	8003bea <_printf_i+0x21e>
 8003c04:	e7eb      	b.n	8003bde <_printf_i+0x212>
 8003c06:	2500      	movs	r5, #0
 8003c08:	f104 0619 	add.w	r6, r4, #25
 8003c0c:	e7f5      	b.n	8003bfa <_printf_i+0x22e>
 8003c0e:	bf00      	nop
 8003c10:	080044d5 	.word	0x080044d5
 8003c14:	080044e6 	.word	0x080044e6

08003c18 <_sbrk_r>:
 8003c18:	b538      	push	{r3, r4, r5, lr}
 8003c1a:	4d06      	ldr	r5, [pc, #24]	; (8003c34 <_sbrk_r+0x1c>)
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	4604      	mov	r4, r0
 8003c20:	4608      	mov	r0, r1
 8003c22:	602b      	str	r3, [r5, #0]
 8003c24:	f7fc fe60 	bl	80008e8 <_sbrk>
 8003c28:	1c43      	adds	r3, r0, #1
 8003c2a:	d102      	bne.n	8003c32 <_sbrk_r+0x1a>
 8003c2c:	682b      	ldr	r3, [r5, #0]
 8003c2e:	b103      	cbz	r3, 8003c32 <_sbrk_r+0x1a>
 8003c30:	6023      	str	r3, [r4, #0]
 8003c32:	bd38      	pop	{r3, r4, r5, pc}
 8003c34:	200001a8 	.word	0x200001a8

08003c38 <__sread>:
 8003c38:	b510      	push	{r4, lr}
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c40:	f000 fab2 	bl	80041a8 <_read_r>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	bfab      	itete	ge
 8003c48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8003c4c:	181b      	addge	r3, r3, r0
 8003c4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c52:	bfac      	ite	ge
 8003c54:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c56:	81a3      	strhlt	r3, [r4, #12]
 8003c58:	bd10      	pop	{r4, pc}

08003c5a <__swrite>:
 8003c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c5e:	461f      	mov	r7, r3
 8003c60:	898b      	ldrh	r3, [r1, #12]
 8003c62:	05db      	lsls	r3, r3, #23
 8003c64:	4605      	mov	r5, r0
 8003c66:	460c      	mov	r4, r1
 8003c68:	4616      	mov	r6, r2
 8003c6a:	d505      	bpl.n	8003c78 <__swrite+0x1e>
 8003c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c70:	2302      	movs	r3, #2
 8003c72:	2200      	movs	r2, #0
 8003c74:	f000 f9c8 	bl	8004008 <_lseek_r>
 8003c78:	89a3      	ldrh	r3, [r4, #12]
 8003c7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c82:	81a3      	strh	r3, [r4, #12]
 8003c84:	4632      	mov	r2, r6
 8003c86:	463b      	mov	r3, r7
 8003c88:	4628      	mov	r0, r5
 8003c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c8e:	f000 b869 	b.w	8003d64 <_write_r>

08003c92 <__sseek>:
 8003c92:	b510      	push	{r4, lr}
 8003c94:	460c      	mov	r4, r1
 8003c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c9a:	f000 f9b5 	bl	8004008 <_lseek_r>
 8003c9e:	1c43      	adds	r3, r0, #1
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	bf15      	itete	ne
 8003ca4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003caa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cae:	81a3      	strheq	r3, [r4, #12]
 8003cb0:	bf18      	it	ne
 8003cb2:	81a3      	strhne	r3, [r4, #12]
 8003cb4:	bd10      	pop	{r4, pc}

08003cb6 <__sclose>:
 8003cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cba:	f000 b8d3 	b.w	8003e64 <_close_r>
	...

08003cc0 <__swbuf_r>:
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	460e      	mov	r6, r1
 8003cc4:	4614      	mov	r4, r2
 8003cc6:	4605      	mov	r5, r0
 8003cc8:	b118      	cbz	r0, 8003cd2 <__swbuf_r+0x12>
 8003cca:	6983      	ldr	r3, [r0, #24]
 8003ccc:	b90b      	cbnz	r3, 8003cd2 <__swbuf_r+0x12>
 8003cce:	f7ff fb81 	bl	80033d4 <__sinit>
 8003cd2:	4b21      	ldr	r3, [pc, #132]	; (8003d58 <__swbuf_r+0x98>)
 8003cd4:	429c      	cmp	r4, r3
 8003cd6:	d12b      	bne.n	8003d30 <__swbuf_r+0x70>
 8003cd8:	686c      	ldr	r4, [r5, #4]
 8003cda:	69a3      	ldr	r3, [r4, #24]
 8003cdc:	60a3      	str	r3, [r4, #8]
 8003cde:	89a3      	ldrh	r3, [r4, #12]
 8003ce0:	071a      	lsls	r2, r3, #28
 8003ce2:	d52f      	bpl.n	8003d44 <__swbuf_r+0x84>
 8003ce4:	6923      	ldr	r3, [r4, #16]
 8003ce6:	b36b      	cbz	r3, 8003d44 <__swbuf_r+0x84>
 8003ce8:	6923      	ldr	r3, [r4, #16]
 8003cea:	6820      	ldr	r0, [r4, #0]
 8003cec:	1ac0      	subs	r0, r0, r3
 8003cee:	6963      	ldr	r3, [r4, #20]
 8003cf0:	b2f6      	uxtb	r6, r6
 8003cf2:	4283      	cmp	r3, r0
 8003cf4:	4637      	mov	r7, r6
 8003cf6:	dc04      	bgt.n	8003d02 <__swbuf_r+0x42>
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f000 f948 	bl	8003f90 <_fflush_r>
 8003d00:	bb30      	cbnz	r0, 8003d50 <__swbuf_r+0x90>
 8003d02:	68a3      	ldr	r3, [r4, #8]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	60a3      	str	r3, [r4, #8]
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	6022      	str	r2, [r4, #0]
 8003d0e:	701e      	strb	r6, [r3, #0]
 8003d10:	6963      	ldr	r3, [r4, #20]
 8003d12:	3001      	adds	r0, #1
 8003d14:	4283      	cmp	r3, r0
 8003d16:	d004      	beq.n	8003d22 <__swbuf_r+0x62>
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	07db      	lsls	r3, r3, #31
 8003d1c:	d506      	bpl.n	8003d2c <__swbuf_r+0x6c>
 8003d1e:	2e0a      	cmp	r6, #10
 8003d20:	d104      	bne.n	8003d2c <__swbuf_r+0x6c>
 8003d22:	4621      	mov	r1, r4
 8003d24:	4628      	mov	r0, r5
 8003d26:	f000 f933 	bl	8003f90 <_fflush_r>
 8003d2a:	b988      	cbnz	r0, 8003d50 <__swbuf_r+0x90>
 8003d2c:	4638      	mov	r0, r7
 8003d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d30:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <__swbuf_r+0x9c>)
 8003d32:	429c      	cmp	r4, r3
 8003d34:	d101      	bne.n	8003d3a <__swbuf_r+0x7a>
 8003d36:	68ac      	ldr	r4, [r5, #8]
 8003d38:	e7cf      	b.n	8003cda <__swbuf_r+0x1a>
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <__swbuf_r+0xa0>)
 8003d3c:	429c      	cmp	r4, r3
 8003d3e:	bf08      	it	eq
 8003d40:	68ec      	ldreq	r4, [r5, #12]
 8003d42:	e7ca      	b.n	8003cda <__swbuf_r+0x1a>
 8003d44:	4621      	mov	r1, r4
 8003d46:	4628      	mov	r0, r5
 8003d48:	f000 f81e 	bl	8003d88 <__swsetup_r>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d0cb      	beq.n	8003ce8 <__swbuf_r+0x28>
 8003d50:	f04f 37ff 	mov.w	r7, #4294967295
 8003d54:	e7ea      	b.n	8003d2c <__swbuf_r+0x6c>
 8003d56:	bf00      	nop
 8003d58:	08004484 	.word	0x08004484
 8003d5c:	080044a4 	.word	0x080044a4
 8003d60:	08004464 	.word	0x08004464

08003d64 <_write_r>:
 8003d64:	b538      	push	{r3, r4, r5, lr}
 8003d66:	4d07      	ldr	r5, [pc, #28]	; (8003d84 <_write_r+0x20>)
 8003d68:	4604      	mov	r4, r0
 8003d6a:	4608      	mov	r0, r1
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	2200      	movs	r2, #0
 8003d70:	602a      	str	r2, [r5, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	f7fc fd67 	bl	8000846 <_write>
 8003d78:	1c43      	adds	r3, r0, #1
 8003d7a:	d102      	bne.n	8003d82 <_write_r+0x1e>
 8003d7c:	682b      	ldr	r3, [r5, #0]
 8003d7e:	b103      	cbz	r3, 8003d82 <_write_r+0x1e>
 8003d80:	6023      	str	r3, [r4, #0]
 8003d82:	bd38      	pop	{r3, r4, r5, pc}
 8003d84:	200001a8 	.word	0x200001a8

08003d88 <__swsetup_r>:
 8003d88:	4b32      	ldr	r3, [pc, #200]	; (8003e54 <__swsetup_r+0xcc>)
 8003d8a:	b570      	push	{r4, r5, r6, lr}
 8003d8c:	681d      	ldr	r5, [r3, #0]
 8003d8e:	4606      	mov	r6, r0
 8003d90:	460c      	mov	r4, r1
 8003d92:	b125      	cbz	r5, 8003d9e <__swsetup_r+0x16>
 8003d94:	69ab      	ldr	r3, [r5, #24]
 8003d96:	b913      	cbnz	r3, 8003d9e <__swsetup_r+0x16>
 8003d98:	4628      	mov	r0, r5
 8003d9a:	f7ff fb1b 	bl	80033d4 <__sinit>
 8003d9e:	4b2e      	ldr	r3, [pc, #184]	; (8003e58 <__swsetup_r+0xd0>)
 8003da0:	429c      	cmp	r4, r3
 8003da2:	d10f      	bne.n	8003dc4 <__swsetup_r+0x3c>
 8003da4:	686c      	ldr	r4, [r5, #4]
 8003da6:	89a3      	ldrh	r3, [r4, #12]
 8003da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dac:	0719      	lsls	r1, r3, #28
 8003dae:	d42c      	bmi.n	8003e0a <__swsetup_r+0x82>
 8003db0:	06dd      	lsls	r5, r3, #27
 8003db2:	d411      	bmi.n	8003dd8 <__swsetup_r+0x50>
 8003db4:	2309      	movs	r3, #9
 8003db6:	6033      	str	r3, [r6, #0]
 8003db8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003dbc:	81a3      	strh	r3, [r4, #12]
 8003dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc2:	e03e      	b.n	8003e42 <__swsetup_r+0xba>
 8003dc4:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <__swsetup_r+0xd4>)
 8003dc6:	429c      	cmp	r4, r3
 8003dc8:	d101      	bne.n	8003dce <__swsetup_r+0x46>
 8003dca:	68ac      	ldr	r4, [r5, #8]
 8003dcc:	e7eb      	b.n	8003da6 <__swsetup_r+0x1e>
 8003dce:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <__swsetup_r+0xd8>)
 8003dd0:	429c      	cmp	r4, r3
 8003dd2:	bf08      	it	eq
 8003dd4:	68ec      	ldreq	r4, [r5, #12]
 8003dd6:	e7e6      	b.n	8003da6 <__swsetup_r+0x1e>
 8003dd8:	0758      	lsls	r0, r3, #29
 8003dda:	d512      	bpl.n	8003e02 <__swsetup_r+0x7a>
 8003ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dde:	b141      	cbz	r1, 8003df2 <__swsetup_r+0x6a>
 8003de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003de4:	4299      	cmp	r1, r3
 8003de6:	d002      	beq.n	8003dee <__swsetup_r+0x66>
 8003de8:	4630      	mov	r0, r6
 8003dea:	f000 f991 	bl	8004110 <_free_r>
 8003dee:	2300      	movs	r3, #0
 8003df0:	6363      	str	r3, [r4, #52]	; 0x34
 8003df2:	89a3      	ldrh	r3, [r4, #12]
 8003df4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003df8:	81a3      	strh	r3, [r4, #12]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	6063      	str	r3, [r4, #4]
 8003dfe:	6923      	ldr	r3, [r4, #16]
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	89a3      	ldrh	r3, [r4, #12]
 8003e04:	f043 0308 	orr.w	r3, r3, #8
 8003e08:	81a3      	strh	r3, [r4, #12]
 8003e0a:	6923      	ldr	r3, [r4, #16]
 8003e0c:	b94b      	cbnz	r3, 8003e22 <__swsetup_r+0x9a>
 8003e0e:	89a3      	ldrh	r3, [r4, #12]
 8003e10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e18:	d003      	beq.n	8003e22 <__swsetup_r+0x9a>
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	f000 f92b 	bl	8004078 <__smakebuf_r>
 8003e22:	89a0      	ldrh	r0, [r4, #12]
 8003e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e28:	f010 0301 	ands.w	r3, r0, #1
 8003e2c:	d00a      	beq.n	8003e44 <__swsetup_r+0xbc>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60a3      	str	r3, [r4, #8]
 8003e32:	6963      	ldr	r3, [r4, #20]
 8003e34:	425b      	negs	r3, r3
 8003e36:	61a3      	str	r3, [r4, #24]
 8003e38:	6923      	ldr	r3, [r4, #16]
 8003e3a:	b943      	cbnz	r3, 8003e4e <__swsetup_r+0xc6>
 8003e3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e40:	d1ba      	bne.n	8003db8 <__swsetup_r+0x30>
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
 8003e44:	0781      	lsls	r1, r0, #30
 8003e46:	bf58      	it	pl
 8003e48:	6963      	ldrpl	r3, [r4, #20]
 8003e4a:	60a3      	str	r3, [r4, #8]
 8003e4c:	e7f4      	b.n	8003e38 <__swsetup_r+0xb0>
 8003e4e:	2000      	movs	r0, #0
 8003e50:	e7f7      	b.n	8003e42 <__swsetup_r+0xba>
 8003e52:	bf00      	nop
 8003e54:	2000000c 	.word	0x2000000c
 8003e58:	08004484 	.word	0x08004484
 8003e5c:	080044a4 	.word	0x080044a4
 8003e60:	08004464 	.word	0x08004464

08003e64 <_close_r>:
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	4d06      	ldr	r5, [pc, #24]	; (8003e80 <_close_r+0x1c>)
 8003e68:	2300      	movs	r3, #0
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	602b      	str	r3, [r5, #0]
 8003e70:	f7fc fd05 	bl	800087e <_close>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d102      	bne.n	8003e7e <_close_r+0x1a>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	b103      	cbz	r3, 8003e7e <_close_r+0x1a>
 8003e7c:	6023      	str	r3, [r4, #0]
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	200001a8 	.word	0x200001a8

08003e84 <__sflush_r>:
 8003e84:	898a      	ldrh	r2, [r1, #12]
 8003e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8a:	4605      	mov	r5, r0
 8003e8c:	0710      	lsls	r0, r2, #28
 8003e8e:	460c      	mov	r4, r1
 8003e90:	d458      	bmi.n	8003f44 <__sflush_r+0xc0>
 8003e92:	684b      	ldr	r3, [r1, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	dc05      	bgt.n	8003ea4 <__sflush_r+0x20>
 8003e98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	dc02      	bgt.n	8003ea4 <__sflush_r+0x20>
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ea6:	2e00      	cmp	r6, #0
 8003ea8:	d0f9      	beq.n	8003e9e <__sflush_r+0x1a>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003eb0:	682f      	ldr	r7, [r5, #0]
 8003eb2:	602b      	str	r3, [r5, #0]
 8003eb4:	d032      	beq.n	8003f1c <__sflush_r+0x98>
 8003eb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	075a      	lsls	r2, r3, #29
 8003ebc:	d505      	bpl.n	8003eca <__sflush_r+0x46>
 8003ebe:	6863      	ldr	r3, [r4, #4]
 8003ec0:	1ac0      	subs	r0, r0, r3
 8003ec2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ec4:	b10b      	cbz	r3, 8003eca <__sflush_r+0x46>
 8003ec6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ec8:	1ac0      	subs	r0, r0, r3
 8003eca:	2300      	movs	r3, #0
 8003ecc:	4602      	mov	r2, r0
 8003ece:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ed0:	6a21      	ldr	r1, [r4, #32]
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	47b0      	blx	r6
 8003ed6:	1c43      	adds	r3, r0, #1
 8003ed8:	89a3      	ldrh	r3, [r4, #12]
 8003eda:	d106      	bne.n	8003eea <__sflush_r+0x66>
 8003edc:	6829      	ldr	r1, [r5, #0]
 8003ede:	291d      	cmp	r1, #29
 8003ee0:	d82c      	bhi.n	8003f3c <__sflush_r+0xb8>
 8003ee2:	4a2a      	ldr	r2, [pc, #168]	; (8003f8c <__sflush_r+0x108>)
 8003ee4:	40ca      	lsrs	r2, r1
 8003ee6:	07d6      	lsls	r6, r2, #31
 8003ee8:	d528      	bpl.n	8003f3c <__sflush_r+0xb8>
 8003eea:	2200      	movs	r2, #0
 8003eec:	6062      	str	r2, [r4, #4]
 8003eee:	04d9      	lsls	r1, r3, #19
 8003ef0:	6922      	ldr	r2, [r4, #16]
 8003ef2:	6022      	str	r2, [r4, #0]
 8003ef4:	d504      	bpl.n	8003f00 <__sflush_r+0x7c>
 8003ef6:	1c42      	adds	r2, r0, #1
 8003ef8:	d101      	bne.n	8003efe <__sflush_r+0x7a>
 8003efa:	682b      	ldr	r3, [r5, #0]
 8003efc:	b903      	cbnz	r3, 8003f00 <__sflush_r+0x7c>
 8003efe:	6560      	str	r0, [r4, #84]	; 0x54
 8003f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f02:	602f      	str	r7, [r5, #0]
 8003f04:	2900      	cmp	r1, #0
 8003f06:	d0ca      	beq.n	8003e9e <__sflush_r+0x1a>
 8003f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f0c:	4299      	cmp	r1, r3
 8003f0e:	d002      	beq.n	8003f16 <__sflush_r+0x92>
 8003f10:	4628      	mov	r0, r5
 8003f12:	f000 f8fd 	bl	8004110 <_free_r>
 8003f16:	2000      	movs	r0, #0
 8003f18:	6360      	str	r0, [r4, #52]	; 0x34
 8003f1a:	e7c1      	b.n	8003ea0 <__sflush_r+0x1c>
 8003f1c:	6a21      	ldr	r1, [r4, #32]
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4628      	mov	r0, r5
 8003f22:	47b0      	blx	r6
 8003f24:	1c41      	adds	r1, r0, #1
 8003f26:	d1c7      	bne.n	8003eb8 <__sflush_r+0x34>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0c4      	beq.n	8003eb8 <__sflush_r+0x34>
 8003f2e:	2b1d      	cmp	r3, #29
 8003f30:	d001      	beq.n	8003f36 <__sflush_r+0xb2>
 8003f32:	2b16      	cmp	r3, #22
 8003f34:	d101      	bne.n	8003f3a <__sflush_r+0xb6>
 8003f36:	602f      	str	r7, [r5, #0]
 8003f38:	e7b1      	b.n	8003e9e <__sflush_r+0x1a>
 8003f3a:	89a3      	ldrh	r3, [r4, #12]
 8003f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f40:	81a3      	strh	r3, [r4, #12]
 8003f42:	e7ad      	b.n	8003ea0 <__sflush_r+0x1c>
 8003f44:	690f      	ldr	r7, [r1, #16]
 8003f46:	2f00      	cmp	r7, #0
 8003f48:	d0a9      	beq.n	8003e9e <__sflush_r+0x1a>
 8003f4a:	0793      	lsls	r3, r2, #30
 8003f4c:	680e      	ldr	r6, [r1, #0]
 8003f4e:	bf08      	it	eq
 8003f50:	694b      	ldreq	r3, [r1, #20]
 8003f52:	600f      	str	r7, [r1, #0]
 8003f54:	bf18      	it	ne
 8003f56:	2300      	movne	r3, #0
 8003f58:	eba6 0807 	sub.w	r8, r6, r7
 8003f5c:	608b      	str	r3, [r1, #8]
 8003f5e:	f1b8 0f00 	cmp.w	r8, #0
 8003f62:	dd9c      	ble.n	8003e9e <__sflush_r+0x1a>
 8003f64:	6a21      	ldr	r1, [r4, #32]
 8003f66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f68:	4643      	mov	r3, r8
 8003f6a:	463a      	mov	r2, r7
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	47b0      	blx	r6
 8003f70:	2800      	cmp	r0, #0
 8003f72:	dc06      	bgt.n	8003f82 <__sflush_r+0xfe>
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f7a:	81a3      	strh	r3, [r4, #12]
 8003f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f80:	e78e      	b.n	8003ea0 <__sflush_r+0x1c>
 8003f82:	4407      	add	r7, r0
 8003f84:	eba8 0800 	sub.w	r8, r8, r0
 8003f88:	e7e9      	b.n	8003f5e <__sflush_r+0xda>
 8003f8a:	bf00      	nop
 8003f8c:	20400001 	.word	0x20400001

08003f90 <_fflush_r>:
 8003f90:	b538      	push	{r3, r4, r5, lr}
 8003f92:	690b      	ldr	r3, [r1, #16]
 8003f94:	4605      	mov	r5, r0
 8003f96:	460c      	mov	r4, r1
 8003f98:	b913      	cbnz	r3, 8003fa0 <_fflush_r+0x10>
 8003f9a:	2500      	movs	r5, #0
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	b118      	cbz	r0, 8003faa <_fflush_r+0x1a>
 8003fa2:	6983      	ldr	r3, [r0, #24]
 8003fa4:	b90b      	cbnz	r3, 8003faa <_fflush_r+0x1a>
 8003fa6:	f7ff fa15 	bl	80033d4 <__sinit>
 8003faa:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <_fflush_r+0x6c>)
 8003fac:	429c      	cmp	r4, r3
 8003fae:	d11b      	bne.n	8003fe8 <_fflush_r+0x58>
 8003fb0:	686c      	ldr	r4, [r5, #4]
 8003fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0ef      	beq.n	8003f9a <_fflush_r+0xa>
 8003fba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fbc:	07d0      	lsls	r0, r2, #31
 8003fbe:	d404      	bmi.n	8003fca <_fflush_r+0x3a>
 8003fc0:	0599      	lsls	r1, r3, #22
 8003fc2:	d402      	bmi.n	8003fca <_fflush_r+0x3a>
 8003fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fc6:	f7ff faa3 	bl	8003510 <__retarget_lock_acquire_recursive>
 8003fca:	4628      	mov	r0, r5
 8003fcc:	4621      	mov	r1, r4
 8003fce:	f7ff ff59 	bl	8003e84 <__sflush_r>
 8003fd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fd4:	07da      	lsls	r2, r3, #31
 8003fd6:	4605      	mov	r5, r0
 8003fd8:	d4e0      	bmi.n	8003f9c <_fflush_r+0xc>
 8003fda:	89a3      	ldrh	r3, [r4, #12]
 8003fdc:	059b      	lsls	r3, r3, #22
 8003fde:	d4dd      	bmi.n	8003f9c <_fflush_r+0xc>
 8003fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fe2:	f7ff fa96 	bl	8003512 <__retarget_lock_release_recursive>
 8003fe6:	e7d9      	b.n	8003f9c <_fflush_r+0xc>
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <_fflush_r+0x70>)
 8003fea:	429c      	cmp	r4, r3
 8003fec:	d101      	bne.n	8003ff2 <_fflush_r+0x62>
 8003fee:	68ac      	ldr	r4, [r5, #8]
 8003ff0:	e7df      	b.n	8003fb2 <_fflush_r+0x22>
 8003ff2:	4b04      	ldr	r3, [pc, #16]	; (8004004 <_fflush_r+0x74>)
 8003ff4:	429c      	cmp	r4, r3
 8003ff6:	bf08      	it	eq
 8003ff8:	68ec      	ldreq	r4, [r5, #12]
 8003ffa:	e7da      	b.n	8003fb2 <_fflush_r+0x22>
 8003ffc:	08004484 	.word	0x08004484
 8004000:	080044a4 	.word	0x080044a4
 8004004:	08004464 	.word	0x08004464

08004008 <_lseek_r>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	4d07      	ldr	r5, [pc, #28]	; (8004028 <_lseek_r+0x20>)
 800400c:	4604      	mov	r4, r0
 800400e:	4608      	mov	r0, r1
 8004010:	4611      	mov	r1, r2
 8004012:	2200      	movs	r2, #0
 8004014:	602a      	str	r2, [r5, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	f7fc fc58 	bl	80008cc <_lseek>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d102      	bne.n	8004026 <_lseek_r+0x1e>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	b103      	cbz	r3, 8004026 <_lseek_r+0x1e>
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	200001a8 	.word	0x200001a8

0800402c <__swhatbuf_r>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	460e      	mov	r6, r1
 8004030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004034:	2900      	cmp	r1, #0
 8004036:	b096      	sub	sp, #88	; 0x58
 8004038:	4614      	mov	r4, r2
 800403a:	461d      	mov	r5, r3
 800403c:	da08      	bge.n	8004050 <__swhatbuf_r+0x24>
 800403e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	602a      	str	r2, [r5, #0]
 8004046:	061a      	lsls	r2, r3, #24
 8004048:	d410      	bmi.n	800406c <__swhatbuf_r+0x40>
 800404a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800404e:	e00e      	b.n	800406e <__swhatbuf_r+0x42>
 8004050:	466a      	mov	r2, sp
 8004052:	f000 f8bb 	bl	80041cc <_fstat_r>
 8004056:	2800      	cmp	r0, #0
 8004058:	dbf1      	blt.n	800403e <__swhatbuf_r+0x12>
 800405a:	9a01      	ldr	r2, [sp, #4]
 800405c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004060:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004064:	425a      	negs	r2, r3
 8004066:	415a      	adcs	r2, r3
 8004068:	602a      	str	r2, [r5, #0]
 800406a:	e7ee      	b.n	800404a <__swhatbuf_r+0x1e>
 800406c:	2340      	movs	r3, #64	; 0x40
 800406e:	2000      	movs	r0, #0
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	b016      	add	sp, #88	; 0x58
 8004074:	bd70      	pop	{r4, r5, r6, pc}
	...

08004078 <__smakebuf_r>:
 8004078:	898b      	ldrh	r3, [r1, #12]
 800407a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800407c:	079d      	lsls	r5, r3, #30
 800407e:	4606      	mov	r6, r0
 8004080:	460c      	mov	r4, r1
 8004082:	d507      	bpl.n	8004094 <__smakebuf_r+0x1c>
 8004084:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	6123      	str	r3, [r4, #16]
 800408c:	2301      	movs	r3, #1
 800408e:	6163      	str	r3, [r4, #20]
 8004090:	b002      	add	sp, #8
 8004092:	bd70      	pop	{r4, r5, r6, pc}
 8004094:	ab01      	add	r3, sp, #4
 8004096:	466a      	mov	r2, sp
 8004098:	f7ff ffc8 	bl	800402c <__swhatbuf_r>
 800409c:	9900      	ldr	r1, [sp, #0]
 800409e:	4605      	mov	r5, r0
 80040a0:	4630      	mov	r0, r6
 80040a2:	f7ff fa57 	bl	8003554 <_malloc_r>
 80040a6:	b948      	cbnz	r0, 80040bc <__smakebuf_r+0x44>
 80040a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040ac:	059a      	lsls	r2, r3, #22
 80040ae:	d4ef      	bmi.n	8004090 <__smakebuf_r+0x18>
 80040b0:	f023 0303 	bic.w	r3, r3, #3
 80040b4:	f043 0302 	orr.w	r3, r3, #2
 80040b8:	81a3      	strh	r3, [r4, #12]
 80040ba:	e7e3      	b.n	8004084 <__smakebuf_r+0xc>
 80040bc:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <__smakebuf_r+0x7c>)
 80040be:	62b3      	str	r3, [r6, #40]	; 0x28
 80040c0:	89a3      	ldrh	r3, [r4, #12]
 80040c2:	6020      	str	r0, [r4, #0]
 80040c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c8:	81a3      	strh	r3, [r4, #12]
 80040ca:	9b00      	ldr	r3, [sp, #0]
 80040cc:	6163      	str	r3, [r4, #20]
 80040ce:	9b01      	ldr	r3, [sp, #4]
 80040d0:	6120      	str	r0, [r4, #16]
 80040d2:	b15b      	cbz	r3, 80040ec <__smakebuf_r+0x74>
 80040d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040d8:	4630      	mov	r0, r6
 80040da:	f000 f889 	bl	80041f0 <_isatty_r>
 80040de:	b128      	cbz	r0, 80040ec <__smakebuf_r+0x74>
 80040e0:	89a3      	ldrh	r3, [r4, #12]
 80040e2:	f023 0303 	bic.w	r3, r3, #3
 80040e6:	f043 0301 	orr.w	r3, r3, #1
 80040ea:	81a3      	strh	r3, [r4, #12]
 80040ec:	89a0      	ldrh	r0, [r4, #12]
 80040ee:	4305      	orrs	r5, r0
 80040f0:	81a5      	strh	r5, [r4, #12]
 80040f2:	e7cd      	b.n	8004090 <__smakebuf_r+0x18>
 80040f4:	0800336d 	.word	0x0800336d

080040f8 <__malloc_lock>:
 80040f8:	4801      	ldr	r0, [pc, #4]	; (8004100 <__malloc_lock+0x8>)
 80040fa:	f7ff ba09 	b.w	8003510 <__retarget_lock_acquire_recursive>
 80040fe:	bf00      	nop
 8004100:	2000019c 	.word	0x2000019c

08004104 <__malloc_unlock>:
 8004104:	4801      	ldr	r0, [pc, #4]	; (800410c <__malloc_unlock+0x8>)
 8004106:	f7ff ba04 	b.w	8003512 <__retarget_lock_release_recursive>
 800410a:	bf00      	nop
 800410c:	2000019c 	.word	0x2000019c

08004110 <_free_r>:
 8004110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004112:	2900      	cmp	r1, #0
 8004114:	d044      	beq.n	80041a0 <_free_r+0x90>
 8004116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800411a:	9001      	str	r0, [sp, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	f1a1 0404 	sub.w	r4, r1, #4
 8004122:	bfb8      	it	lt
 8004124:	18e4      	addlt	r4, r4, r3
 8004126:	f7ff ffe7 	bl	80040f8 <__malloc_lock>
 800412a:	4a1e      	ldr	r2, [pc, #120]	; (80041a4 <_free_r+0x94>)
 800412c:	9801      	ldr	r0, [sp, #4]
 800412e:	6813      	ldr	r3, [r2, #0]
 8004130:	b933      	cbnz	r3, 8004140 <_free_r+0x30>
 8004132:	6063      	str	r3, [r4, #4]
 8004134:	6014      	str	r4, [r2, #0]
 8004136:	b003      	add	sp, #12
 8004138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800413c:	f7ff bfe2 	b.w	8004104 <__malloc_unlock>
 8004140:	42a3      	cmp	r3, r4
 8004142:	d908      	bls.n	8004156 <_free_r+0x46>
 8004144:	6825      	ldr	r5, [r4, #0]
 8004146:	1961      	adds	r1, r4, r5
 8004148:	428b      	cmp	r3, r1
 800414a:	bf01      	itttt	eq
 800414c:	6819      	ldreq	r1, [r3, #0]
 800414e:	685b      	ldreq	r3, [r3, #4]
 8004150:	1949      	addeq	r1, r1, r5
 8004152:	6021      	streq	r1, [r4, #0]
 8004154:	e7ed      	b.n	8004132 <_free_r+0x22>
 8004156:	461a      	mov	r2, r3
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	b10b      	cbz	r3, 8004160 <_free_r+0x50>
 800415c:	42a3      	cmp	r3, r4
 800415e:	d9fa      	bls.n	8004156 <_free_r+0x46>
 8004160:	6811      	ldr	r1, [r2, #0]
 8004162:	1855      	adds	r5, r2, r1
 8004164:	42a5      	cmp	r5, r4
 8004166:	d10b      	bne.n	8004180 <_free_r+0x70>
 8004168:	6824      	ldr	r4, [r4, #0]
 800416a:	4421      	add	r1, r4
 800416c:	1854      	adds	r4, r2, r1
 800416e:	42a3      	cmp	r3, r4
 8004170:	6011      	str	r1, [r2, #0]
 8004172:	d1e0      	bne.n	8004136 <_free_r+0x26>
 8004174:	681c      	ldr	r4, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	6053      	str	r3, [r2, #4]
 800417a:	4421      	add	r1, r4
 800417c:	6011      	str	r1, [r2, #0]
 800417e:	e7da      	b.n	8004136 <_free_r+0x26>
 8004180:	d902      	bls.n	8004188 <_free_r+0x78>
 8004182:	230c      	movs	r3, #12
 8004184:	6003      	str	r3, [r0, #0]
 8004186:	e7d6      	b.n	8004136 <_free_r+0x26>
 8004188:	6825      	ldr	r5, [r4, #0]
 800418a:	1961      	adds	r1, r4, r5
 800418c:	428b      	cmp	r3, r1
 800418e:	bf04      	itt	eq
 8004190:	6819      	ldreq	r1, [r3, #0]
 8004192:	685b      	ldreq	r3, [r3, #4]
 8004194:	6063      	str	r3, [r4, #4]
 8004196:	bf04      	itt	eq
 8004198:	1949      	addeq	r1, r1, r5
 800419a:	6021      	streq	r1, [r4, #0]
 800419c:	6054      	str	r4, [r2, #4]
 800419e:	e7ca      	b.n	8004136 <_free_r+0x26>
 80041a0:	b003      	add	sp, #12
 80041a2:	bd30      	pop	{r4, r5, pc}
 80041a4:	200001a0 	.word	0x200001a0

080041a8 <_read_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	4d07      	ldr	r5, [pc, #28]	; (80041c8 <_read_r+0x20>)
 80041ac:	4604      	mov	r4, r0
 80041ae:	4608      	mov	r0, r1
 80041b0:	4611      	mov	r1, r2
 80041b2:	2200      	movs	r2, #0
 80041b4:	602a      	str	r2, [r5, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	f7fc fb28 	bl	800080c <_read>
 80041bc:	1c43      	adds	r3, r0, #1
 80041be:	d102      	bne.n	80041c6 <_read_r+0x1e>
 80041c0:	682b      	ldr	r3, [r5, #0]
 80041c2:	b103      	cbz	r3, 80041c6 <_read_r+0x1e>
 80041c4:	6023      	str	r3, [r4, #0]
 80041c6:	bd38      	pop	{r3, r4, r5, pc}
 80041c8:	200001a8 	.word	0x200001a8

080041cc <_fstat_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4d07      	ldr	r5, [pc, #28]	; (80041ec <_fstat_r+0x20>)
 80041d0:	2300      	movs	r3, #0
 80041d2:	4604      	mov	r4, r0
 80041d4:	4608      	mov	r0, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	602b      	str	r3, [r5, #0]
 80041da:	f7fc fb5c 	bl	8000896 <_fstat>
 80041de:	1c43      	adds	r3, r0, #1
 80041e0:	d102      	bne.n	80041e8 <_fstat_r+0x1c>
 80041e2:	682b      	ldr	r3, [r5, #0]
 80041e4:	b103      	cbz	r3, 80041e8 <_fstat_r+0x1c>
 80041e6:	6023      	str	r3, [r4, #0]
 80041e8:	bd38      	pop	{r3, r4, r5, pc}
 80041ea:	bf00      	nop
 80041ec:	200001a8 	.word	0x200001a8

080041f0 <_isatty_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4d06      	ldr	r5, [pc, #24]	; (800420c <_isatty_r+0x1c>)
 80041f4:	2300      	movs	r3, #0
 80041f6:	4604      	mov	r4, r0
 80041f8:	4608      	mov	r0, r1
 80041fa:	602b      	str	r3, [r5, #0]
 80041fc:	f7fc fb5b 	bl	80008b6 <_isatty>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <_isatty_r+0x1a>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	b103      	cbz	r3, 800420a <_isatty_r+0x1a>
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	bd38      	pop	{r3, r4, r5, pc}
 800420c:	200001a8 	.word	0x200001a8

08004210 <_init>:
 8004210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004212:	bf00      	nop
 8004214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004216:	bc08      	pop	{r3}
 8004218:	469e      	mov	lr, r3
 800421a:	4770      	bx	lr

0800421c <_fini>:
 800421c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421e:	bf00      	nop
 8004220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004222:	bc08      	pop	{r3}
 8004224:	469e      	mov	lr, r3
 8004226:	4770      	bx	lr
