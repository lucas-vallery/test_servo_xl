
test_servo_xl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003938  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08003b00  08003b00  00013b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d1c  08003d1c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d1c  08003d1c  00013d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d24  08003d24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d24  08003d24  00013d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d28  08003d28  00013d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  08003d9c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08003d9c  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5c9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018be  00000000  00000000  0002a669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002bf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  0002c698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002595b  00000000  00000000  0002cd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0d2  00000000  00000000  000526ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6021  00000000  00000000  0005d77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014379e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fd4  00000000  00000000  001437f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003ae8 	.word	0x08003ae8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08003ae8 	.word	0x08003ae8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009f8:	f000 b974 	b.w	8000ce4 <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9d08      	ldr	r5, [sp, #32]
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	468e      	mov	lr, r1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d14d      	bne.n	8000abe <__udivmoddi4+0xaa>
 8000a22:	428a      	cmp	r2, r1
 8000a24:	4694      	mov	ip, r2
 8000a26:	d969      	bls.n	8000afc <__udivmoddi4+0xe8>
 8000a28:	fab2 f282 	clz	r2, r2
 8000a2c:	b152      	cbz	r2, 8000a44 <__udivmoddi4+0x30>
 8000a2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a32:	f1c2 0120 	rsb	r1, r2, #32
 8000a36:	fa20 f101 	lsr.w	r1, r0, r1
 8000a3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a42:	4094      	lsls	r4, r2
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	0c21      	lsrs	r1, r4, #16
 8000a4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a4e:	fa1f f78c 	uxth.w	r7, ip
 8000a52:	fb08 e316 	mls	r3, r8, r6, lr
 8000a56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a5a:	fb06 f107 	mul.w	r1, r6, r7
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x64>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a6a:	f080 811f 	bcs.w	8000cac <__udivmoddi4+0x298>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 811c 	bls.w	8000cac <__udivmoddi4+0x298>
 8000a74:	3e02      	subs	r6, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a80:	fb08 3310 	mls	r3, r8, r0, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb00 f707 	mul.w	r7, r0, r7
 8000a8c:	42a7      	cmp	r7, r4
 8000a8e:	d90a      	bls.n	8000aa6 <__udivmoddi4+0x92>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a98:	f080 810a 	bcs.w	8000cb0 <__udivmoddi4+0x29c>
 8000a9c:	42a7      	cmp	r7, r4
 8000a9e:	f240 8107 	bls.w	8000cb0 <__udivmoddi4+0x29c>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aaa:	1be4      	subs	r4, r4, r7
 8000aac:	2600      	movs	r6, #0
 8000aae:	b11d      	cbz	r5, 8000ab8 <__udivmoddi4+0xa4>
 8000ab0:	40d4      	lsrs	r4, r2
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0xc2>
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	f000 80ef 	beq.w	8000ca6 <__udivmoddi4+0x292>
 8000ac8:	2600      	movs	r6, #0
 8000aca:	e9c5 0100 	strd	r0, r1, [r5]
 8000ace:	4630      	mov	r0, r6
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	fab3 f683 	clz	r6, r3
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d14a      	bne.n	8000b74 <__udivmoddi4+0x160>
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d302      	bcc.n	8000ae8 <__udivmoddi4+0xd4>
 8000ae2:	4282      	cmp	r2, r0
 8000ae4:	f200 80f9 	bhi.w	8000cda <__udivmoddi4+0x2c6>
 8000ae8:	1a84      	subs	r4, r0, r2
 8000aea:	eb61 0303 	sbc.w	r3, r1, r3
 8000aee:	2001      	movs	r0, #1
 8000af0:	469e      	mov	lr, r3
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	d0e0      	beq.n	8000ab8 <__udivmoddi4+0xa4>
 8000af6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000afa:	e7dd      	b.n	8000ab8 <__udivmoddi4+0xa4>
 8000afc:	b902      	cbnz	r2, 8000b00 <__udivmoddi4+0xec>
 8000afe:	deff      	udf	#255	; 0xff
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	2a00      	cmp	r2, #0
 8000b06:	f040 8092 	bne.w	8000c2e <__udivmoddi4+0x21a>
 8000b0a:	eba1 010c 	sub.w	r1, r1, ip
 8000b0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b12:	fa1f fe8c 	uxth.w	lr, ip
 8000b16:	2601      	movs	r6, #1
 8000b18:	0c20      	lsrs	r0, r4, #16
 8000b1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b26:	fb0e f003 	mul.w	r0, lr, r3
 8000b2a:	4288      	cmp	r0, r1
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x12c>
 8000b2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b32:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x12a>
 8000b38:	4288      	cmp	r0, r1
 8000b3a:	f200 80cb 	bhi.w	8000cd4 <__udivmoddi4+0x2c0>
 8000b3e:	4643      	mov	r3, r8
 8000b40:	1a09      	subs	r1, r1, r0
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b48:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b50:	fb0e fe00 	mul.w	lr, lr, r0
 8000b54:	45a6      	cmp	lr, r4
 8000b56:	d908      	bls.n	8000b6a <__udivmoddi4+0x156>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b60:	d202      	bcs.n	8000b68 <__udivmoddi4+0x154>
 8000b62:	45a6      	cmp	lr, r4
 8000b64:	f200 80bb 	bhi.w	8000cde <__udivmoddi4+0x2ca>
 8000b68:	4608      	mov	r0, r1
 8000b6a:	eba4 040e 	sub.w	r4, r4, lr
 8000b6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b72:	e79c      	b.n	8000aae <__udivmoddi4+0x9a>
 8000b74:	f1c6 0720 	rsb	r7, r6, #32
 8000b78:	40b3      	lsls	r3, r6
 8000b7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b82:	fa20 f407 	lsr.w	r4, r0, r7
 8000b86:	fa01 f306 	lsl.w	r3, r1, r6
 8000b8a:	431c      	orrs	r4, r3
 8000b8c:	40f9      	lsrs	r1, r7
 8000b8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b92:	fa00 f306 	lsl.w	r3, r0, r6
 8000b96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b9a:	0c20      	lsrs	r0, r4, #16
 8000b9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ba0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ba4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ba8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bac:	4288      	cmp	r0, r1
 8000bae:	fa02 f206 	lsl.w	r2, r2, r6
 8000bb2:	d90b      	bls.n	8000bcc <__udivmoddi4+0x1b8>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000bbc:	f080 8088 	bcs.w	8000cd0 <__udivmoddi4+0x2bc>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f240 8085 	bls.w	8000cd0 <__udivmoddi4+0x2bc>
 8000bc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bca:	4461      	add	r1, ip
 8000bcc:	1a09      	subs	r1, r1, r0
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be0:	458e      	cmp	lr, r1
 8000be2:	d908      	bls.n	8000bf6 <__udivmoddi4+0x1e2>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000bec:	d26c      	bcs.n	8000cc8 <__udivmoddi4+0x2b4>
 8000bee:	458e      	cmp	lr, r1
 8000bf0:	d96a      	bls.n	8000cc8 <__udivmoddi4+0x2b4>
 8000bf2:	3802      	subs	r0, #2
 8000bf4:	4461      	add	r1, ip
 8000bf6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bfa:	fba0 9402 	umull	r9, r4, r0, r2
 8000bfe:	eba1 010e 	sub.w	r1, r1, lr
 8000c02:	42a1      	cmp	r1, r4
 8000c04:	46c8      	mov	r8, r9
 8000c06:	46a6      	mov	lr, r4
 8000c08:	d356      	bcc.n	8000cb8 <__udivmoddi4+0x2a4>
 8000c0a:	d053      	beq.n	8000cb4 <__udivmoddi4+0x2a0>
 8000c0c:	b15d      	cbz	r5, 8000c26 <__udivmoddi4+0x212>
 8000c0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c12:	eb61 010e 	sbc.w	r1, r1, lr
 8000c16:	fa01 f707 	lsl.w	r7, r1, r7
 8000c1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c1e:	40f1      	lsrs	r1, r6
 8000c20:	431f      	orrs	r7, r3
 8000c22:	e9c5 7100 	strd	r7, r1, [r5]
 8000c26:	2600      	movs	r6, #0
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	f1c2 0320 	rsb	r3, r2, #32
 8000c32:	40d8      	lsrs	r0, r3
 8000c34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c38:	fa21 f303 	lsr.w	r3, r1, r3
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4301      	orrs	r1, r0
 8000c40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c50:	0c0b      	lsrs	r3, r1, #16
 8000c52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c56:	fb00 f60e 	mul.w	r6, r0, lr
 8000c5a:	429e      	cmp	r6, r3
 8000c5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x260>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c6a:	d22f      	bcs.n	8000ccc <__udivmoddi4+0x2b8>
 8000c6c:	429e      	cmp	r6, r3
 8000c6e:	d92d      	bls.n	8000ccc <__udivmoddi4+0x2b8>
 8000c70:	3802      	subs	r0, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1b9b      	subs	r3, r3, r6
 8000c76:	b289      	uxth	r1, r1
 8000c78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb06 f30e 	mul.w	r3, r6, lr
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x28a>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000c94:	d216      	bcs.n	8000cc4 <__udivmoddi4+0x2b0>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d914      	bls.n	8000cc4 <__udivmoddi4+0x2b0>
 8000c9a:	3e02      	subs	r6, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	1ac9      	subs	r1, r1, r3
 8000ca0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ca4:	e738      	b.n	8000b18 <__udivmoddi4+0x104>
 8000ca6:	462e      	mov	r6, r5
 8000ca8:	4628      	mov	r0, r5
 8000caa:	e705      	b.n	8000ab8 <__udivmoddi4+0xa4>
 8000cac:	4606      	mov	r6, r0
 8000cae:	e6e3      	b.n	8000a78 <__udivmoddi4+0x64>
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	e6f8      	b.n	8000aa6 <__udivmoddi4+0x92>
 8000cb4:	454b      	cmp	r3, r9
 8000cb6:	d2a9      	bcs.n	8000c0c <__udivmoddi4+0x1f8>
 8000cb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cbc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e7a3      	b.n	8000c0c <__udivmoddi4+0x1f8>
 8000cc4:	4646      	mov	r6, r8
 8000cc6:	e7ea      	b.n	8000c9e <__udivmoddi4+0x28a>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	e794      	b.n	8000bf6 <__udivmoddi4+0x1e2>
 8000ccc:	4640      	mov	r0, r8
 8000cce:	e7d1      	b.n	8000c74 <__udivmoddi4+0x260>
 8000cd0:	46d0      	mov	r8, sl
 8000cd2:	e77b      	b.n	8000bcc <__udivmoddi4+0x1b8>
 8000cd4:	3b02      	subs	r3, #2
 8000cd6:	4461      	add	r1, ip
 8000cd8:	e732      	b.n	8000b40 <__udivmoddi4+0x12c>
 8000cda:	4630      	mov	r0, r6
 8000cdc:	e709      	b.n	8000af2 <__udivmoddi4+0xde>
 8000cde:	4464      	add	r4, ip
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	e742      	b.n	8000b6a <__udivmoddi4+0x156>

08000ce4 <__aeabi_idiv0>:
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <MX_GPIO_Init+0x74>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a1a      	ldr	r2, [pc, #104]	; (8000d5c <MX_GPIO_Init+0x74>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <MX_GPIO_Init+0x74>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_GPIO_Init+0x74>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <MX_GPIO_Init+0x74>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_GPIO_Init+0x74>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_GPIO_Init+0x74>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <MX_GPIO_Init+0x74>)
 8000d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_GPIO_Init+0x74>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_GPIO_Init+0x74>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <MX_GPIO_Init+0x74>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_GPIO_Init+0x74>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800

08000d60 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d64:	f000 fc5d 	bl	8001622 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d68:	f000 f848 	bl	8000dfc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d6c:	f7ff ffbc 	bl	8000ce8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000d70:	f000 f948 	bl	8001004 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 8000d74:	f000 f976 	bl	8001064 <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */
	xl320_init(servo, &huart6, 1, BR_1M);
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <main+0x88>)
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	2201      	movs	r2, #1
 8000d80:	491a      	ldr	r1, [pc, #104]	; (8000dec <main+0x8c>)
 8000d82:	f000 fa67 	bl	8001254 <xl320_init>
	xl320_torqueEnable(servo);
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <main+0x88>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fc06 	bl	800159c <xl320_torqueEnable>
	xl320_setSpeed(servo, 100);
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <main+0x88>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8000df0 <main+0x90>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 fbbd 	bl	8001518 <xl320_setSpeed>
	HAL_Delay(250);
 8000d9e:	20fa      	movs	r0, #250	; 0xfa
 8000da0:	f000 fc9c 	bl	80016dc <HAL_Delay>
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//printf("Ping id : %d\r\n", 1);

		xl320_setGoalPosition(servo, 0);
 8000da4:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <main+0x88>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8000df4 <main+0x94>
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fb7f 	bl	80014b0 <xl320_setGoalPosition>
		xl320_executeAction(servo);
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <main+0x88>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 fbe2 	bl	8001580 <xl320_executeAction>
		HAL_Delay(1000);
 8000dbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc0:	f000 fc8c 	bl	80016dc <HAL_Delay>
		xl320_setGoalPosition(servo, 180);
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <main+0x88>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8000df8 <main+0x98>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 fb6f 	bl	80014b0 <xl320_setGoalPosition>
		xl320_executeAction(servo);
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <main+0x88>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 fbd2 	bl	8001580 <xl320_executeAction>
		HAL_Delay(1000);
 8000ddc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de0:	f000 fc7c 	bl	80016dc <HAL_Delay>
		xl320_setGoalPosition(servo, 0);
 8000de4:	e7de      	b.n	8000da4 <main+0x44>
 8000de6:	bf00      	nop
 8000de8:	2000008c 	.word	0x2000008c
 8000dec:	20000118 	.word	0x20000118
 8000df0:	42c80000 	.word	0x42c80000
 8000df4:	00000000 	.word	0x00000000
 8000df8:	43340000 	.word	0x43340000

08000dfc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b094      	sub	sp, #80	; 0x50
 8000e00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	2230      	movs	r2, #48	; 0x30
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f002 fd66 	bl	80038dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <SystemClock_Config+0xc8>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a27      	ldr	r2, [pc, #156]	; (8000ec4 <SystemClock_Config+0xc8>)
 8000e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <SystemClock_Config+0xc8>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e38:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <SystemClock_Config+0xcc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e40:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <SystemClock_Config+0xcc>)
 8000e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <SystemClock_Config+0xcc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e54:	2302      	movs	r3, #2
 8000e56:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e60:	2302      	movs	r3, #2
 8000e62:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 10;
 8000e68:	230a      	movs	r3, #10
 8000e6a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 210;
 8000e6c:	23d2      	movs	r3, #210	; 0xd2
 8000e6e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e78:	f107 0320 	add.w	r3, r7, #32
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fee3 	bl	8001c48 <HAL_RCC_OscConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x90>
	{
		Error_Handler();
 8000e88:	f000 f820 	bl	8000ecc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e90:	2302      	movs	r3, #2
 8000e92:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e9c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	2105      	movs	r1, #5
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 f970 	bl	8002190 <HAL_RCC_ClockConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0xbe>
	{
		Error_Handler();
 8000eb6:	f000 f809 	bl	8000ecc <Error_Handler>
	}
}
 8000eba:	bf00      	nop
 8000ebc:	3750      	adds	r7, #80	; 0x50
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40007000 	.word	0x40007000

08000ecc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <Error_Handler+0x8>
	...

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_MspInit+0x44>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_MspInit+0x44>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_MspInit+0x44>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_MspInit+0x44>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6c:	f000 fb96 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <_sbrk>:
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <_sbrk+0x5c>)
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <_sbrk+0x60>)
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <_sbrk+0x22>
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <_sbrk+0x64>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <_sbrk+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d207      	bcs.n	8000fb4 <_sbrk+0x40>
 8000fa4:	f002 fc52 	bl	800384c <__errno>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	220c      	movs	r2, #12
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fb2:	e009      	b.n	8000fc8 <_sbrk+0x54>
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <_sbrk+0x64>)
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20050000 	.word	0x20050000
 8000fd4:	00000400 	.word	0x00000400
 8000fd8:	20000090 	.word	0x20000090
 8000fdc:	200001b0 	.word	0x200001b0

08000fe0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <SystemInit+0x20>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <SystemInit+0x20>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_USART1_UART_Init+0x58>)
 800100a:	4a15      	ldr	r2, [pc, #84]	; (8001060 <MX_USART1_UART_Init+0x5c>)
 800100c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <MX_USART1_UART_Init+0x58>)
 8001010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001014:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_USART1_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_USART1_UART_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_USART1_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_USART1_UART_Init+0x58>)
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_USART1_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_USART1_UART_Init+0x58>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_USART1_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_USART1_UART_Init+0x58>)
 8001042:	2200      	movs	r2, #0
 8001044:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_USART1_UART_Init+0x58>)
 8001048:	f001 fe78 	bl	8002d3c <HAL_UART_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001052:	f7ff ff3b 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000094 	.word	0x20000094
 8001060:	40011000 	.word	0x40011000

08001064 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_USART6_UART_Init+0x54>)
 800106a:	4a14      	ldr	r2, [pc, #80]	; (80010bc <MX_USART6_UART_Init+0x58>)
 800106c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 1000000;
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_USART6_UART_Init+0x54>)
 8001070:	4a13      	ldr	r2, [pc, #76]	; (80010c0 <MX_USART6_UART_Init+0x5c>)
 8001072:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <MX_USART6_UART_Init+0x54>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_USART6_UART_Init+0x54>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <MX_USART6_UART_Init+0x54>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_USART6_UART_Init+0x54>)
 8001088:	220c      	movs	r2, #12
 800108a:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <MX_USART6_UART_Init+0x54>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_USART6_UART_Init+0x54>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <MX_USART6_UART_Init+0x54>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_USART6_UART_Init+0x54>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_USART6_UART_Init+0x54>)
 80010a6:	f001 fe97 	bl	8002dd8 <HAL_HalfDuplex_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_USART6_UART_Init+0x50>
  {
    Error_Handler();
 80010b0:	f7ff ff0c 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000118 	.word	0x20000118
 80010bc:	40011400 	.word	0x40011400
 80010c0:	000f4240 	.word	0x000f4240

080010c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0ae      	sub	sp, #184	; 0xb8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	2284      	movs	r2, #132	; 0x84
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 fbf9 	bl	80038dc <memset>
  if(uartHandle->Instance==USART1)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a53      	ldr	r2, [pc, #332]	; (800123c <HAL_UART_MspInit+0x178>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d15d      	bne.n	80011b0 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010f4:	2340      	movs	r3, #64	; 0x40
 80010f6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010f8:	2300      	movs	r3, #0
 80010fa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fc:	f107 0320 	add.w	r3, r7, #32
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fa2b 	bl	800255c <HAL_RCCEx_PeriphCLKConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800110c:	f7ff fede 	bl	8000ecc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001110:	4b4b      	ldr	r3, [pc, #300]	; (8001240 <HAL_UART_MspInit+0x17c>)
 8001112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001114:	4a4a      	ldr	r2, [pc, #296]	; (8001240 <HAL_UART_MspInit+0x17c>)
 8001116:	f043 0310 	orr.w	r3, r3, #16
 800111a:	6453      	str	r3, [r2, #68]	; 0x44
 800111c:	4b48      	ldr	r3, [pc, #288]	; (8001240 <HAL_UART_MspInit+0x17c>)
 800111e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001120:	f003 0310 	and.w	r3, r3, #16
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001128:	4b45      	ldr	r3, [pc, #276]	; (8001240 <HAL_UART_MspInit+0x17c>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	4a44      	ldr	r2, [pc, #272]	; (8001240 <HAL_UART_MspInit+0x17c>)
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	6313      	str	r3, [r2, #48]	; 0x30
 8001134:	4b42      	ldr	r3, [pc, #264]	; (8001240 <HAL_UART_MspInit+0x17c>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	61bb      	str	r3, [r7, #24]
 800113e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b3f      	ldr	r3, [pc, #252]	; (8001240 <HAL_UART_MspInit+0x17c>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	4a3e      	ldr	r2, [pc, #248]	; (8001240 <HAL_UART_MspInit+0x17c>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6313      	str	r3, [r2, #48]	; 0x30
 800114c:	4b3c      	ldr	r3, [pc, #240]	; (8001240 <HAL_UART_MspInit+0x17c>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001170:	2307      	movs	r3, #7
 8001172:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800117a:	4619      	mov	r1, r3
 800117c:	4831      	ldr	r0, [pc, #196]	; (8001244 <HAL_UART_MspInit+0x180>)
 800117e:	f000 fbb7 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800119c:	2307      	movs	r3, #7
 800119e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4827      	ldr	r0, [pc, #156]	; (8001248 <HAL_UART_MspInit+0x184>)
 80011aa:	f000 fba1 	bl	80018f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80011ae:	e040      	b.n	8001232 <HAL_UART_MspInit+0x16e>
  else if(uartHandle->Instance==USART6)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a25      	ldr	r2, [pc, #148]	; (800124c <HAL_UART_MspInit+0x188>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d13b      	bne.n	8001232 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80011ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011be:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80011c0:	2300      	movs	r3, #0
 80011c2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c4:	f107 0320 	add.w	r3, r7, #32
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 f9c7 	bl	800255c <HAL_RCCEx_PeriphCLKConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_UART_MspInit+0x114>
      Error_Handler();
 80011d4:	f7ff fe7a 	bl	8000ecc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_UART_MspInit+0x17c>)
 80011da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <HAL_UART_MspInit+0x17c>)
 80011de:	f043 0320 	orr.w	r3, r3, #32
 80011e2:	6453      	str	r3, [r2, #68]	; 0x44
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_UART_MspInit+0x17c>)
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	f003 0320 	and.w	r3, r3, #32
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <HAL_UART_MspInit+0x17c>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	4a12      	ldr	r2, [pc, #72]	; (8001240 <HAL_UART_MspInit+0x17c>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	6313      	str	r3, [r2, #48]	; 0x30
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <HAL_UART_MspInit+0x17c>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001208:	2340      	movs	r3, #64	; 0x40
 800120a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001220:	2308      	movs	r3, #8
 8001222:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001226:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800122a:	4619      	mov	r1, r3
 800122c:	4808      	ldr	r0, [pc, #32]	; (8001250 <HAL_UART_MspInit+0x18c>)
 800122e:	f000 fb5f 	bl	80018f0 <HAL_GPIO_Init>
}
 8001232:	bf00      	nop
 8001234:	37b8      	adds	r7, #184	; 0xb8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40011000 	.word	0x40011000
 8001240:	40023800 	.word	0x40023800
 8001244:	40020400 	.word	0x40020400
 8001248:	40020000 	.word	0x40020000
 800124c:	40011400 	.word	0x40011400
 8001250:	40020800 	.word	0x40020800

08001254 <xl320_init>:
 *      Author: lucas
 */

#include "xl320_driver.h"

void xl320_init(Xl320* xl320, UART_HandleTypeDef* uart, uint8_t id, uint8_t br){
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	4611      	mov	r1, r2
 8001260:	461a      	mov	r2, r3
 8001262:	460b      	mov	r3, r1
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	4613      	mov	r3, r2
 8001268:	71bb      	strb	r3, [r7, #6]
	xl320->uart = uart;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	601a      	str	r2, [r3, #0]
	xl320->id 	= id;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	79fa      	ldrb	r2, [r7, #7]
 8001274:	711a      	strb	r2, [r3, #4]
	xl320->br	= br;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	79ba      	ldrb	r2, [r7, #6]
 800127a:	715a      	strb	r2, [r3, #5]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <xl320_addHeader2Buff>:

void xl320_addHeader2Buff(uint8_t* buff){
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	buff[0] = 0xFF;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	22ff      	movs	r2, #255	; 0xff
 8001294:	701a      	strb	r2, [r3, #0]
	buff[1] = 0xFF;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3301      	adds	r3, #1
 800129a:	22ff      	movs	r2, #255	; 0xff
 800129c:	701a      	strb	r2, [r3, #0]
	buff[2] = 0xFD;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3302      	adds	r3, #2
 80012a2:	22fd      	movs	r2, #253	; 0xfd
 80012a4:	701a      	strb	r2, [r3, #0]
	buff[3] = 0x00;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3303      	adds	r3, #3
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <xl320_updateCrc>:

unsigned short xl320_updateCrc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80012c8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80012cc:	6019      	str	r1, [r3, #0]
 80012ce:	4611      	mov	r1, r2
 80012d0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80012d4:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80012d8:	4602      	mov	r2, r0
 80012da:	801a      	strh	r2, [r3, #0]
 80012dc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80012e0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80012e4:	460a      	mov	r2, r1
 80012e6:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 80012e8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80012ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012f0:	4a28      	ldr	r2, [pc, #160]	; (8001394 <xl320_updateCrc+0xd8>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	4611      	mov	r1, r2
 80012f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012fa:	461a      	mov	r2, r3
 80012fc:	f002 fae0 	bl	80038c0 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++) {
 8001300:	2300      	movs	r3, #0
 8001302:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8001306:	e031      	b.n	800136c <xl320_updateCrc+0xb0>
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8001308:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800130c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	0a1b      	lsrs	r3, r3, #8
 8001314:	b29a      	uxth	r2, r3
 8001316:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800131a:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800131e:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8001322:	6809      	ldr	r1, [r1, #0]
 8001324:	440b      	add	r3, r1
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b29b      	uxth	r3, r3
 800132a:	4053      	eors	r3, r2
 800132c:	b29b      	uxth	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8001334:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001338:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	b21a      	sxth	r2, r3
 8001342:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8001346:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800134a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800134e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001352:	b21b      	sxth	r3, r3
 8001354:	4053      	eors	r3, r2
 8001356:	b21a      	sxth	r2, r3
 8001358:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800135c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8001360:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++) {
 8001362:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8001366:	3301      	adds	r3, #1
 8001368:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800136c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001370:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001374:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d3c4      	bcc.n	8001308 <xl320_updateCrc+0x4c>
	}

	return crc_accum;
 800137e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001382:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8001386:	881b      	ldrh	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	08003b00 	.word	0x08003b00

08001398 <xl320_copyParams2Buff>:

void xl320_copyParams2Buff(uint8_t buffStartIndex, uint8_t* buff, uint16_t nbParams, uint8_t* params){
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4603      	mov	r3, r0
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	4613      	mov	r3, r2
 80013a8:	81bb      	strh	r3, [r7, #12]
	for(int i = 0; i < nbParams; i++){
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	e00d      	b.n	80013cc <xl320_copyParams2Buff+0x34>
		buff[i + buffStartIndex] = params[i];
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	441a      	add	r2, r3
 80013b6:	7bf9      	ldrb	r1, [r7, #15]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	440b      	add	r3, r1
 80013bc:	4619      	mov	r1, r3
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	440b      	add	r3, r1
 80013c2:	7812      	ldrb	r2, [r2, #0]
 80013c4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < nbParams; i++){
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	89bb      	ldrh	r3, [r7, #12]
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dbed      	blt.n	80013b0 <xl320_copyParams2Buff+0x18>
	}
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	371c      	adds	r7, #28
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <xl320_sendCommand>:

void xl320_sendCommand(Xl320* xl320, Instruction_t inst, uint16_t nbParams, uint8_t* params){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	460b      	mov	r3, r1
 80013f0:	72fb      	strb	r3, [r7, #11]
 80013f2:	4613      	mov	r3, r2
 80013f4:	813b      	strh	r3, [r7, #8]
	uint8_t* txBuff = NULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
	txBuff = (uint8_t*) malloc((MIN_FRAME_SIZE + nbParams)*sizeof(uint8_t));
 80013fa:	893b      	ldrh	r3, [r7, #8]
 80013fc:	330a      	adds	r3, #10
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 fa4e 	bl	80038a0 <malloc>
 8001404:	4603      	mov	r3, r0
 8001406:	617b      	str	r3, [r7, #20]
	uint16_t length = nbParams + 3;
 8001408:	893b      	ldrh	r3, [r7, #8]
 800140a:	3303      	adds	r3, #3
 800140c:	827b      	strh	r3, [r7, #18]

	xl320_addHeader2Buff(txBuff);
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff3a 	bl	8001288 <xl320_addHeader2Buff>
	txBuff[4] = xl320->id;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3304      	adds	r3, #4
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	7912      	ldrb	r2, [r2, #4]
 800141c:	701a      	strb	r2, [r3, #0]
	txBuff[5] = (uint8_t) (length & 0xFF);
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3305      	adds	r3, #5
 8001422:	8a7a      	ldrh	r2, [r7, #18]
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	701a      	strb	r2, [r3, #0]
	txBuff[6] = (uint8_t) (length >> 8);
 8001428:	8a7b      	ldrh	r3, [r7, #18]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	b29a      	uxth	r2, r3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3306      	adds	r3, #6
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	701a      	strb	r2, [r3, #0]
	txBuff[7] = inst;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3307      	adds	r3, #7
 800143a:	7afa      	ldrb	r2, [r7, #11]
 800143c:	701a      	strb	r2, [r3, #0]
	xl320_copyParams2Buff(8, txBuff, nbParams, params);
 800143e:	893a      	ldrh	r2, [r7, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6979      	ldr	r1, [r7, #20]
 8001444:	2008      	movs	r0, #8
 8001446:	f7ff ffa7 	bl	8001398 <xl320_copyParams2Buff>

	uint16_t crc = xl320_updateCrc(0, txBuff, MIN_FRAME_SIZE + nbParams - CRC_FIELD_SIZE);
 800144a:	893b      	ldrh	r3, [r7, #8]
 800144c:	3308      	adds	r3, #8
 800144e:	b29b      	uxth	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	6979      	ldr	r1, [r7, #20]
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff ff31 	bl	80012bc <xl320_updateCrc>
 800145a:	4603      	mov	r3, r0
 800145c:	823b      	strh	r3, [r7, #16]

	txBuff[(MIN_FRAME_SIZE + nbParams) - 2] = (uint8_t) (crc & 0xFF);
 800145e:	893b      	ldrh	r3, [r7, #8]
 8001460:	3308      	adds	r3, #8
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	4413      	add	r3, r2
 8001466:	8a3a      	ldrh	r2, [r7, #16]
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	701a      	strb	r2, [r3, #0]
	txBuff[(MIN_FRAME_SIZE + nbParams) - 1] = (uint8_t) (crc >> 8);
 800146c:	8a3b      	ldrh	r3, [r7, #16]
 800146e:	0a1b      	lsrs	r3, r3, #8
 8001470:	b299      	uxth	r1, r3
 8001472:	893b      	ldrh	r3, [r7, #8]
 8001474:	3309      	adds	r3, #9
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4413      	add	r3, r2
 800147a:	b2ca      	uxtb	r2, r1
 800147c:	701a      	strb	r2, [r3, #0]

	HAL_HalfDuplex_EnableTransmitter(&huart6);
 800147e:	480a      	ldr	r0, [pc, #40]	; (80014a8 <xl320_sendCommand+0xc4>)
 8001480:	f001 fd93 	bl	8002faa <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(xl320->uart, txBuff, (MIN_FRAME_SIZE + nbParams)*sizeof(uint8_t), 0x1F4);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	893b      	ldrh	r3, [r7, #8]
 800148a:	330a      	adds	r3, #10
 800148c:	b29a      	uxth	r2, r3
 800148e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001492:	6979      	ldr	r1, [r7, #20]
 8001494:	f001 fcf6 	bl	8002e84 <HAL_UART_Transmit>

	free(txBuff);
 8001498:	6978      	ldr	r0, [r7, #20]
 800149a:	f002 fa09 	bl	80038b0 <free>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000118 	.word	0x20000118
 80014ac:	00000000 	.word	0x00000000

080014b0 <xl320_setGoalPosition>:
	uint8_t params[3] = {LED, 0, (uint8_t) color};

	xl320_sendCommand(xl320, WRITE, 3, (uint8_t*) &params);
}

void xl320_setGoalPosition(Xl320* xl320, float goalPositionInDeg){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	ed87 0a00 	vstr	s0, [r7]
	uint16_t position = (uint16_t)(goalPositionInDeg/BIT_RESOLUTION_IN_DEG);
 80014bc:	6838      	ldr	r0, [r7, #0]
 80014be:	f7ff f807 	bl	80004d0 <__aeabi_f2d>
 80014c2:	a313      	add	r3, pc, #76	; (adr r3, 8001510 <xl320_setGoalPosition+0x60>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff f984 	bl	80007d4 <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fa66 	bl	80009a4 <__aeabi_d2uiz>
 80014d8:	4603      	mov	r3, r0
 80014da:	81fb      	strh	r3, [r7, #14]
	uint8_t params[4] = {POSITION, 0, (uint8_t)(position & 0xFF) , (uint8_t)(position >> 8)};
 80014dc:	231e      	movs	r3, #30
 80014de:	723b      	strb	r3, [r7, #8]
 80014e0:	2300      	movs	r3, #0
 80014e2:	727b      	strb	r3, [r7, #9]
 80014e4:	89fb      	ldrh	r3, [r7, #14]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	72bb      	strb	r3, [r7, #10]
 80014ea:	89fb      	ldrh	r3, [r7, #14]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	72fb      	strb	r3, [r7, #11]

	xl320_sendCommand(xl320, WRITE, 4, (uint8_t*) &params);
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	2204      	movs	r2, #4
 80014fa:	2103      	movs	r1, #3
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff71 	bl	80013e4 <xl320_sendCommand>
}
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	f3af 8000 	nop.w
 8001510:	28f5c28f 	.word	0x28f5c28f
 8001514:	3fd28f5c 	.word	0x3fd28f5c

08001518 <xl320_setSpeed>:

void xl320_setSpeed(Xl320* xl320, float rpm){
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	ed87 0a00 	vstr	s0, [r7]
	uint16_t speedValue = (uint16_t)(rpm/RESOLUTION_SPEED);
 8001524:	6838      	ldr	r0, [r7, #0]
 8001526:	f7fe ffd3 	bl	80004d0 <__aeabi_f2d>
 800152a:	a313      	add	r3, pc, #76	; (adr r3, 8001578 <xl320_setSpeed+0x60>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7ff f950 	bl	80007d4 <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff fa32 	bl	80009a4 <__aeabi_d2uiz>
 8001540:	4603      	mov	r3, r0
 8001542:	81fb      	strh	r3, [r7, #14]
	uint8_t highByte = (uint8_t)((speedValue >> 8) & 0xFF);
 8001544:	89fb      	ldrh	r3, [r7, #14]
 8001546:	0a1b      	lsrs	r3, r3, #8
 8001548:	b29b      	uxth	r3, r3
 800154a:	737b      	strb	r3, [r7, #13]
	uint8_t lowByte = (uint8_t)(speedValue & 0xFF);
 800154c:	89fb      	ldrh	r3, [r7, #14]
 800154e:	733b      	strb	r3, [r7, #12]

	uint8_t params[4] = {LIMIT_SPEED, 0, lowByte, highByte};
 8001550:	2372      	movs	r3, #114	; 0x72
 8001552:	723b      	strb	r3, [r7, #8]
 8001554:	2300      	movs	r3, #0
 8001556:	727b      	strb	r3, [r7, #9]
 8001558:	7b3b      	ldrb	r3, [r7, #12]
 800155a:	72bb      	strb	r3, [r7, #10]
 800155c:	7b7b      	ldrb	r3, [r7, #13]
 800155e:	72fb      	strb	r3, [r7, #11]
	xl320_sendCommand(xl320, WRITE, 3, (uint8_t*) &params);
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	2203      	movs	r2, #3
 8001566:	2103      	movs	r1, #3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff3b 	bl	80013e4 <xl320_sendCommand>
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	f9db22d1 	.word	0xf9db22d1
 800157c:	3fbc6a7e 	.word	0x3fbc6a7e

08001580 <xl320_executeAction>:

void xl320_executeAction(Xl320* xl320){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	xl320_sendCommand(xl320, ACTION, 0, NULL);
 8001588:	2300      	movs	r3, #0
 800158a:	2200      	movs	r2, #0
 800158c:	2105      	movs	r1, #5
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ff28 	bl	80013e4 <xl320_sendCommand>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <xl320_torqueEnable>:

void xl320_torqueEnable(Xl320* xl320){
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	uint8_t params[3] = {TORQUE_EN, 0, ENABLE};
 80015a4:	4a09      	ldr	r2, [pc, #36]	; (80015cc <xl320_torqueEnable+0x30>)
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	4611      	mov	r1, r2
 80015ae:	8019      	strh	r1, [r3, #0]
 80015b0:	3302      	adds	r3, #2
 80015b2:	0c12      	lsrs	r2, r2, #16
 80015b4:	701a      	strb	r2, [r3, #0]

	xl320_sendCommand(xl320, WRITE, 3, (uint8_t*) &params);
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	2203      	movs	r2, #3
 80015bc:	2103      	movs	r1, #3
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ff10 	bl	80013e4 <xl320_sendCommand>
}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	08003d00 	.word	0x08003d00

080015d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001608 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d4:	480d      	ldr	r0, [pc, #52]	; (800160c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015d6:	490e      	ldr	r1, [pc, #56]	; (8001610 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015d8:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015dc:	e002      	b.n	80015e4 <LoopCopyDataInit>

080015de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e2:	3304      	adds	r3, #4

080015e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e8:	d3f9      	bcc.n	80015de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ea:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015ec:	4c0b      	ldr	r4, [pc, #44]	; (800161c <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f0:	e001      	b.n	80015f6 <LoopFillZerobss>

080015f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f4:	3204      	adds	r2, #4

080015f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f8:	d3fb      	bcc.n	80015f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015fa:	f7ff fcf1 	bl	8000fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fe:	f002 f92b 	bl	8003858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001602:	f7ff fbad 	bl	8000d60 <main>
  bx  lr    
 8001606:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001608:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001610:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001614:	08003d2c 	.word	0x08003d2c
  ldr r2, =_sbss
 8001618:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800161c:	200001b0 	.word	0x200001b0

08001620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC_IRQHandler>

08001622 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001626:	2003      	movs	r0, #3
 8001628:	f000 f92e 	bl	8001888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162c:	2000      	movs	r0, #0
 800162e:	f000 f805 	bl	800163c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001632:	f7ff fc51 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_InitTick+0x54>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x58>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f93b 	bl	80018d6 <HAL_SYSTICK_Config>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e00e      	b.n	8001688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d80a      	bhi.n	8001686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001678:	f000 f911 	bl	800189e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800167c:	4a06      	ldr	r2, [pc, #24]	; (8001698 <HAL_InitTick+0x5c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000000 	.word	0x20000000
 8001694:	20000008 	.word	0x20000008
 8001698:	20000004 	.word	0x20000004

0800169c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_IncTick+0x20>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x24>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <HAL_IncTick+0x24>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000008 	.word	0x20000008
 80016c0:	2000019c 	.word	0x2000019c

080016c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <HAL_GetTick+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	2000019c 	.word	0x2000019c

080016dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e4:	f7ff ffee 	bl	80016c4 <HAL_GetTick>
 80016e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016f4:	d005      	beq.n	8001702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_Delay+0x44>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001702:	bf00      	nop
 8001704:	f7ff ffde 	bl	80016c4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	429a      	cmp	r2, r3
 8001712:	d8f7      	bhi.n	8001704 <HAL_Delay+0x28>
  {
  }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000008 	.word	0x20000008

08001724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <__NVIC_SetPriorityGrouping+0x40>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	4313      	orrs	r3, r2
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <__NVIC_SetPriorityGrouping+0x40>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00
 8001768:	05fa0000 	.word	0x05fa0000

0800176c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <__NVIC_GetPriorityGrouping+0x18>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	f003 0307 	and.w	r3, r3, #7
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	; (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	; (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001854:	d301      	bcc.n	800185a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001856:	2301      	movs	r3, #1
 8001858:	e00f      	b.n	800187a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <SysTick_Config+0x40>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001862:	210f      	movs	r1, #15
 8001864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001868:	f7ff ff8e 	bl	8001788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <SysTick_Config+0x40>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001872:	4b04      	ldr	r3, [pc, #16]	; (8001884 <SysTick_Config+0x40>)
 8001874:	2207      	movs	r2, #7
 8001876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	e000e010 	.word	0xe000e010

08001888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ff47 	bl	8001724 <__NVIC_SetPriorityGrouping>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b0:	f7ff ff5c 	bl	800176c <__NVIC_GetPriorityGrouping>
 80018b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	6978      	ldr	r0, [r7, #20]
 80018bc:	f7ff ff8e 	bl	80017dc <NVIC_EncodePriority>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff5d 	bl	8001788 <__NVIC_SetPriority>
}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffb0 	bl	8001844 <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	e175      	b.n	8001bfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001910:	2201      	movs	r2, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	429a      	cmp	r2, r3
 800192a:	f040 8164 	bne.w	8001bf6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b01      	cmp	r3, #1
 8001938:	d005      	beq.n	8001946 <HAL_GPIO_Init+0x56>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d130      	bne.n	80019a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800197c:	2201      	movs	r2, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 0201 	and.w	r2, r3, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d017      	beq.n	80019e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d123      	bne.n	8001a38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	08da      	lsrs	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3208      	adds	r2, #8
 80019f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	69b9      	ldr	r1, [r7, #24]
 8001a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0203 	and.w	r2, r3, #3
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80be 	beq.w	8001bf6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	4b66      	ldr	r3, [pc, #408]	; (8001c14 <HAL_GPIO_Init+0x324>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	4a65      	ldr	r2, [pc, #404]	; (8001c14 <HAL_GPIO_Init+0x324>)
 8001a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a84:	6453      	str	r3, [r2, #68]	; 0x44
 8001a86:	4b63      	ldr	r3, [pc, #396]	; (8001c14 <HAL_GPIO_Init+0x324>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a92:	4a61      	ldr	r2, [pc, #388]	; (8001c18 <HAL_GPIO_Init+0x328>)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	220f      	movs	r2, #15
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <HAL_GPIO_Init+0x32c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d037      	beq.n	8001b2e <HAL_GPIO_Init+0x23e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a57      	ldr	r2, [pc, #348]	; (8001c20 <HAL_GPIO_Init+0x330>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d031      	beq.n	8001b2a <HAL_GPIO_Init+0x23a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a56      	ldr	r2, [pc, #344]	; (8001c24 <HAL_GPIO_Init+0x334>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d02b      	beq.n	8001b26 <HAL_GPIO_Init+0x236>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a55      	ldr	r2, [pc, #340]	; (8001c28 <HAL_GPIO_Init+0x338>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d025      	beq.n	8001b22 <HAL_GPIO_Init+0x232>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a54      	ldr	r2, [pc, #336]	; (8001c2c <HAL_GPIO_Init+0x33c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d01f      	beq.n	8001b1e <HAL_GPIO_Init+0x22e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a53      	ldr	r2, [pc, #332]	; (8001c30 <HAL_GPIO_Init+0x340>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d019      	beq.n	8001b1a <HAL_GPIO_Init+0x22a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <HAL_GPIO_Init+0x344>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <HAL_GPIO_Init+0x226>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a51      	ldr	r2, [pc, #324]	; (8001c38 <HAL_GPIO_Init+0x348>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00d      	beq.n	8001b12 <HAL_GPIO_Init+0x222>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a50      	ldr	r2, [pc, #320]	; (8001c3c <HAL_GPIO_Init+0x34c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d007      	beq.n	8001b0e <HAL_GPIO_Init+0x21e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4f      	ldr	r2, [pc, #316]	; (8001c40 <HAL_GPIO_Init+0x350>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d101      	bne.n	8001b0a <HAL_GPIO_Init+0x21a>
 8001b06:	2309      	movs	r3, #9
 8001b08:	e012      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	e010      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b0e:	2308      	movs	r3, #8
 8001b10:	e00e      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b12:	2307      	movs	r3, #7
 8001b14:	e00c      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b16:	2306      	movs	r3, #6
 8001b18:	e00a      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	e008      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b1e:	2304      	movs	r3, #4
 8001b20:	e006      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b22:	2303      	movs	r3, #3
 8001b24:	e004      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e002      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	f002 0203 	and.w	r2, r2, #3
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	4093      	lsls	r3, r2
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b40:	4935      	ldr	r1, [pc, #212]	; (8001c18 <HAL_GPIO_Init+0x328>)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4e:	4b3d      	ldr	r3, [pc, #244]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b72:	4a34      	ldr	r2, [pc, #208]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b78:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b9c:	4a29      	ldr	r2, [pc, #164]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc6:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf0:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	2b0f      	cmp	r3, #15
 8001c00:	f67f ae86 	bls.w	8001910 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3724      	adds	r7, #36	; 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40013800 	.word	0x40013800
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	40020400 	.word	0x40020400
 8001c24:	40020800 	.word	0x40020800
 8001c28:	40020c00 	.word	0x40020c00
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40021400 	.word	0x40021400
 8001c34:	40021800 	.word	0x40021800
 8001c38:	40021c00 	.word	0x40021c00
 8001c3c:	40022000 	.word	0x40022000
 8001c40:	40022400 	.word	0x40022400
 8001c44:	40013c00 	.word	0x40013c00

08001c48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e291      	b.n	8002182 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8087 	beq.w	8001d7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c6c:	4b96      	ldr	r3, [pc, #600]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d00c      	beq.n	8001c92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c78:	4b93      	ldr	r3, [pc, #588]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d112      	bne.n	8001caa <HAL_RCC_OscConfig+0x62>
 8001c84:	4b90      	ldr	r3, [pc, #576]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c90:	d10b      	bne.n	8001caa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c92:	4b8d      	ldr	r3, [pc, #564]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d06c      	beq.n	8001d78 <HAL_RCC_OscConfig+0x130>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d168      	bne.n	8001d78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e26b      	b.n	8002182 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb2:	d106      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x7a>
 8001cb4:	4b84      	ldr	r3, [pc, #528]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a83      	ldr	r2, [pc, #524]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	e02e      	b.n	8001d20 <HAL_RCC_OscConfig+0xd8>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x9c>
 8001cca:	4b7f      	ldr	r3, [pc, #508]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a7e      	ldr	r2, [pc, #504]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b7c      	ldr	r3, [pc, #496]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a7b      	ldr	r2, [pc, #492]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e01d      	b.n	8001d20 <HAL_RCC_OscConfig+0xd8>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0xc0>
 8001cee:	4b76      	ldr	r3, [pc, #472]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a75      	ldr	r2, [pc, #468]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b73      	ldr	r3, [pc, #460]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a72      	ldr	r2, [pc, #456]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0xd8>
 8001d08:	4b6f      	ldr	r3, [pc, #444]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a6e      	ldr	r2, [pc, #440]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b6c      	ldr	r3, [pc, #432]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a6b      	ldr	r2, [pc, #428]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff fccc 	bl	80016c4 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fcc8 	bl	80016c4 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e21f      	b.n	8002182 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	4b61      	ldr	r3, [pc, #388]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0xe8>
 8001d4e:	e014      	b.n	8001d7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff fcb8 	bl	80016c4 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff fcb4 	bl	80016c4 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e20b      	b.n	8002182 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6a:	4b57      	ldr	r3, [pc, #348]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x110>
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d069      	beq.n	8001e5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d86:	4b50      	ldr	r3, [pc, #320]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00b      	beq.n	8001daa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d92:	4b4d      	ldr	r3, [pc, #308]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d11c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x190>
 8001d9e:	4b4a      	ldr	r3, [pc, #296]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d116      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001daa:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d005      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x17a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d001      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e1df      	b.n	8002182 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc2:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	493d      	ldr	r1, [pc, #244]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd6:	e040      	b.n	8001e5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d023      	beq.n	8001e28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de0:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a38      	ldr	r2, [pc, #224]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7ff fc6a 	bl	80016c4 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df4:	f7ff fc66 	bl	80016c4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e1bd      	b.n	8002182 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e06:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e12:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4929      	ldr	r1, [pc, #164]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]
 8001e26:	e018      	b.n	8001e5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a26      	ldr	r2, [pc, #152]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff fc46 	bl	80016c4 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fc42 	bl	80016c4 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e199      	b.n	8002182 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d038      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d019      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e72:	4a15      	ldr	r2, [pc, #84]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fc23 	bl	80016c4 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e82:	f7ff fc1f 	bl	80016c4 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e176      	b.n	8002182 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x23a>
 8001ea0:	e01a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea6:	4a08      	ldr	r2, [pc, #32]	; (8001ec8 <HAL_RCC_OscConfig+0x280>)
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eae:	f7ff fc09 	bl	80016c4 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb6:	f7ff fc05 	bl	80016c4 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d903      	bls.n	8001ecc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e15c      	b.n	8002182 <HAL_RCC_OscConfig+0x53a>
 8001ec8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ecc:	4b91      	ldr	r3, [pc, #580]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1ee      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80a4 	beq.w	800202e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee6:	4b8b      	ldr	r3, [pc, #556]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10d      	bne.n	8001f0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	4b88      	ldr	r3, [pc, #544]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	4a87      	ldr	r2, [pc, #540]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efc:	6413      	str	r3, [r2, #64]	; 0x40
 8001efe:	4b85      	ldr	r3, [pc, #532]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0e:	4b82      	ldr	r3, [pc, #520]	; (8002118 <HAL_RCC_OscConfig+0x4d0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d118      	bne.n	8001f4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f1a:	4b7f      	ldr	r3, [pc, #508]	; (8002118 <HAL_RCC_OscConfig+0x4d0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a7e      	ldr	r2, [pc, #504]	; (8002118 <HAL_RCC_OscConfig+0x4d0>)
 8001f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f26:	f7ff fbcd 	bl	80016c4 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2e:	f7ff fbc9 	bl	80016c4 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b64      	cmp	r3, #100	; 0x64
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e120      	b.n	8002182 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f40:	4b75      	ldr	r3, [pc, #468]	; (8002118 <HAL_RCC_OscConfig+0x4d0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d106      	bne.n	8001f62 <HAL_RCC_OscConfig+0x31a>
 8001f54:	4b6f      	ldr	r3, [pc, #444]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	4a6e      	ldr	r2, [pc, #440]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f60:	e02d      	b.n	8001fbe <HAL_RCC_OscConfig+0x376>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x33c>
 8001f6a:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6e:	4a69      	ldr	r2, [pc, #420]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	6713      	str	r3, [r2, #112]	; 0x70
 8001f76:	4b67      	ldr	r3, [pc, #412]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7a:	4a66      	ldr	r2, [pc, #408]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001f7c:	f023 0304 	bic.w	r3, r3, #4
 8001f80:	6713      	str	r3, [r2, #112]	; 0x70
 8001f82:	e01c      	b.n	8001fbe <HAL_RCC_OscConfig+0x376>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b05      	cmp	r3, #5
 8001f8a:	d10c      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x35e>
 8001f8c:	4b61      	ldr	r3, [pc, #388]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f90:	4a60      	ldr	r2, [pc, #384]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6713      	str	r3, [r2, #112]	; 0x70
 8001f98:	4b5e      	ldr	r3, [pc, #376]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	4a5d      	ldr	r2, [pc, #372]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa4:	e00b      	b.n	8001fbe <HAL_RCC_OscConfig+0x376>
 8001fa6:	4b5b      	ldr	r3, [pc, #364]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001faa:	4a5a      	ldr	r2, [pc, #360]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb2:	4b58      	ldr	r3, [pc, #352]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb6:	4a57      	ldr	r2, [pc, #348]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d015      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc6:	f7ff fb7d 	bl	80016c4 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7ff fb79 	bl	80016c4 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e0ce      	b.n	8002182 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	4b4b      	ldr	r3, [pc, #300]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ee      	beq.n	8001fce <HAL_RCC_OscConfig+0x386>
 8001ff0:	e014      	b.n	800201c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fb67 	bl	80016c4 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff8:	e00a      	b.n	8002010 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffa:	f7ff fb63 	bl	80016c4 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	f241 3288 	movw	r2, #5000	; 0x1388
 8002008:	4293      	cmp	r3, r2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e0b8      	b.n	8002182 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002010:	4b40      	ldr	r3, [pc, #256]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8002012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1ee      	bne.n	8001ffa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800201c:	7dfb      	ldrb	r3, [r7, #23]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d105      	bne.n	800202e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002022:	4b3c      	ldr	r3, [pc, #240]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	4a3b      	ldr	r2, [pc, #236]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8002028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 80a4 	beq.w	8002180 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002038:	4b36      	ldr	r3, [pc, #216]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	2b08      	cmp	r3, #8
 8002042:	d06b      	beq.n	800211c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d149      	bne.n	80020e0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204c:	4b31      	ldr	r3, [pc, #196]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a30      	ldr	r2, [pc, #192]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8002052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7ff fb34 	bl	80016c4 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002060:	f7ff fb30 	bl	80016c4 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e087      	b.n	8002182 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002072:	4b28      	ldr	r3, [pc, #160]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	019b      	lsls	r3, r3, #6
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	3b01      	subs	r3, #1
 8002098:	041b      	lsls	r3, r3, #16
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	061b      	lsls	r3, r3, #24
 80020a2:	4313      	orrs	r3, r2
 80020a4:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 80020a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a18      	ldr	r2, [pc, #96]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff fb04 	bl	80016c4 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7ff fb00 	bl	80016c4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e057      	b.n	8002182 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d2:	4b10      	ldr	r3, [pc, #64]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x478>
 80020de:	e04f      	b.n	8002180 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 80020e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7ff faea 	bl	80016c4 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f4:	f7ff fae6 	bl	80016c4 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e03d      	b.n	8002182 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002106:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4ac>
 8002112:	e035      	b.n	8002180 <HAL_RCC_OscConfig+0x538>
 8002114:	40023800 	.word	0x40023800
 8002118:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_RCC_OscConfig+0x544>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d028      	beq.n	800217c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002134:	429a      	cmp	r2, r3
 8002136:	d121      	bne.n	800217c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d11a      	bne.n	800217c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800214c:	4013      	ands	r3, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002152:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002154:	4293      	cmp	r3, r2
 8002156:	d111      	bne.n	800217c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	085b      	lsrs	r3, r3, #1
 8002164:	3b01      	subs	r3, #1
 8002166:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d107      	bne.n	800217c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800

08002190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0d0      	b.n	800234a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a8:	4b6a      	ldr	r3, [pc, #424]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d910      	bls.n	80021d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	4b67      	ldr	r3, [pc, #412]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 020f 	bic.w	r2, r3, #15
 80021be:	4965      	ldr	r1, [pc, #404]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c6:	4b63      	ldr	r3, [pc, #396]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d001      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0b8      	b.n	800234a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d020      	beq.n	8002226 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f0:	4b59      	ldr	r3, [pc, #356]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	4a58      	ldr	r2, [pc, #352]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 80021f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002208:	4b53      	ldr	r3, [pc, #332]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4a52      	ldr	r2, [pc, #328]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 800220e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002212:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002214:	4b50      	ldr	r3, [pc, #320]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	494d      	ldr	r1, [pc, #308]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d040      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	4b47      	ldr	r3, [pc, #284]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d115      	bne.n	8002272 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e07f      	b.n	800234a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002252:	4b41      	ldr	r3, [pc, #260]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e073      	b.n	800234a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002262:	4b3d      	ldr	r3, [pc, #244]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e06b      	b.n	800234a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002272:	4b39      	ldr	r3, [pc, #228]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f023 0203 	bic.w	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4936      	ldr	r1, [pc, #216]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 8002280:	4313      	orrs	r3, r2
 8002282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002284:	f7ff fa1e 	bl	80016c4 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228c:	f7ff fa1a 	bl	80016c4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e053      	b.n	800234a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 020c 	and.w	r2, r3, #12
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d1eb      	bne.n	800228c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b4:	4b27      	ldr	r3, [pc, #156]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d210      	bcs.n	80022e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b24      	ldr	r3, [pc, #144]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 020f 	bic.w	r2, r3, #15
 80022ca:	4922      	ldr	r1, [pc, #136]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e032      	b.n	800234a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4916      	ldr	r1, [pc, #88]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d009      	beq.n	8002322 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	490e      	ldr	r1, [pc, #56]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002322:	f000 f821 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 8002326:	4602      	mov	r2, r0
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	490a      	ldr	r1, [pc, #40]	; (800235c <HAL_RCC_ClockConfig+0x1cc>)
 8002334:	5ccb      	ldrb	r3, [r1, r3]
 8002336:	fa22 f303 	lsr.w	r3, r2, r3
 800233a:	4a09      	ldr	r2, [pc, #36]	; (8002360 <HAL_RCC_ClockConfig+0x1d0>)
 800233c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_RCC_ClockConfig+0x1d4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff f97a 	bl	800163c <HAL_InitTick>

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40023c00 	.word	0x40023c00
 8002358:	40023800 	.word	0x40023800
 800235c:	08003d04 	.word	0x08003d04
 8002360:	20000000 	.word	0x20000000
 8002364:	20000004 	.word	0x20000004

08002368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800236c:	b090      	sub	sp, #64	; 0x40
 800236e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
 8002374:	2300      	movs	r3, #0
 8002376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002378:	2300      	movs	r3, #0
 800237a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002380:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b08      	cmp	r3, #8
 800238a:	d00d      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0x40>
 800238c:	2b08      	cmp	r3, #8
 800238e:	f200 80a1 	bhi.w	80024d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <HAL_RCC_GetSysClockFreq+0x34>
 8002396:	2b04      	cmp	r3, #4
 8002398:	d003      	beq.n	80023a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800239a:	e09b      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800239c:	4b53      	ldr	r3, [pc, #332]	; (80024ec <HAL_RCC_GetSysClockFreq+0x184>)
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023a0:	e09b      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023a2:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80023a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023a6:	e098      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023a8:	4b4f      	ldr	r3, [pc, #316]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023b0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023b2:	4b4d      	ldr	r3, [pc, #308]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d028      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023be:	4b4a      	ldr	r3, [pc, #296]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	099b      	lsrs	r3, r3, #6
 80023c4:	2200      	movs	r2, #0
 80023c6:	623b      	str	r3, [r7, #32]
 80023c8:	627a      	str	r2, [r7, #36]	; 0x24
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023d0:	2100      	movs	r1, #0
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80023d4:	fb03 f201 	mul.w	r2, r3, r1
 80023d8:	2300      	movs	r3, #0
 80023da:	fb00 f303 	mul.w	r3, r0, r3
 80023de:	4413      	add	r3, r2
 80023e0:	4a43      	ldr	r2, [pc, #268]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80023e2:	fba0 1202 	umull	r1, r2, r0, r2
 80023e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023e8:	460a      	mov	r2, r1
 80023ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80023ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ee:	4413      	add	r3, r2
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f4:	2200      	movs	r2, #0
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	61fa      	str	r2, [r7, #28]
 80023fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002402:	f7fe faef 	bl	80009e4 <__aeabi_uldivmod>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4613      	mov	r3, r2
 800240c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800240e:	e053      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002410:	4b35      	ldr	r3, [pc, #212]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	099b      	lsrs	r3, r3, #6
 8002416:	2200      	movs	r2, #0
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	617a      	str	r2, [r7, #20]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002422:	f04f 0b00 	mov.w	fp, #0
 8002426:	4652      	mov	r2, sl
 8002428:	465b      	mov	r3, fp
 800242a:	f04f 0000 	mov.w	r0, #0
 800242e:	f04f 0100 	mov.w	r1, #0
 8002432:	0159      	lsls	r1, r3, #5
 8002434:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002438:	0150      	lsls	r0, r2, #5
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	ebb2 080a 	subs.w	r8, r2, sl
 8002442:	eb63 090b 	sbc.w	r9, r3, fp
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002452:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002456:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800245a:	ebb2 0408 	subs.w	r4, r2, r8
 800245e:	eb63 0509 	sbc.w	r5, r3, r9
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	00eb      	lsls	r3, r5, #3
 800246c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002470:	00e2      	lsls	r2, r4, #3
 8002472:	4614      	mov	r4, r2
 8002474:	461d      	mov	r5, r3
 8002476:	eb14 030a 	adds.w	r3, r4, sl
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	eb45 030b 	adc.w	r3, r5, fp
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800248e:	4629      	mov	r1, r5
 8002490:	028b      	lsls	r3, r1, #10
 8002492:	4621      	mov	r1, r4
 8002494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002498:	4621      	mov	r1, r4
 800249a:	028a      	lsls	r2, r1, #10
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a2:	2200      	movs	r2, #0
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	60fa      	str	r2, [r7, #12]
 80024a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024ac:	f7fe fa9a 	bl	80009e4 <__aeabi_uldivmod>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4613      	mov	r3, r2
 80024b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	0c1b      	lsrs	r3, r3, #16
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	3301      	adds	r3, #1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80024c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024d2:	e002      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_RCC_GetSysClockFreq+0x184>)
 80024d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3740      	adds	r7, #64	; 0x40
 80024e0:	46bd      	mov	sp, r7
 80024e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800
 80024ec:	00f42400 	.word	0x00f42400
 80024f0:	017d7840 	.word	0x017d7840

080024f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_RCC_GetHCLKFreq+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000000 	.word	0x20000000

0800250c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002510:	f7ff fff0 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0a9b      	lsrs	r3, r3, #10
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4903      	ldr	r1, [pc, #12]	; (8002530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40023800 	.word	0x40023800
 8002530:	08003d14 	.word	0x08003d14

08002534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002538:	f7ff ffdc 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 800253c:	4602      	mov	r2, r0
 800253e:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	0b5b      	lsrs	r3, r3, #13
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	4903      	ldr	r1, [pc, #12]	; (8002558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800254a:	5ccb      	ldrb	r3, [r1, r3]
 800254c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002550:	4618      	mov	r0, r3
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40023800 	.word	0x40023800
 8002558:	08003d14 	.word	0x08003d14

0800255c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d012      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002584:	4b69      	ldr	r3, [pc, #420]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a68      	ldr	r2, [pc, #416]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800258e:	6093      	str	r3, [r2, #8]
 8002590:	4b66      	ldr	r3, [pc, #408]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002598:	4964      	ldr	r1, [pc, #400]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80025a6:	2301      	movs	r3, #1
 80025a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d017      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025b6:	4b5d      	ldr	r3, [pc, #372]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c4:	4959      	ldr	r1, [pc, #356]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025d4:	d101      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80025d6:	2301      	movs	r3, #1
 80025d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80025e2:	2301      	movs	r3, #1
 80025e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d017      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025f2:	4b4e      	ldr	r3, [pc, #312]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	494a      	ldr	r1, [pc, #296]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002610:	d101      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002612:	2301      	movs	r3, #1
 8002614:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800261e:	2301      	movs	r3, #1
 8002620:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800262e:	2301      	movs	r3, #1
 8002630:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 808b 	beq.w	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002640:	4b3a      	ldr	r3, [pc, #232]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	4a39      	ldr	r2, [pc, #228]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264a:	6413      	str	r3, [r2, #64]	; 0x40
 800264c:	4b37      	ldr	r3, [pc, #220]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002658:	4b35      	ldr	r3, [pc, #212]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a34      	ldr	r2, [pc, #208]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002662:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002664:	f7ff f82e 	bl	80016c4 <HAL_GetTick>
 8002668:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800266a:	e008      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266c:	f7ff f82a 	bl	80016c4 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e357      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800267e:	4b2c      	ldr	r3, [pc, #176]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800268a:	4b28      	ldr	r3, [pc, #160]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002692:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d035      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d02e      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026a8:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	4a1d      	ldr	r2, [pc, #116]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	4a1a      	ldr	r2, [pc, #104]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80026ca:	4a18      	ldr	r2, [pc, #96]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026d0:	4b16      	ldr	r3, [pc, #88]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d114      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe fff2 	bl	80016c4 <HAL_GetTick>
 80026e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e2:	e00a      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e4:	f7fe ffee 	bl	80016c4 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e319      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0ee      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002712:	d111      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002722:	400b      	ands	r3, r1
 8002724:	4901      	ldr	r1, [pc, #4]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
 800272a:	e00b      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800272c:	40023800 	.word	0x40023800
 8002730:	40007000 	.word	0x40007000
 8002734:	0ffffcff 	.word	0x0ffffcff
 8002738:	4baa      	ldr	r3, [pc, #680]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4aa9      	ldr	r2, [pc, #676]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002742:	6093      	str	r3, [r2, #8]
 8002744:	4ba7      	ldr	r3, [pc, #668]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002746:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002750:	49a4      	ldr	r1, [pc, #656]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002752:	4313      	orrs	r3, r2
 8002754:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	d010      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002762:	4ba0      	ldr	r3, [pc, #640]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002768:	4a9e      	ldr	r2, [pc, #632]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800276a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800276e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002772:	4b9c      	ldr	r3, [pc, #624]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002774:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	4999      	ldr	r1, [pc, #612]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002790:	4b94      	ldr	r3, [pc, #592]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002796:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800279e:	4991      	ldr	r1, [pc, #580]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027b2:	4b8c      	ldr	r3, [pc, #560]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027c0:	4988      	ldr	r1, [pc, #544]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027d4:	4b83      	ldr	r3, [pc, #524]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027e2:	4980      	ldr	r1, [pc, #512]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027f6:	4b7b      	ldr	r3, [pc, #492]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	4977      	ldr	r1, [pc, #476]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002818:	4b72      	ldr	r3, [pc, #456]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281e:	f023 0203 	bic.w	r2, r3, #3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	496f      	ldr	r1, [pc, #444]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800283a:	4b6a      	ldr	r3, [pc, #424]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002840:	f023 020c 	bic.w	r2, r3, #12
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002848:	4966      	ldr	r1, [pc, #408]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800285c:	4b61      	ldr	r3, [pc, #388]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286a:	495e      	ldr	r1, [pc, #376]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800287e:	4b59      	ldr	r3, [pc, #356]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002884:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288c:	4955      	ldr	r1, [pc, #340]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028a0:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ae:	494d      	ldr	r1, [pc, #308]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80028c2:	4b48      	ldr	r3, [pc, #288]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	4944      	ldr	r1, [pc, #272]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80028e4:	4b3f      	ldr	r3, [pc, #252]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f2:	493c      	ldr	r1, [pc, #240]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002906:	4b37      	ldr	r3, [pc, #220]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002914:	4933      	ldr	r1, [pc, #204]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002928:	4b2e      	ldr	r3, [pc, #184]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002936:	492b      	ldr	r1, [pc, #172]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d011      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800294a:	4b26      	ldr	r3, [pc, #152]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800294c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002950:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002958:	4922      	ldr	r1, [pc, #136]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002964:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002968:	d101      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800296a:	2301      	movs	r3, #1
 800296c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800297a:	2301      	movs	r3, #1
 800297c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800298a:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002990:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002998:	4912      	ldr	r1, [pc, #72]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029ac:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029bc:	4909      	ldr	r1, [pc, #36]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d006      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80d9 	beq.w	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029d8:	4b02      	ldr	r3, [pc, #8]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a01      	ldr	r2, [pc, #4]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029e2:	e001      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80029e4:	40023800 	.word	0x40023800
 80029e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ea:	f7fe fe6b 	bl	80016c4 <HAL_GetTick>
 80029ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029f2:	f7fe fe67 	bl	80016c4 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b64      	cmp	r3, #100	; 0x64
 80029fe:	d901      	bls.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e194      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a04:	4b6c      	ldr	r3, [pc, #432]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f0      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d021      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d11d      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a24:	4b64      	ldr	r3, [pc, #400]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a2a:	0c1b      	lsrs	r3, r3, #16
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a32:	4b61      	ldr	r3, [pc, #388]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a38:	0e1b      	lsrs	r3, r3, #24
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	019a      	lsls	r2, r3, #6
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	041b      	lsls	r3, r3, #16
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	061b      	lsls	r3, r3, #24
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	071b      	lsls	r3, r3, #28
 8002a58:	4957      	ldr	r1, [pc, #348]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a74:	d00a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d02e      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a8a:	d129      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a8c:	4b4a      	ldr	r3, [pc, #296]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a92:	0c1b      	lsrs	r3, r3, #16
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a9a:	4b47      	ldr	r3, [pc, #284]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aa0:	0f1b      	lsrs	r3, r3, #28
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	019a      	lsls	r2, r3, #6
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	041b      	lsls	r3, r3, #16
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	431a      	orrs	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	071b      	lsls	r3, r3, #28
 8002ac0:	493d      	ldr	r1, [pc, #244]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ac8:	4b3b      	ldr	r3, [pc, #236]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ace:	f023 021f 	bic.w	r2, r3, #31
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	4937      	ldr	r1, [pc, #220]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01d      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002aec:	4b32      	ldr	r3, [pc, #200]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af2:	0e1b      	lsrs	r3, r3, #24
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002afa:	4b2f      	ldr	r3, [pc, #188]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b00:	0f1b      	lsrs	r3, r3, #28
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	019a      	lsls	r2, r3, #6
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	431a      	orrs	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	061b      	lsls	r3, r3, #24
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	071b      	lsls	r3, r3, #28
 8002b20:	4925      	ldr	r1, [pc, #148]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d011      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	019a      	lsls	r2, r3, #6
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	061b      	lsls	r3, r3, #24
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	071b      	lsls	r3, r3, #28
 8002b50:	4919      	ldr	r1, [pc, #100]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b58:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a16      	ldr	r2, [pc, #88]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b64:	f7fe fdae 	bl	80016c4 <HAL_GetTick>
 8002b68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b6c:	f7fe fdaa 	bl	80016c4 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e0d7      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	f040 80cd 	bne.w	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a08      	ldr	r2, [pc, #32]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b9e:	f7fe fd91 	bl	80016c4 <HAL_GetTick>
 8002ba2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ba6:	f7fe fd8d 	bl	80016c4 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b64      	cmp	r3, #100	; 0x64
 8002bb2:	d903      	bls.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e0ba      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002bb8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bbc:	4b5e      	ldr	r3, [pc, #376]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bc8:	d0ed      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d02e      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d12a      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bf2:	4b51      	ldr	r3, [pc, #324]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c00:	4b4d      	ldr	r3, [pc, #308]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	0f1b      	lsrs	r3, r3, #28
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	019a      	lsls	r2, r3, #6
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	041b      	lsls	r3, r3, #16
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	061b      	lsls	r3, r3, #24
 8002c20:	431a      	orrs	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	071b      	lsls	r3, r3, #28
 8002c26:	4944      	ldr	r1, [pc, #272]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c2e:	4b42      	ldr	r3, [pc, #264]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	493d      	ldr	r1, [pc, #244]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d022      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c5c:	d11d      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c5e:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c64:	0e1b      	lsrs	r3, r3, #24
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c6c:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	0f1b      	lsrs	r3, r3, #28
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	019a      	lsls	r2, r3, #6
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	431a      	orrs	r2, r3
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	061b      	lsls	r3, r3, #24
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	071b      	lsls	r3, r3, #28
 8002c92:	4929      	ldr	r1, [pc, #164]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d028      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ca6:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	0e1b      	lsrs	r3, r3, #24
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cb4:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	0c1b      	lsrs	r3, r3, #16
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	019a      	lsls	r2, r3, #6
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	041b      	lsls	r3, r3, #16
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	061b      	lsls	r3, r3, #24
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	071b      	lsls	r3, r3, #28
 8002cda:	4917      	ldr	r1, [pc, #92]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	4911      	ldr	r1, [pc, #68]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002cf8:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a0e      	ldr	r2, [pc, #56]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d04:	f7fe fcde 	bl	80016c4 <HAL_GetTick>
 8002d08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d0c:	f7fe fcda 	bl	80016c4 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e007      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d2a:	d1ef      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800

08002d3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e040      	b.n	8002dd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fe f9b0 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2224      	movs	r2, #36	; 0x24
 8002d68:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0201 	bic.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f968 	bl	8003050 <UART_SetConfig>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e022      	b.n	8002dd0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fbc0 	bl	8003518 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002da6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002db6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fc47 	bl	800365c <UART_CheckIdleState>
 8002dce:	4603      	mov	r3, r0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e048      	b.n	8002e7c <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fe f962 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2224      	movs	r2, #36	; 0x24
 8002e04:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0201 	bic.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f91a 	bl	8003050 <UART_SetConfig>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e02a      	b.n	8002e7c <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 fb72 	bl	8003518 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002e52:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0208 	orr.w	r2, r2, #8
 8002e62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fbf1 	bl	800365c <UART_CheckIdleState>
 8002e7a:	4603      	mov	r3, r0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	; 0x28
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	f040 8081 	bne.w	8002fa0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_UART_Transmit+0x26>
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e079      	b.n	8002fa2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_UART_Transmit+0x38>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e072      	b.n	8002fa2 <HAL_UART_Transmit+0x11e>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2221      	movs	r2, #33	; 0x21
 8002ed0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ed2:	f7fe fbf7 	bl	80016c4 <HAL_GetTick>
 8002ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	88fa      	ldrh	r2, [r7, #6]
 8002edc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	88fa      	ldrh	r2, [r7, #6]
 8002ee4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef0:	d108      	bne.n	8002f04 <HAL_UART_Transmit+0x80>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	e003      	b.n	8002f0c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f14:	e02c      	b.n	8002f70 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fbce 	bl	80036c2 <UART_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e038      	b.n	8002fa2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	3302      	adds	r3, #2
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	e007      	b.n	8002f5e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1cc      	bne.n	8002f16 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2200      	movs	r2, #0
 8002f84:	2140      	movs	r1, #64	; 0x40
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 fb9b 	bl	80036c2 <UART_WaitOnFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e005      	b.n	8002fa2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
  }
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b08f      	sub	sp, #60	; 0x3c
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e040      	b.n	8003042 <HAL_HalfDuplex_EnableTransmitter+0x98>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2224      	movs	r2, #36	; 0x24
 8002fcc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	e853 3f00 	ldrex	r3, [r3]
 8002fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f023 030c 	bic.w	r3, r3, #12
 8002fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fee:	62ba      	str	r2, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff4:	e841 2300 	strex	r3, r2, [r1]
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e6      	bne.n	8002fce <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	e853 3f00 	ldrex	r3, [r3]
 800300c:	60bb      	str	r3, [r7, #8]
   return(result);
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f043 0308 	orr.w	r3, r3, #8
 8003014:	633b      	str	r3, [r7, #48]	; 0x30
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003022:	6979      	ldr	r1, [r7, #20]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	e841 2300 	strex	r3, r2, [r1]
 800302a:	613b      	str	r3, [r7, #16]
   return(result);
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1e6      	bne.n	8003000 <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	373c      	adds	r7, #60	; 0x3c
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4ba6      	ldr	r3, [pc, #664]	; (8003314 <UART_SetConfig+0x2c4>)
 800307c:	4013      	ands	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	6979      	ldr	r1, [r7, #20]
 8003084:	430b      	orrs	r3, r1
 8003086:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	430a      	orrs	r2, r1
 80030c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a94      	ldr	r2, [pc, #592]	; (8003318 <UART_SetConfig+0x2c8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d120      	bne.n	800310e <UART_SetConfig+0xbe>
 80030cc:	4b93      	ldr	r3, [pc, #588]	; (800331c <UART_SetConfig+0x2cc>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d816      	bhi.n	8003108 <UART_SetConfig+0xb8>
 80030da:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <UART_SetConfig+0x90>)
 80030dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e0:	080030f1 	.word	0x080030f1
 80030e4:	080030fd 	.word	0x080030fd
 80030e8:	080030f7 	.word	0x080030f7
 80030ec:	08003103 	.word	0x08003103
 80030f0:	2301      	movs	r3, #1
 80030f2:	77fb      	strb	r3, [r7, #31]
 80030f4:	e150      	b.n	8003398 <UART_SetConfig+0x348>
 80030f6:	2302      	movs	r3, #2
 80030f8:	77fb      	strb	r3, [r7, #31]
 80030fa:	e14d      	b.n	8003398 <UART_SetConfig+0x348>
 80030fc:	2304      	movs	r3, #4
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	e14a      	b.n	8003398 <UART_SetConfig+0x348>
 8003102:	2308      	movs	r3, #8
 8003104:	77fb      	strb	r3, [r7, #31]
 8003106:	e147      	b.n	8003398 <UART_SetConfig+0x348>
 8003108:	2310      	movs	r3, #16
 800310a:	77fb      	strb	r3, [r7, #31]
 800310c:	e144      	b.n	8003398 <UART_SetConfig+0x348>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a83      	ldr	r2, [pc, #524]	; (8003320 <UART_SetConfig+0x2d0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d132      	bne.n	800317e <UART_SetConfig+0x12e>
 8003118:	4b80      	ldr	r3, [pc, #512]	; (800331c <UART_SetConfig+0x2cc>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b0c      	cmp	r3, #12
 8003124:	d828      	bhi.n	8003178 <UART_SetConfig+0x128>
 8003126:	a201      	add	r2, pc, #4	; (adr r2, 800312c <UART_SetConfig+0xdc>)
 8003128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312c:	08003161 	.word	0x08003161
 8003130:	08003179 	.word	0x08003179
 8003134:	08003179 	.word	0x08003179
 8003138:	08003179 	.word	0x08003179
 800313c:	0800316d 	.word	0x0800316d
 8003140:	08003179 	.word	0x08003179
 8003144:	08003179 	.word	0x08003179
 8003148:	08003179 	.word	0x08003179
 800314c:	08003167 	.word	0x08003167
 8003150:	08003179 	.word	0x08003179
 8003154:	08003179 	.word	0x08003179
 8003158:	08003179 	.word	0x08003179
 800315c:	08003173 	.word	0x08003173
 8003160:	2300      	movs	r3, #0
 8003162:	77fb      	strb	r3, [r7, #31]
 8003164:	e118      	b.n	8003398 <UART_SetConfig+0x348>
 8003166:	2302      	movs	r3, #2
 8003168:	77fb      	strb	r3, [r7, #31]
 800316a:	e115      	b.n	8003398 <UART_SetConfig+0x348>
 800316c:	2304      	movs	r3, #4
 800316e:	77fb      	strb	r3, [r7, #31]
 8003170:	e112      	b.n	8003398 <UART_SetConfig+0x348>
 8003172:	2308      	movs	r3, #8
 8003174:	77fb      	strb	r3, [r7, #31]
 8003176:	e10f      	b.n	8003398 <UART_SetConfig+0x348>
 8003178:	2310      	movs	r3, #16
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e10c      	b.n	8003398 <UART_SetConfig+0x348>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a68      	ldr	r2, [pc, #416]	; (8003324 <UART_SetConfig+0x2d4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d120      	bne.n	80031ca <UART_SetConfig+0x17a>
 8003188:	4b64      	ldr	r3, [pc, #400]	; (800331c <UART_SetConfig+0x2cc>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003192:	2b30      	cmp	r3, #48	; 0x30
 8003194:	d013      	beq.n	80031be <UART_SetConfig+0x16e>
 8003196:	2b30      	cmp	r3, #48	; 0x30
 8003198:	d814      	bhi.n	80031c4 <UART_SetConfig+0x174>
 800319a:	2b20      	cmp	r3, #32
 800319c:	d009      	beq.n	80031b2 <UART_SetConfig+0x162>
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d810      	bhi.n	80031c4 <UART_SetConfig+0x174>
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <UART_SetConfig+0x15c>
 80031a6:	2b10      	cmp	r3, #16
 80031a8:	d006      	beq.n	80031b8 <UART_SetConfig+0x168>
 80031aa:	e00b      	b.n	80031c4 <UART_SetConfig+0x174>
 80031ac:	2300      	movs	r3, #0
 80031ae:	77fb      	strb	r3, [r7, #31]
 80031b0:	e0f2      	b.n	8003398 <UART_SetConfig+0x348>
 80031b2:	2302      	movs	r3, #2
 80031b4:	77fb      	strb	r3, [r7, #31]
 80031b6:	e0ef      	b.n	8003398 <UART_SetConfig+0x348>
 80031b8:	2304      	movs	r3, #4
 80031ba:	77fb      	strb	r3, [r7, #31]
 80031bc:	e0ec      	b.n	8003398 <UART_SetConfig+0x348>
 80031be:	2308      	movs	r3, #8
 80031c0:	77fb      	strb	r3, [r7, #31]
 80031c2:	e0e9      	b.n	8003398 <UART_SetConfig+0x348>
 80031c4:	2310      	movs	r3, #16
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e0e6      	b.n	8003398 <UART_SetConfig+0x348>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a56      	ldr	r2, [pc, #344]	; (8003328 <UART_SetConfig+0x2d8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d120      	bne.n	8003216 <UART_SetConfig+0x1c6>
 80031d4:	4b51      	ldr	r3, [pc, #324]	; (800331c <UART_SetConfig+0x2cc>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031de:	2bc0      	cmp	r3, #192	; 0xc0
 80031e0:	d013      	beq.n	800320a <UART_SetConfig+0x1ba>
 80031e2:	2bc0      	cmp	r3, #192	; 0xc0
 80031e4:	d814      	bhi.n	8003210 <UART_SetConfig+0x1c0>
 80031e6:	2b80      	cmp	r3, #128	; 0x80
 80031e8:	d009      	beq.n	80031fe <UART_SetConfig+0x1ae>
 80031ea:	2b80      	cmp	r3, #128	; 0x80
 80031ec:	d810      	bhi.n	8003210 <UART_SetConfig+0x1c0>
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <UART_SetConfig+0x1a8>
 80031f2:	2b40      	cmp	r3, #64	; 0x40
 80031f4:	d006      	beq.n	8003204 <UART_SetConfig+0x1b4>
 80031f6:	e00b      	b.n	8003210 <UART_SetConfig+0x1c0>
 80031f8:	2300      	movs	r3, #0
 80031fa:	77fb      	strb	r3, [r7, #31]
 80031fc:	e0cc      	b.n	8003398 <UART_SetConfig+0x348>
 80031fe:	2302      	movs	r3, #2
 8003200:	77fb      	strb	r3, [r7, #31]
 8003202:	e0c9      	b.n	8003398 <UART_SetConfig+0x348>
 8003204:	2304      	movs	r3, #4
 8003206:	77fb      	strb	r3, [r7, #31]
 8003208:	e0c6      	b.n	8003398 <UART_SetConfig+0x348>
 800320a:	2308      	movs	r3, #8
 800320c:	77fb      	strb	r3, [r7, #31]
 800320e:	e0c3      	b.n	8003398 <UART_SetConfig+0x348>
 8003210:	2310      	movs	r3, #16
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e0c0      	b.n	8003398 <UART_SetConfig+0x348>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a44      	ldr	r2, [pc, #272]	; (800332c <UART_SetConfig+0x2dc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d125      	bne.n	800326c <UART_SetConfig+0x21c>
 8003220:	4b3e      	ldr	r3, [pc, #248]	; (800331c <UART_SetConfig+0x2cc>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800322e:	d017      	beq.n	8003260 <UART_SetConfig+0x210>
 8003230:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003234:	d817      	bhi.n	8003266 <UART_SetConfig+0x216>
 8003236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323a:	d00b      	beq.n	8003254 <UART_SetConfig+0x204>
 800323c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003240:	d811      	bhi.n	8003266 <UART_SetConfig+0x216>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <UART_SetConfig+0x1fe>
 8003246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324a:	d006      	beq.n	800325a <UART_SetConfig+0x20a>
 800324c:	e00b      	b.n	8003266 <UART_SetConfig+0x216>
 800324e:	2300      	movs	r3, #0
 8003250:	77fb      	strb	r3, [r7, #31]
 8003252:	e0a1      	b.n	8003398 <UART_SetConfig+0x348>
 8003254:	2302      	movs	r3, #2
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e09e      	b.n	8003398 <UART_SetConfig+0x348>
 800325a:	2304      	movs	r3, #4
 800325c:	77fb      	strb	r3, [r7, #31]
 800325e:	e09b      	b.n	8003398 <UART_SetConfig+0x348>
 8003260:	2308      	movs	r3, #8
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	e098      	b.n	8003398 <UART_SetConfig+0x348>
 8003266:	2310      	movs	r3, #16
 8003268:	77fb      	strb	r3, [r7, #31]
 800326a:	e095      	b.n	8003398 <UART_SetConfig+0x348>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a2f      	ldr	r2, [pc, #188]	; (8003330 <UART_SetConfig+0x2e0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d125      	bne.n	80032c2 <UART_SetConfig+0x272>
 8003276:	4b29      	ldr	r3, [pc, #164]	; (800331c <UART_SetConfig+0x2cc>)
 8003278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003280:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003284:	d017      	beq.n	80032b6 <UART_SetConfig+0x266>
 8003286:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800328a:	d817      	bhi.n	80032bc <UART_SetConfig+0x26c>
 800328c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003290:	d00b      	beq.n	80032aa <UART_SetConfig+0x25a>
 8003292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003296:	d811      	bhi.n	80032bc <UART_SetConfig+0x26c>
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <UART_SetConfig+0x254>
 800329c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a0:	d006      	beq.n	80032b0 <UART_SetConfig+0x260>
 80032a2:	e00b      	b.n	80032bc <UART_SetConfig+0x26c>
 80032a4:	2301      	movs	r3, #1
 80032a6:	77fb      	strb	r3, [r7, #31]
 80032a8:	e076      	b.n	8003398 <UART_SetConfig+0x348>
 80032aa:	2302      	movs	r3, #2
 80032ac:	77fb      	strb	r3, [r7, #31]
 80032ae:	e073      	b.n	8003398 <UART_SetConfig+0x348>
 80032b0:	2304      	movs	r3, #4
 80032b2:	77fb      	strb	r3, [r7, #31]
 80032b4:	e070      	b.n	8003398 <UART_SetConfig+0x348>
 80032b6:	2308      	movs	r3, #8
 80032b8:	77fb      	strb	r3, [r7, #31]
 80032ba:	e06d      	b.n	8003398 <UART_SetConfig+0x348>
 80032bc:	2310      	movs	r3, #16
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	e06a      	b.n	8003398 <UART_SetConfig+0x348>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <UART_SetConfig+0x2e4>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d138      	bne.n	800333e <UART_SetConfig+0x2ee>
 80032cc:	4b13      	ldr	r3, [pc, #76]	; (800331c <UART_SetConfig+0x2cc>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032da:	d017      	beq.n	800330c <UART_SetConfig+0x2bc>
 80032dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032e0:	d82a      	bhi.n	8003338 <UART_SetConfig+0x2e8>
 80032e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e6:	d00b      	beq.n	8003300 <UART_SetConfig+0x2b0>
 80032e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ec:	d824      	bhi.n	8003338 <UART_SetConfig+0x2e8>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <UART_SetConfig+0x2aa>
 80032f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f6:	d006      	beq.n	8003306 <UART_SetConfig+0x2b6>
 80032f8:	e01e      	b.n	8003338 <UART_SetConfig+0x2e8>
 80032fa:	2300      	movs	r3, #0
 80032fc:	77fb      	strb	r3, [r7, #31]
 80032fe:	e04b      	b.n	8003398 <UART_SetConfig+0x348>
 8003300:	2302      	movs	r3, #2
 8003302:	77fb      	strb	r3, [r7, #31]
 8003304:	e048      	b.n	8003398 <UART_SetConfig+0x348>
 8003306:	2304      	movs	r3, #4
 8003308:	77fb      	strb	r3, [r7, #31]
 800330a:	e045      	b.n	8003398 <UART_SetConfig+0x348>
 800330c:	2308      	movs	r3, #8
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	e042      	b.n	8003398 <UART_SetConfig+0x348>
 8003312:	bf00      	nop
 8003314:	efff69f3 	.word	0xefff69f3
 8003318:	40011000 	.word	0x40011000
 800331c:	40023800 	.word	0x40023800
 8003320:	40004400 	.word	0x40004400
 8003324:	40004800 	.word	0x40004800
 8003328:	40004c00 	.word	0x40004c00
 800332c:	40005000 	.word	0x40005000
 8003330:	40011400 	.word	0x40011400
 8003334:	40007800 	.word	0x40007800
 8003338:	2310      	movs	r3, #16
 800333a:	77fb      	strb	r3, [r7, #31]
 800333c:	e02c      	b.n	8003398 <UART_SetConfig+0x348>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a72      	ldr	r2, [pc, #456]	; (800350c <UART_SetConfig+0x4bc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d125      	bne.n	8003394 <UART_SetConfig+0x344>
 8003348:	4b71      	ldr	r3, [pc, #452]	; (8003510 <UART_SetConfig+0x4c0>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003352:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003356:	d017      	beq.n	8003388 <UART_SetConfig+0x338>
 8003358:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800335c:	d817      	bhi.n	800338e <UART_SetConfig+0x33e>
 800335e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003362:	d00b      	beq.n	800337c <UART_SetConfig+0x32c>
 8003364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003368:	d811      	bhi.n	800338e <UART_SetConfig+0x33e>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <UART_SetConfig+0x326>
 800336e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003372:	d006      	beq.n	8003382 <UART_SetConfig+0x332>
 8003374:	e00b      	b.n	800338e <UART_SetConfig+0x33e>
 8003376:	2300      	movs	r3, #0
 8003378:	77fb      	strb	r3, [r7, #31]
 800337a:	e00d      	b.n	8003398 <UART_SetConfig+0x348>
 800337c:	2302      	movs	r3, #2
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e00a      	b.n	8003398 <UART_SetConfig+0x348>
 8003382:	2304      	movs	r3, #4
 8003384:	77fb      	strb	r3, [r7, #31]
 8003386:	e007      	b.n	8003398 <UART_SetConfig+0x348>
 8003388:	2308      	movs	r3, #8
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e004      	b.n	8003398 <UART_SetConfig+0x348>
 800338e:	2310      	movs	r3, #16
 8003390:	77fb      	strb	r3, [r7, #31]
 8003392:	e001      	b.n	8003398 <UART_SetConfig+0x348>
 8003394:	2310      	movs	r3, #16
 8003396:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a0:	d15b      	bne.n	800345a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80033a2:	7ffb      	ldrb	r3, [r7, #31]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d828      	bhi.n	80033fa <UART_SetConfig+0x3aa>
 80033a8:	a201      	add	r2, pc, #4	; (adr r2, 80033b0 <UART_SetConfig+0x360>)
 80033aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ae:	bf00      	nop
 80033b0:	080033d5 	.word	0x080033d5
 80033b4:	080033dd 	.word	0x080033dd
 80033b8:	080033e5 	.word	0x080033e5
 80033bc:	080033fb 	.word	0x080033fb
 80033c0:	080033eb 	.word	0x080033eb
 80033c4:	080033fb 	.word	0x080033fb
 80033c8:	080033fb 	.word	0x080033fb
 80033cc:	080033fb 	.word	0x080033fb
 80033d0:	080033f3 	.word	0x080033f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d4:	f7ff f89a 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 80033d8:	61b8      	str	r0, [r7, #24]
        break;
 80033da:	e013      	b.n	8003404 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033dc:	f7ff f8aa 	bl	8002534 <HAL_RCC_GetPCLK2Freq>
 80033e0:	61b8      	str	r0, [r7, #24]
        break;
 80033e2:	e00f      	b.n	8003404 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e4:	4b4b      	ldr	r3, [pc, #300]	; (8003514 <UART_SetConfig+0x4c4>)
 80033e6:	61bb      	str	r3, [r7, #24]
        break;
 80033e8:	e00c      	b.n	8003404 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ea:	f7fe ffbd 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 80033ee:	61b8      	str	r0, [r7, #24]
        break;
 80033f0:	e008      	b.n	8003404 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033f6:	61bb      	str	r3, [r7, #24]
        break;
 80033f8:	e004      	b.n	8003404 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	77bb      	strb	r3, [r7, #30]
        break;
 8003402:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d074      	beq.n	80034f4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	005a      	lsls	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	441a      	add	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	fbb2 f3f3 	udiv	r3, r2, r3
 800341e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2b0f      	cmp	r3, #15
 8003424:	d916      	bls.n	8003454 <UART_SetConfig+0x404>
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342c:	d212      	bcs.n	8003454 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	b29b      	uxth	r3, r3
 8003432:	f023 030f 	bic.w	r3, r3, #15
 8003436:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	085b      	lsrs	r3, r3, #1
 800343c:	b29b      	uxth	r3, r3
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	b29a      	uxth	r2, r3
 8003444:	89fb      	ldrh	r3, [r7, #14]
 8003446:	4313      	orrs	r3, r2
 8003448:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	89fa      	ldrh	r2, [r7, #14]
 8003450:	60da      	str	r2, [r3, #12]
 8003452:	e04f      	b.n	80034f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	77bb      	strb	r3, [r7, #30]
 8003458:	e04c      	b.n	80034f4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800345a:	7ffb      	ldrb	r3, [r7, #31]
 800345c:	2b08      	cmp	r3, #8
 800345e:	d828      	bhi.n	80034b2 <UART_SetConfig+0x462>
 8003460:	a201      	add	r2, pc, #4	; (adr r2, 8003468 <UART_SetConfig+0x418>)
 8003462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003466:	bf00      	nop
 8003468:	0800348d 	.word	0x0800348d
 800346c:	08003495 	.word	0x08003495
 8003470:	0800349d 	.word	0x0800349d
 8003474:	080034b3 	.word	0x080034b3
 8003478:	080034a3 	.word	0x080034a3
 800347c:	080034b3 	.word	0x080034b3
 8003480:	080034b3 	.word	0x080034b3
 8003484:	080034b3 	.word	0x080034b3
 8003488:	080034ab 	.word	0x080034ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800348c:	f7ff f83e 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8003490:	61b8      	str	r0, [r7, #24]
        break;
 8003492:	e013      	b.n	80034bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003494:	f7ff f84e 	bl	8002534 <HAL_RCC_GetPCLK2Freq>
 8003498:	61b8      	str	r0, [r7, #24]
        break;
 800349a:	e00f      	b.n	80034bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800349c:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <UART_SetConfig+0x4c4>)
 800349e:	61bb      	str	r3, [r7, #24]
        break;
 80034a0:	e00c      	b.n	80034bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034a2:	f7fe ff61 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 80034a6:	61b8      	str	r0, [r7, #24]
        break;
 80034a8:	e008      	b.n	80034bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ae:	61bb      	str	r3, [r7, #24]
        break;
 80034b0:	e004      	b.n	80034bc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	77bb      	strb	r3, [r7, #30]
        break;
 80034ba:	bf00      	nop
    }

    if (pclk != 0U)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d018      	beq.n	80034f4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	085a      	lsrs	r2, r3, #1
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	441a      	add	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	2b0f      	cmp	r3, #15
 80034da:	d909      	bls.n	80034f0 <UART_SetConfig+0x4a0>
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e2:	d205      	bcs.n	80034f0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	e001      	b.n	80034f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003500:	7fbb      	ldrb	r3, [r7, #30]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40007c00 	.word	0x40007c00
 8003510:	40023800 	.word	0x40023800
 8003514:	00f42400 	.word	0x00f42400

08003518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01a      	beq.n	800362e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003616:	d10a      	bne.n	800362e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
  }
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af02      	add	r7, sp, #8
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800366c:	f7fe f82a 	bl	80016c4 <HAL_GetTick>
 8003670:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b08      	cmp	r3, #8
 800367e:	d10e      	bne.n	800369e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f817 	bl	80036c2 <UART_WaitOnFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e00d      	b.n	80036ba <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b09c      	sub	sp, #112	; 0x70
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	4613      	mov	r3, r2
 80036d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d2:	e0a5      	b.n	8003820 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036da:	f000 80a1 	beq.w	8003820 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036de:	f7fd fff1 	bl	80016c4 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80036ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d13e      	bne.n	8003772 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003704:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003708:	667b      	str	r3, [r7, #100]	; 0x64
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003712:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003714:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003718:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e6      	bne.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3308      	adds	r3, #8
 800372c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	663b      	str	r3, [r7, #96]	; 0x60
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3308      	adds	r3, #8
 8003744:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003746:	64ba      	str	r2, [r7, #72]	; 0x48
 8003748:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800374c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e5      	bne.n	8003726 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e067      	b.n	8003842 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d04f      	beq.n	8003820 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800378a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800378e:	d147      	bne.n	8003820 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003798:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	e853 3f00 	ldrex	r3, [r3]
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
 80037ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037c0:	e841 2300 	strex	r3, r2, [r1]
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e6      	bne.n	800379a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3308      	adds	r3, #8
 80037d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	613b      	str	r3, [r7, #16]
   return(result);
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3308      	adds	r3, #8
 80037ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037ec:	623a      	str	r2, [r7, #32]
 80037ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	69f9      	ldr	r1, [r7, #28]
 80037f2:	6a3a      	ldr	r2, [r7, #32]
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e5      	bne.n	80037cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2220      	movs	r2, #32
 800380a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e010      	b.n	8003842 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4013      	ands	r3, r2
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	429a      	cmp	r2, r3
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	461a      	mov	r2, r3
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	429a      	cmp	r2, r3
 800383c:	f43f af4a 	beq.w	80036d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3770      	adds	r7, #112	; 0x70
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <__errno>:
 800384c:	4b01      	ldr	r3, [pc, #4]	; (8003854 <__errno+0x8>)
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	2000000c 	.word	0x2000000c

08003858 <__libc_init_array>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	4d0d      	ldr	r5, [pc, #52]	; (8003890 <__libc_init_array+0x38>)
 800385c:	4c0d      	ldr	r4, [pc, #52]	; (8003894 <__libc_init_array+0x3c>)
 800385e:	1b64      	subs	r4, r4, r5
 8003860:	10a4      	asrs	r4, r4, #2
 8003862:	2600      	movs	r6, #0
 8003864:	42a6      	cmp	r6, r4
 8003866:	d109      	bne.n	800387c <__libc_init_array+0x24>
 8003868:	4d0b      	ldr	r5, [pc, #44]	; (8003898 <__libc_init_array+0x40>)
 800386a:	4c0c      	ldr	r4, [pc, #48]	; (800389c <__libc_init_array+0x44>)
 800386c:	f000 f93c 	bl	8003ae8 <_init>
 8003870:	1b64      	subs	r4, r4, r5
 8003872:	10a4      	asrs	r4, r4, #2
 8003874:	2600      	movs	r6, #0
 8003876:	42a6      	cmp	r6, r4
 8003878:	d105      	bne.n	8003886 <__libc_init_array+0x2e>
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003880:	4798      	blx	r3
 8003882:	3601      	adds	r6, #1
 8003884:	e7ee      	b.n	8003864 <__libc_init_array+0xc>
 8003886:	f855 3b04 	ldr.w	r3, [r5], #4
 800388a:	4798      	blx	r3
 800388c:	3601      	adds	r6, #1
 800388e:	e7f2      	b.n	8003876 <__libc_init_array+0x1e>
 8003890:	08003d24 	.word	0x08003d24
 8003894:	08003d24 	.word	0x08003d24
 8003898:	08003d24 	.word	0x08003d24
 800389c:	08003d28 	.word	0x08003d28

080038a0 <malloc>:
 80038a0:	4b02      	ldr	r3, [pc, #8]	; (80038ac <malloc+0xc>)
 80038a2:	4601      	mov	r1, r0
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	f000 b88d 	b.w	80039c4 <_malloc_r>
 80038aa:	bf00      	nop
 80038ac:	2000000c 	.word	0x2000000c

080038b0 <free>:
 80038b0:	4b02      	ldr	r3, [pc, #8]	; (80038bc <free+0xc>)
 80038b2:	4601      	mov	r1, r0
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	f000 b819 	b.w	80038ec <_free_r>
 80038ba:	bf00      	nop
 80038bc:	2000000c 	.word	0x2000000c

080038c0 <memcpy>:
 80038c0:	440a      	add	r2, r1
 80038c2:	4291      	cmp	r1, r2
 80038c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80038c8:	d100      	bne.n	80038cc <memcpy+0xc>
 80038ca:	4770      	bx	lr
 80038cc:	b510      	push	{r4, lr}
 80038ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038d6:	4291      	cmp	r1, r2
 80038d8:	d1f9      	bne.n	80038ce <memcpy+0xe>
 80038da:	bd10      	pop	{r4, pc}

080038dc <memset>:
 80038dc:	4402      	add	r2, r0
 80038de:	4603      	mov	r3, r0
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d100      	bne.n	80038e6 <memset+0xa>
 80038e4:	4770      	bx	lr
 80038e6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ea:	e7f9      	b.n	80038e0 <memset+0x4>

080038ec <_free_r>:
 80038ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038ee:	2900      	cmp	r1, #0
 80038f0:	d044      	beq.n	800397c <_free_r+0x90>
 80038f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038f6:	9001      	str	r0, [sp, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f1a1 0404 	sub.w	r4, r1, #4
 80038fe:	bfb8      	it	lt
 8003900:	18e4      	addlt	r4, r4, r3
 8003902:	f000 f8e3 	bl	8003acc <__malloc_lock>
 8003906:	4a1e      	ldr	r2, [pc, #120]	; (8003980 <_free_r+0x94>)
 8003908:	9801      	ldr	r0, [sp, #4]
 800390a:	6813      	ldr	r3, [r2, #0]
 800390c:	b933      	cbnz	r3, 800391c <_free_r+0x30>
 800390e:	6063      	str	r3, [r4, #4]
 8003910:	6014      	str	r4, [r2, #0]
 8003912:	b003      	add	sp, #12
 8003914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003918:	f000 b8de 	b.w	8003ad8 <__malloc_unlock>
 800391c:	42a3      	cmp	r3, r4
 800391e:	d908      	bls.n	8003932 <_free_r+0x46>
 8003920:	6825      	ldr	r5, [r4, #0]
 8003922:	1961      	adds	r1, r4, r5
 8003924:	428b      	cmp	r3, r1
 8003926:	bf01      	itttt	eq
 8003928:	6819      	ldreq	r1, [r3, #0]
 800392a:	685b      	ldreq	r3, [r3, #4]
 800392c:	1949      	addeq	r1, r1, r5
 800392e:	6021      	streq	r1, [r4, #0]
 8003930:	e7ed      	b.n	800390e <_free_r+0x22>
 8003932:	461a      	mov	r2, r3
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	b10b      	cbz	r3, 800393c <_free_r+0x50>
 8003938:	42a3      	cmp	r3, r4
 800393a:	d9fa      	bls.n	8003932 <_free_r+0x46>
 800393c:	6811      	ldr	r1, [r2, #0]
 800393e:	1855      	adds	r5, r2, r1
 8003940:	42a5      	cmp	r5, r4
 8003942:	d10b      	bne.n	800395c <_free_r+0x70>
 8003944:	6824      	ldr	r4, [r4, #0]
 8003946:	4421      	add	r1, r4
 8003948:	1854      	adds	r4, r2, r1
 800394a:	42a3      	cmp	r3, r4
 800394c:	6011      	str	r1, [r2, #0]
 800394e:	d1e0      	bne.n	8003912 <_free_r+0x26>
 8003950:	681c      	ldr	r4, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	6053      	str	r3, [r2, #4]
 8003956:	4421      	add	r1, r4
 8003958:	6011      	str	r1, [r2, #0]
 800395a:	e7da      	b.n	8003912 <_free_r+0x26>
 800395c:	d902      	bls.n	8003964 <_free_r+0x78>
 800395e:	230c      	movs	r3, #12
 8003960:	6003      	str	r3, [r0, #0]
 8003962:	e7d6      	b.n	8003912 <_free_r+0x26>
 8003964:	6825      	ldr	r5, [r4, #0]
 8003966:	1961      	adds	r1, r4, r5
 8003968:	428b      	cmp	r3, r1
 800396a:	bf04      	itt	eq
 800396c:	6819      	ldreq	r1, [r3, #0]
 800396e:	685b      	ldreq	r3, [r3, #4]
 8003970:	6063      	str	r3, [r4, #4]
 8003972:	bf04      	itt	eq
 8003974:	1949      	addeq	r1, r1, r5
 8003976:	6021      	streq	r1, [r4, #0]
 8003978:	6054      	str	r4, [r2, #4]
 800397a:	e7ca      	b.n	8003912 <_free_r+0x26>
 800397c:	b003      	add	sp, #12
 800397e:	bd30      	pop	{r4, r5, pc}
 8003980:	200001a0 	.word	0x200001a0

08003984 <sbrk_aligned>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	4e0e      	ldr	r6, [pc, #56]	; (80039c0 <sbrk_aligned+0x3c>)
 8003988:	460c      	mov	r4, r1
 800398a:	6831      	ldr	r1, [r6, #0]
 800398c:	4605      	mov	r5, r0
 800398e:	b911      	cbnz	r1, 8003996 <sbrk_aligned+0x12>
 8003990:	f000 f88c 	bl	8003aac <_sbrk_r>
 8003994:	6030      	str	r0, [r6, #0]
 8003996:	4621      	mov	r1, r4
 8003998:	4628      	mov	r0, r5
 800399a:	f000 f887 	bl	8003aac <_sbrk_r>
 800399e:	1c43      	adds	r3, r0, #1
 80039a0:	d00a      	beq.n	80039b8 <sbrk_aligned+0x34>
 80039a2:	1cc4      	adds	r4, r0, #3
 80039a4:	f024 0403 	bic.w	r4, r4, #3
 80039a8:	42a0      	cmp	r0, r4
 80039aa:	d007      	beq.n	80039bc <sbrk_aligned+0x38>
 80039ac:	1a21      	subs	r1, r4, r0
 80039ae:	4628      	mov	r0, r5
 80039b0:	f000 f87c 	bl	8003aac <_sbrk_r>
 80039b4:	3001      	adds	r0, #1
 80039b6:	d101      	bne.n	80039bc <sbrk_aligned+0x38>
 80039b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80039bc:	4620      	mov	r0, r4
 80039be:	bd70      	pop	{r4, r5, r6, pc}
 80039c0:	200001a4 	.word	0x200001a4

080039c4 <_malloc_r>:
 80039c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c8:	1ccd      	adds	r5, r1, #3
 80039ca:	f025 0503 	bic.w	r5, r5, #3
 80039ce:	3508      	adds	r5, #8
 80039d0:	2d0c      	cmp	r5, #12
 80039d2:	bf38      	it	cc
 80039d4:	250c      	movcc	r5, #12
 80039d6:	2d00      	cmp	r5, #0
 80039d8:	4607      	mov	r7, r0
 80039da:	db01      	blt.n	80039e0 <_malloc_r+0x1c>
 80039dc:	42a9      	cmp	r1, r5
 80039de:	d905      	bls.n	80039ec <_malloc_r+0x28>
 80039e0:	230c      	movs	r3, #12
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	2600      	movs	r6, #0
 80039e6:	4630      	mov	r0, r6
 80039e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039ec:	4e2e      	ldr	r6, [pc, #184]	; (8003aa8 <_malloc_r+0xe4>)
 80039ee:	f000 f86d 	bl	8003acc <__malloc_lock>
 80039f2:	6833      	ldr	r3, [r6, #0]
 80039f4:	461c      	mov	r4, r3
 80039f6:	bb34      	cbnz	r4, 8003a46 <_malloc_r+0x82>
 80039f8:	4629      	mov	r1, r5
 80039fa:	4638      	mov	r0, r7
 80039fc:	f7ff ffc2 	bl	8003984 <sbrk_aligned>
 8003a00:	1c43      	adds	r3, r0, #1
 8003a02:	4604      	mov	r4, r0
 8003a04:	d14d      	bne.n	8003aa2 <_malloc_r+0xde>
 8003a06:	6834      	ldr	r4, [r6, #0]
 8003a08:	4626      	mov	r6, r4
 8003a0a:	2e00      	cmp	r6, #0
 8003a0c:	d140      	bne.n	8003a90 <_malloc_r+0xcc>
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	4631      	mov	r1, r6
 8003a12:	4638      	mov	r0, r7
 8003a14:	eb04 0803 	add.w	r8, r4, r3
 8003a18:	f000 f848 	bl	8003aac <_sbrk_r>
 8003a1c:	4580      	cmp	r8, r0
 8003a1e:	d13a      	bne.n	8003a96 <_malloc_r+0xd2>
 8003a20:	6821      	ldr	r1, [r4, #0]
 8003a22:	3503      	adds	r5, #3
 8003a24:	1a6d      	subs	r5, r5, r1
 8003a26:	f025 0503 	bic.w	r5, r5, #3
 8003a2a:	3508      	adds	r5, #8
 8003a2c:	2d0c      	cmp	r5, #12
 8003a2e:	bf38      	it	cc
 8003a30:	250c      	movcc	r5, #12
 8003a32:	4629      	mov	r1, r5
 8003a34:	4638      	mov	r0, r7
 8003a36:	f7ff ffa5 	bl	8003984 <sbrk_aligned>
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	d02b      	beq.n	8003a96 <_malloc_r+0xd2>
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	442b      	add	r3, r5
 8003a42:	6023      	str	r3, [r4, #0]
 8003a44:	e00e      	b.n	8003a64 <_malloc_r+0xa0>
 8003a46:	6822      	ldr	r2, [r4, #0]
 8003a48:	1b52      	subs	r2, r2, r5
 8003a4a:	d41e      	bmi.n	8003a8a <_malloc_r+0xc6>
 8003a4c:	2a0b      	cmp	r2, #11
 8003a4e:	d916      	bls.n	8003a7e <_malloc_r+0xba>
 8003a50:	1961      	adds	r1, r4, r5
 8003a52:	42a3      	cmp	r3, r4
 8003a54:	6025      	str	r5, [r4, #0]
 8003a56:	bf18      	it	ne
 8003a58:	6059      	strne	r1, [r3, #4]
 8003a5a:	6863      	ldr	r3, [r4, #4]
 8003a5c:	bf08      	it	eq
 8003a5e:	6031      	streq	r1, [r6, #0]
 8003a60:	5162      	str	r2, [r4, r5]
 8003a62:	604b      	str	r3, [r1, #4]
 8003a64:	4638      	mov	r0, r7
 8003a66:	f104 060b 	add.w	r6, r4, #11
 8003a6a:	f000 f835 	bl	8003ad8 <__malloc_unlock>
 8003a6e:	f026 0607 	bic.w	r6, r6, #7
 8003a72:	1d23      	adds	r3, r4, #4
 8003a74:	1af2      	subs	r2, r6, r3
 8003a76:	d0b6      	beq.n	80039e6 <_malloc_r+0x22>
 8003a78:	1b9b      	subs	r3, r3, r6
 8003a7a:	50a3      	str	r3, [r4, r2]
 8003a7c:	e7b3      	b.n	80039e6 <_malloc_r+0x22>
 8003a7e:	6862      	ldr	r2, [r4, #4]
 8003a80:	42a3      	cmp	r3, r4
 8003a82:	bf0c      	ite	eq
 8003a84:	6032      	streq	r2, [r6, #0]
 8003a86:	605a      	strne	r2, [r3, #4]
 8003a88:	e7ec      	b.n	8003a64 <_malloc_r+0xa0>
 8003a8a:	4623      	mov	r3, r4
 8003a8c:	6864      	ldr	r4, [r4, #4]
 8003a8e:	e7b2      	b.n	80039f6 <_malloc_r+0x32>
 8003a90:	4634      	mov	r4, r6
 8003a92:	6876      	ldr	r6, [r6, #4]
 8003a94:	e7b9      	b.n	8003a0a <_malloc_r+0x46>
 8003a96:	230c      	movs	r3, #12
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	4638      	mov	r0, r7
 8003a9c:	f000 f81c 	bl	8003ad8 <__malloc_unlock>
 8003aa0:	e7a1      	b.n	80039e6 <_malloc_r+0x22>
 8003aa2:	6025      	str	r5, [r4, #0]
 8003aa4:	e7de      	b.n	8003a64 <_malloc_r+0xa0>
 8003aa6:	bf00      	nop
 8003aa8:	200001a0 	.word	0x200001a0

08003aac <_sbrk_r>:
 8003aac:	b538      	push	{r3, r4, r5, lr}
 8003aae:	4d06      	ldr	r5, [pc, #24]	; (8003ac8 <_sbrk_r+0x1c>)
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	602b      	str	r3, [r5, #0]
 8003ab8:	f7fd fa5c 	bl	8000f74 <_sbrk>
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d102      	bne.n	8003ac6 <_sbrk_r+0x1a>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	b103      	cbz	r3, 8003ac6 <_sbrk_r+0x1a>
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
 8003ac8:	200001a8 	.word	0x200001a8

08003acc <__malloc_lock>:
 8003acc:	4801      	ldr	r0, [pc, #4]	; (8003ad4 <__malloc_lock+0x8>)
 8003ace:	f000 b809 	b.w	8003ae4 <__retarget_lock_acquire_recursive>
 8003ad2:	bf00      	nop
 8003ad4:	200001ac 	.word	0x200001ac

08003ad8 <__malloc_unlock>:
 8003ad8:	4801      	ldr	r0, [pc, #4]	; (8003ae0 <__malloc_unlock+0x8>)
 8003ada:	f000 b804 	b.w	8003ae6 <__retarget_lock_release_recursive>
 8003ade:	bf00      	nop
 8003ae0:	200001ac 	.word	0x200001ac

08003ae4 <__retarget_lock_acquire_recursive>:
 8003ae4:	4770      	bx	lr

08003ae6 <__retarget_lock_release_recursive>:
 8003ae6:	4770      	bx	lr

08003ae8 <_init>:
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aea:	bf00      	nop
 8003aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aee:	bc08      	pop	{r3}
 8003af0:	469e      	mov	lr, r3
 8003af2:	4770      	bx	lr

08003af4 <_fini>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	bf00      	nop
 8003af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afa:	bc08      	pop	{r3}
 8003afc:	469e      	mov	lr, r3
 8003afe:	4770      	bx	lr
