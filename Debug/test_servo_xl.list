
test_servo_xl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  080048c8  080048c8  000148c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b88  08004b88  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b88  08004b88  00014b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b90  08004b90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b90  08004b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  08004c08  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08004c08  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab83  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a78  00000000  00000000  0002ac23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0002c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000740  00000000  00000000  0002cea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002638f  00000000  00000000  0002d5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b87f  00000000  00000000  00053977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7214  00000000  00000000  0005f1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014640a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002808  00000000  00000000  0014645c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080048b0 	.word	0x080048b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080048b0 	.word	0x080048b0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000aa0:	f000 b974 	b.w	8000d8c <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	468e      	mov	lr, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14d      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4694      	mov	ip, r2
 8000ace:	d969      	bls.n	8000ba4 <__udivmoddi4+0xe8>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b152      	cbz	r2, 8000aec <__udivmoddi4+0x30>
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	f1c2 0120 	rsb	r1, r2, #32
 8000ade:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aea:	4094      	lsls	r4, r2
 8000aec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af0:	0c21      	lsrs	r1, r4, #16
 8000af2:	fbbe f6f8 	udiv	r6, lr, r8
 8000af6:	fa1f f78c 	uxth.w	r7, ip
 8000afa:	fb08 e316 	mls	r3, r8, r6, lr
 8000afe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b02:	fb06 f107 	mul.w	r1, r6, r7
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b12:	f080 811f 	bcs.w	8000d54 <__udivmoddi4+0x298>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 811c 	bls.w	8000d54 <__udivmoddi4+0x298>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a5b      	subs	r3, r3, r1
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b28:	fb08 3310 	mls	r3, r8, r0, r3
 8000b2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b30:	fb00 f707 	mul.w	r7, r0, r7
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x92>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b40:	f080 810a 	bcs.w	8000d58 <__udivmoddi4+0x29c>
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	f240 8107 	bls.w	8000d58 <__udivmoddi4+0x29c>
 8000b4a:	4464      	add	r4, ip
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b52:	1be4      	subs	r4, r4, r7
 8000b54:	2600      	movs	r6, #0
 8000b56:	b11d      	cbz	r5, 8000b60 <__udivmoddi4+0xa4>
 8000b58:	40d4      	lsrs	r4, r2
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b60:	4631      	mov	r1, r6
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d909      	bls.n	8000b7e <__udivmoddi4+0xc2>
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	f000 80ef 	beq.w	8000d4e <__udivmoddi4+0x292>
 8000b70:	2600      	movs	r6, #0
 8000b72:	e9c5 0100 	strd	r0, r1, [r5]
 8000b76:	4630      	mov	r0, r6
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	fab3 f683 	clz	r6, r3
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d14a      	bne.n	8000c1c <__udivmoddi4+0x160>
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xd4>
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	f200 80f9 	bhi.w	8000d82 <__udivmoddi4+0x2c6>
 8000b90:	1a84      	subs	r4, r0, r2
 8000b92:	eb61 0303 	sbc.w	r3, r1, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	469e      	mov	lr, r3
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d0e0      	beq.n	8000b60 <__udivmoddi4+0xa4>
 8000b9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ba2:	e7dd      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000ba4:	b902      	cbnz	r2, 8000ba8 <__udivmoddi4+0xec>
 8000ba6:	deff      	udf	#255	; 0xff
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	f040 8092 	bne.w	8000cd6 <__udivmoddi4+0x21a>
 8000bb2:	eba1 010c 	sub.w	r1, r1, ip
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2601      	movs	r6, #1
 8000bc0:	0c20      	lsrs	r0, r4, #16
 8000bc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bce:	fb0e f003 	mul.w	r0, lr, r3
 8000bd2:	4288      	cmp	r0, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x12c>
 8000bd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bda:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x12a>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2c0>
 8000be6:	4643      	mov	r3, r8
 8000be8:	1a09      	subs	r1, r1, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x156>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x154>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2ca>
 8000c10:	4608      	mov	r0, r1
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c1a:	e79c      	b.n	8000b56 <__udivmoddi4+0x9a>
 8000c1c:	f1c6 0720 	rsb	r7, r6, #32
 8000c20:	40b3      	lsls	r3, r6
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c32:	431c      	orrs	r4, r3
 8000c34:	40f9      	lsrs	r1, r7
 8000c36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c42:	0c20      	lsrs	r0, r4, #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fb09 1118 	mls	r1, r9, r8, r1
 8000c4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c50:	fb08 f00e 	mul.w	r0, r8, lr
 8000c54:	4288      	cmp	r0, r1
 8000c56:	fa02 f206 	lsl.w	r2, r2, r6
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b8>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2bc>
 8000c68:	4288      	cmp	r0, r1
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2bc>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4461      	add	r1, ip
 8000c74:	1a09      	subs	r1, r1, r0
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c88:	458e      	cmp	lr, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1e2>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2b4>
 8000c96:	458e      	cmp	lr, r1
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2b4>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ca6:	eba1 010e 	sub.w	r1, r1, lr
 8000caa:	42a1      	cmp	r1, r4
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46a6      	mov	lr, r4
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x2a4>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x2a0>
 8000cb4:	b15d      	cbz	r5, 8000cce <__udivmoddi4+0x212>
 8000cb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cba:	eb61 010e 	sbc.w	r1, r1, lr
 8000cbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000cc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cc6:	40f1      	lsrs	r1, r6
 8000cc8:	431f      	orrs	r7, r3
 8000cca:	e9c5 7100 	strd	r7, r1, [r5]
 8000cce:	2600      	movs	r6, #0
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	40d8      	lsrs	r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	4301      	orrs	r1, r0
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cf4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cf8:	0c0b      	lsrs	r3, r1, #16
 8000cfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000d02:	429e      	cmp	r6, r3
 8000d04:	fa04 f402 	lsl.w	r4, r4, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x260>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b8>
 8000d14:	429e      	cmp	r6, r3
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b8>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	b289      	uxth	r1, r1
 8000d20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d24:	fb07 3316 	mls	r3, r7, r6, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x28a>
 8000d34:	eb1c 0101 	adds.w	r1, ip, r1
 8000d38:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d42:	3e02      	subs	r6, #2
 8000d44:	4461      	add	r1, ip
 8000d46:	1ac9      	subs	r1, r1, r3
 8000d48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0x104>
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e705      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e3      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6f8      	b.n	8000b4e <__udivmoddi4+0x92>
 8000d5c:	454b      	cmp	r3, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d6c:	4646      	mov	r6, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x28a>
 8000d70:	4620      	mov	r0, r4
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1e2>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x260>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b8>
 8000d7c:	3b02      	subs	r3, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x12c>
 8000d82:	4630      	mov	r0, r6
 8000d84:	e709      	b.n	8000b9a <__udivmoddi4+0xde>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x156>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a1a      	ldr	r2, [pc, #104]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800

08000e08 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000e10:	1d39      	adds	r1, r7, #4
 8000e12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e16:	2201      	movs	r2, #1
 8000e18:	4803      	ldr	r0, [pc, #12]	; (8000e28 <__io_putchar+0x20>)
 8000e1a:	f002 f887 	bl	8002f2c <HAL_UART_Transmit>
	return ch;
 8000e1e:	687b      	ldr	r3, [r7, #4]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000094 	.word	0x20000094

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e30:	f000 fc4b 	bl	80016ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e34:	f000 f826 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e38:	f7ff ffaa 	bl	8000d90 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e3c:	f000 f994 	bl	8001168 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000e40:	f000 f9c2 	bl	80011c8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  xl320_init(servo, &huart6, 1, BR_1M);
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <main+0x48>)
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	2303      	movs	r3, #3
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	490a      	ldr	r1, [pc, #40]	; (8000e78 <main+0x4c>)
 8000e4e:	f000 fab3 	bl	80013b8 <xl320_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		printf("Ping id : %d\r\n", 1);
 8000e52:	2101      	movs	r1, #1
 8000e54:	4809      	ldr	r0, [pc, #36]	; (8000e7c <main+0x50>)
 8000e56:	f002 fe7d 	bl	8003b54 <iprintf>
		//xl320_blinbling(servo);
		xl320_setAction(servo, 50);
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <main+0x48>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000e80 <main+0x54>
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 fbd4 	bl	8001610 <xl320_setAction>
		//xl320_reboot(servo);
		//xl320_setLedColor(servo, Yellow);
		HAL_Delay(1000);
 8000e68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e6c:	f000 fc8a 	bl	8001784 <HAL_Delay>
		printf("Ping id : %d\r\n", 1);
 8000e70:	e7ef      	b.n	8000e52 <main+0x26>
 8000e72:	bf00      	nop
 8000e74:	2000008c 	.word	0x2000008c
 8000e78:	20000118 	.word	0x20000118
 8000e7c:	080048c8 	.word	0x080048c8
 8000e80:	42480000 	.word	0x42480000

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b094      	sub	sp, #80	; 0x50
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 0320 	add.w	r3, r7, #32
 8000e8e:	2230      	movs	r2, #48	; 0x30
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 fd76 	bl	8003984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea8:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <SystemClock_Config+0xc8>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <SystemClock_Config+0xc8>)
 8000eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <SystemClock_Config+0xc8>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ec0:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <SystemClock_Config+0xcc>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ec8:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <SystemClock_Config+0xcc>)
 8000eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <SystemClock_Config+0xcc>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000edc:	2302      	movs	r3, #2
 8000ede:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee4:	2310      	movs	r3, #16
 8000ee6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eec:	2300      	movs	r3, #0
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000ef0:	230a      	movs	r3, #10
 8000ef2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8000ef4:	23d2      	movs	r3, #210	; 0xd2
 8000ef6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f00:	f107 0320 	add.w	r3, r7, #32
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 fef3 	bl	8001cf0 <HAL_RCC_OscConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f10:	f000 f820 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f14:	230f      	movs	r3, #15
 8000f16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2105      	movs	r1, #5
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 f980 	bl	8002238 <HAL_RCC_ClockConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000f3e:	f000 f809 	bl	8000f54 <Error_Handler>
  }
}
 8000f42:	bf00      	nop
 8000f44:	3750      	adds	r7, #80	; 0x50
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40007000 	.word	0x40007000

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f5c:	e7fe      	b.n	8000f5c <Error_Handler+0x8>
	...

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <HAL_MspInit+0x44>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <HAL_MspInit+0x44>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f70:	6413      	str	r3, [r2, #64]	; 0x40
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HAL_MspInit+0x44>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_MspInit+0x44>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_MspInit+0x44>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_MspInit+0x44>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000fac:	e7fe      	b.n	8000fac <NMI_Handler+0x4>

08000fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <HardFault_Handler+0x4>

08000fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <MemManage_Handler+0x4>

08000fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <BusFault_Handler+0x4>

08000fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <UsageFault_Handler+0x4>

08000fc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff4:	f000 fba6 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <_read>:
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	e00a      	b.n	8001024 <_read+0x28>
 800100e:	f3af 8000 	nop.w
 8001012:	4601      	mov	r1, r0
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	60ba      	str	r2, [r7, #8]
 800101a:	b2ca      	uxtb	r2, r1
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3301      	adds	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	dbf0      	blt.n	800100e <_read+0x12>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <_write>:
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	e009      	b.n	800105c <_write+0x26>
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	60ba      	str	r2, [r7, #8]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fed9 	bl	8000e08 <__io_putchar>
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	dbf1      	blt.n	8001048 <_write+0x12>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_close>:
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <_fstat>:
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	2300      	movs	r3, #0
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_isatty>:
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	2301      	movs	r3, #1
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <_lseek>:
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	2300      	movs	r3, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <_sbrk>:
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d207      	bcs.n	8001118 <_sbrk+0x40>
 8001108:	f002 fbf4 	bl	80038f4 <__errno>
 800110c:	4603      	mov	r3, r0
 800110e:	220c      	movs	r2, #12
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001116:	e009      	b.n	800112c <_sbrk+0x54>
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <_sbrk+0x64>)
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20050000 	.word	0x20050000
 8001138:	00000400 	.word	0x00000400
 800113c:	20000090 	.word	0x20000090
 8001140:	200001b0 	.word	0x200001b0

08001144 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <SystemInit+0x20>)
 800114a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <SystemInit+0x20>)
 8001150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_USART1_UART_Init+0x58>)
 800116e:	4a15      	ldr	r2, [pc, #84]	; (80011c4 <MX_USART1_UART_Init+0x5c>)
 8001170:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <MX_USART1_UART_Init+0x58>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_USART1_UART_Init+0x58>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_USART1_UART_Init+0x58>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_USART1_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_USART1_UART_Init+0x58>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MX_USART1_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_USART1_UART_Init+0x58>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <MX_USART1_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_USART1_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_USART1_UART_Init+0x58>)
 80011ac:	f001 fe1a 	bl	8002de4 <HAL_UART_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011b6:	f7ff fecd 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000094 	.word	0x20000094
 80011c4:	40011000 	.word	0x40011000

080011c8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <MX_USART6_UART_Init+0x54>)
 80011ce:	4a14      	ldr	r2, [pc, #80]	; (8001220 <MX_USART6_UART_Init+0x58>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 1000000;
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_USART6_UART_Init+0x54>)
 80011d4:	4a13      	ldr	r2, [pc, #76]	; (8001224 <MX_USART6_UART_Init+0x5c>)
 80011d6:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <MX_USART6_UART_Init+0x54>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_USART6_UART_Init+0x54>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <MX_USART6_UART_Init+0x54>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_USART6_UART_Init+0x54>)
 80011ec:	220c      	movs	r2, #12
 80011ee:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <MX_USART6_UART_Init+0x54>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_USART6_UART_Init+0x54>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <MX_USART6_UART_Init+0x54>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_USART6_UART_Init+0x54>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_USART6_UART_Init+0x54>)
 800120a:	f001 fe39 	bl	8002e80 <HAL_HalfDuplex_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_USART6_UART_Init+0x50>
  {
    Error_Handler();
 8001214:	f7ff fe9e 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000118 	.word	0x20000118
 8001220:	40011400 	.word	0x40011400
 8001224:	000f4240 	.word	0x000f4240

08001228 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b0ae      	sub	sp, #184	; 0xb8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001240:	f107 0320 	add.w	r3, r7, #32
 8001244:	2284      	movs	r2, #132	; 0x84
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f002 fb9b 	bl	8003984 <memset>
  if(uartHandle->Instance==USART1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a53      	ldr	r2, [pc, #332]	; (80013a0 <HAL_UART_MspInit+0x178>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d15d      	bne.n	8001314 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001258:	2340      	movs	r3, #64	; 0x40
 800125a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800125c:	2300      	movs	r3, #0
 800125e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001260:	f107 0320 	add.w	r3, r7, #32
 8001264:	4618      	mov	r0, r3
 8001266:	f001 f9cd 	bl	8002604 <HAL_RCCEx_PeriphCLKConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001270:	f7ff fe70 	bl	8000f54 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001274:	4b4b      	ldr	r3, [pc, #300]	; (80013a4 <HAL_UART_MspInit+0x17c>)
 8001276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001278:	4a4a      	ldr	r2, [pc, #296]	; (80013a4 <HAL_UART_MspInit+0x17c>)
 800127a:	f043 0310 	orr.w	r3, r3, #16
 800127e:	6453      	str	r3, [r2, #68]	; 0x44
 8001280:	4b48      	ldr	r3, [pc, #288]	; (80013a4 <HAL_UART_MspInit+0x17c>)
 8001282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	4b45      	ldr	r3, [pc, #276]	; (80013a4 <HAL_UART_MspInit+0x17c>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	4a44      	ldr	r2, [pc, #272]	; (80013a4 <HAL_UART_MspInit+0x17c>)
 8001292:	f043 0302 	orr.w	r3, r3, #2
 8001296:	6313      	str	r3, [r2, #48]	; 0x30
 8001298:	4b42      	ldr	r3, [pc, #264]	; (80013a4 <HAL_UART_MspInit+0x17c>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b3f      	ldr	r3, [pc, #252]	; (80013a4 <HAL_UART_MspInit+0x17c>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	4a3e      	ldr	r2, [pc, #248]	; (80013a4 <HAL_UART_MspInit+0x17c>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6313      	str	r3, [r2, #48]	; 0x30
 80012b0:	4b3c      	ldr	r3, [pc, #240]	; (80013a4 <HAL_UART_MspInit+0x17c>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012d4:	2307      	movs	r3, #7
 80012d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012de:	4619      	mov	r1, r3
 80012e0:	4831      	ldr	r0, [pc, #196]	; (80013a8 <HAL_UART_MspInit+0x180>)
 80012e2:	f000 fb59 	bl	8001998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001300:	2307      	movs	r3, #7
 8001302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800130a:	4619      	mov	r1, r3
 800130c:	4827      	ldr	r0, [pc, #156]	; (80013ac <HAL_UART_MspInit+0x184>)
 800130e:	f000 fb43 	bl	8001998 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001312:	e040      	b.n	8001396 <HAL_UART_MspInit+0x16e>
  else if(uartHandle->Instance==USART6)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a25      	ldr	r2, [pc, #148]	; (80013b0 <HAL_UART_MspInit+0x188>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d13b      	bne.n	8001396 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800131e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001322:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001324:	2300      	movs	r3, #0
 8001326:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001328:	f107 0320 	add.w	r3, r7, #32
 800132c:	4618      	mov	r0, r3
 800132e:	f001 f969 	bl	8002604 <HAL_RCCEx_PeriphCLKConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_UART_MspInit+0x114>
      Error_Handler();
 8001338:	f7ff fe0c 	bl	8000f54 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <HAL_UART_MspInit+0x17c>)
 800133e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001340:	4a18      	ldr	r2, [pc, #96]	; (80013a4 <HAL_UART_MspInit+0x17c>)
 8001342:	f043 0320 	orr.w	r3, r3, #32
 8001346:	6453      	str	r3, [r2, #68]	; 0x44
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_UART_MspInit+0x17c>)
 800134a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134c:	f003 0320 	and.w	r3, r3, #32
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <HAL_UART_MspInit+0x17c>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <HAL_UART_MspInit+0x17c>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6313      	str	r3, [r2, #48]	; 0x30
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_UART_MspInit+0x17c>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800136c:	2340      	movs	r3, #64	; 0x40
 800136e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001384:	2308      	movs	r3, #8
 8001386:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800138e:	4619      	mov	r1, r3
 8001390:	4808      	ldr	r0, [pc, #32]	; (80013b4 <HAL_UART_MspInit+0x18c>)
 8001392:	f000 fb01 	bl	8001998 <HAL_GPIO_Init>
}
 8001396:	bf00      	nop
 8001398:	37b8      	adds	r7, #184	; 0xb8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40011000 	.word	0x40011000
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40011400 	.word	0x40011400
 80013b4:	40020800 	.word	0x40020800

080013b8 <xl320_init>:
 *      Author: lucas
 */

#include "xl320_driver.h"

void xl320_init(Xl320* xl320, UART_HandleTypeDef* uart, uint8_t id, uint8_t br){
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	4611      	mov	r1, r2
 80013c4:	461a      	mov	r2, r3
 80013c6:	460b      	mov	r3, r1
 80013c8:	71fb      	strb	r3, [r7, #7]
 80013ca:	4613      	mov	r3, r2
 80013cc:	71bb      	strb	r3, [r7, #6]
	xl320->uart = uart;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	601a      	str	r2, [r3, #0]
	xl320->id 	= id;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	79fa      	ldrb	r2, [r7, #7]
 80013d8:	711a      	strb	r2, [r3, #4]
	xl320->br	= br;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	79ba      	ldrb	r2, [r7, #6]
 80013de:	715a      	strb	r2, [r3, #5]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <xl320_addHeader2Buff>:

void xl320_addHeader2Buff(uint8_t* buff){
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	buff[0] = 0xFF;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	22ff      	movs	r2, #255	; 0xff
 80013f8:	701a      	strb	r2, [r3, #0]
	buff[1] = 0xFF;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3301      	adds	r3, #1
 80013fe:	22ff      	movs	r2, #255	; 0xff
 8001400:	701a      	strb	r2, [r3, #0]
	buff[2] = 0xFD;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3302      	adds	r3, #2
 8001406:	22fd      	movs	r2, #253	; 0xfd
 8001408:	701a      	strb	r2, [r3, #0]
	buff[3] = 0x00;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3303      	adds	r3, #3
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <xl320_updateCrc>:

unsigned short xl320_updateCrc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size) {
 8001420:	b580      	push	{r7, lr}
 8001422:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001426:	af00      	add	r7, sp, #0
 8001428:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800142c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001430:	6019      	str	r1, [r3, #0]
 8001432:	4611      	mov	r1, r2
 8001434:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001438:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800143c:	4602      	mov	r2, r0
 800143e:	801a      	strh	r2, [r3, #0]
 8001440:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001444:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001448:	460a      	mov	r2, r1
 800144a:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 800144c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001450:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001454:	4a28      	ldr	r2, [pc, #160]	; (80014f8 <xl320_updateCrc+0xd8>)
 8001456:	4618      	mov	r0, r3
 8001458:	4611      	mov	r1, r2
 800145a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800145e:	461a      	mov	r2, r3
 8001460:	f002 fa82 	bl	8003968 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++) {
 8001464:	2300      	movs	r3, #0
 8001466:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800146a:	e031      	b.n	80014d0 <xl320_updateCrc+0xb0>
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 800146c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001470:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	b29a      	uxth	r2, r3
 800147a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800147e:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8001482:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8001486:	6809      	ldr	r1, [r1, #0]
 8001488:	440b      	add	r3, r1
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4053      	eors	r3, r2
 8001490:	b29b      	uxth	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8001498:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800149c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 80014aa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80014ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014b2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4053      	eors	r3, r2
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80014c0:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80014c4:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++) {
 80014c6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80014ca:	3301      	adds	r3, #1
 80014cc:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 80014d0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80014d4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80014d8:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d3c4      	bcc.n	800146c <xl320_updateCrc+0x4c>
	}

	return crc_accum;
 80014e2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80014e6:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80014ea:	881b      	ldrh	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	080048d8 	.word	0x080048d8

080014fc <xl320_copyParams2Buff>:

void xl320_copyParams2Buff(uint8_t buffStartIndex, uint8_t* buff, uint16_t nbParams, uint8_t* params){
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	4603      	mov	r3, r0
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	4613      	mov	r3, r2
 800150c:	81bb      	strh	r3, [r7, #12]
	for(int i = 0; i < nbParams; i++){
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e00d      	b.n	8001530 <xl320_copyParams2Buff+0x34>
		buff[i + buffStartIndex] = params[i];
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	441a      	add	r2, r3
 800151a:	7bf9      	ldrb	r1, [r7, #15]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	440b      	add	r3, r1
 8001520:	4619      	mov	r1, r3
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	440b      	add	r3, r1
 8001526:	7812      	ldrb	r2, [r2, #0]
 8001528:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < nbParams; i++){
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3301      	adds	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	89bb      	ldrh	r3, [r7, #12]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	429a      	cmp	r2, r3
 8001536:	dbed      	blt.n	8001514 <xl320_copyParams2Buff+0x18>
	}
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	371c      	adds	r7, #28
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <xl320_sendCommand>:

void xl320_sendCommand(Xl320* xl320, uint8_t inst, uint16_t nbParams, uint8_t* params){
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	460b      	mov	r3, r1
 8001554:	72fb      	strb	r3, [r7, #11]
 8001556:	4613      	mov	r3, r2
 8001558:	813b      	strh	r3, [r7, #8]
	uint8_t* txBuff = NULL;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
	txBuff = (uint8_t*) malloc((MIN_FRAME_SIZE + nbParams)*sizeof(uint8_t));
 800155e:	893b      	ldrh	r3, [r7, #8]
 8001560:	330a      	adds	r3, #10
 8001562:	4618      	mov	r0, r3
 8001564:	f002 f9f0 	bl	8003948 <malloc>
 8001568:	4603      	mov	r3, r0
 800156a:	617b      	str	r3, [r7, #20]
	uint16_t length = nbParams + 3;
 800156c:	893b      	ldrh	r3, [r7, #8]
 800156e:	3303      	adds	r3, #3
 8001570:	827b      	strh	r3, [r7, #18]

	xl320_addHeader2Buff(txBuff);
 8001572:	6978      	ldr	r0, [r7, #20]
 8001574:	f7ff ff3a 	bl	80013ec <xl320_addHeader2Buff>
	txBuff[4] = xl320->id;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3304      	adds	r3, #4
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	7912      	ldrb	r2, [r2, #4]
 8001580:	701a      	strb	r2, [r3, #0]
	txBuff[5] = (uint8_t) (length & 0xFF);
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3305      	adds	r3, #5
 8001586:	8a7a      	ldrh	r2, [r7, #18]
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	701a      	strb	r2, [r3, #0]
	txBuff[6] = (uint8_t) (length >> 8);
 800158c:	8a7b      	ldrh	r3, [r7, #18]
 800158e:	0a1b      	lsrs	r3, r3, #8
 8001590:	b29a      	uxth	r2, r3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3306      	adds	r3, #6
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	701a      	strb	r2, [r3, #0]
	txBuff[7] = inst;
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3307      	adds	r3, #7
 800159e:	7afa      	ldrb	r2, [r7, #11]
 80015a0:	701a      	strb	r2, [r3, #0]
	xl320_copyParams2Buff(8, txBuff, nbParams, params);
 80015a2:	893a      	ldrh	r2, [r7, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6979      	ldr	r1, [r7, #20]
 80015a8:	2008      	movs	r0, #8
 80015aa:	f7ff ffa7 	bl	80014fc <xl320_copyParams2Buff>

	uint16_t crc = xl320_updateCrc(0, txBuff, MIN_FRAME_SIZE + nbParams - CRC_FIELD_SIZE);
 80015ae:	893b      	ldrh	r3, [r7, #8]
 80015b0:	3308      	adds	r3, #8
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	6979      	ldr	r1, [r7, #20]
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff ff31 	bl	8001420 <xl320_updateCrc>
 80015be:	4603      	mov	r3, r0
 80015c0:	823b      	strh	r3, [r7, #16]

	txBuff[(MIN_FRAME_SIZE + nbParams) - 2] = (uint8_t) (crc & 0xFF);
 80015c2:	893b      	ldrh	r3, [r7, #8]
 80015c4:	3308      	adds	r3, #8
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	4413      	add	r3, r2
 80015ca:	8a3a      	ldrh	r2, [r7, #16]
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	701a      	strb	r2, [r3, #0]
	txBuff[(MIN_FRAME_SIZE + nbParams) - 1] = (uint8_t) (crc >> 8);
 80015d0:	8a3b      	ldrh	r3, [r7, #16]
 80015d2:	0a1b      	lsrs	r3, r3, #8
 80015d4:	b299      	uxth	r1, r3
 80015d6:	893b      	ldrh	r3, [r7, #8]
 80015d8:	3309      	adds	r3, #9
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4413      	add	r3, r2
 80015de:	b2ca      	uxtb	r2, r1
 80015e0:	701a      	strb	r2, [r3, #0]

	HAL_HalfDuplex_EnableTransmitter(&huart6);
 80015e2:	480a      	ldr	r0, [pc, #40]	; (800160c <xl320_sendCommand+0xc4>)
 80015e4:	f001 fd35 	bl	8003052 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(xl320->uart, txBuff, (MIN_FRAME_SIZE + nbParams)*sizeof(uint8_t), HAL_MAX_DELAY);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	893b      	ldrh	r3, [r7, #8]
 80015ee:	330a      	adds	r3, #10
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015f6:	6979      	ldr	r1, [r7, #20]
 80015f8:	f001 fc98 	bl	8002f2c <HAL_UART_Transmit>

	free(txBuff);
 80015fc:	6978      	ldr	r0, [r7, #20]
 80015fe:	f002 f9ab 	bl	8003958 <free>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000118 	.word	0x20000118

08001610 <xl320_setAction>:
	uint8_t params[3] = {REG_POSITION, (uint8_t)(position && 0xFF) , (uint8_t)(position>>8)};

	xl320_sendCommand(xl320, INSTR_WRITE, 3, (uint8_t*) &params);
}

void xl320_setAction(Xl320* xl320, float rpm){
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	ed87 0a00 	vstr	s0, [r7]
	uint16_t speedValue = (uint16_t)(rpm/RESOLUTION_SPEED);
 800161c:	6838      	ldr	r0, [r7, #0]
 800161e:	f7fe ffab 	bl	8000578 <__aeabi_f2d>
 8001622:	a313      	add	r3, pc, #76	; (adr r3, 8001670 <xl320_setAction+0x60>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff f928 	bl	800087c <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fa0a 	bl	8000a4c <__aeabi_d2uiz>
 8001638:	4603      	mov	r3, r0
 800163a:	81fb      	strh	r3, [r7, #14]
	uint8_t highByte = (uint8_t)((speedValue >> 8) & 0xFF);
 800163c:	89fb      	ldrh	r3, [r7, #14]
 800163e:	0a1b      	lsrs	r3, r3, #8
 8001640:	b29b      	uxth	r3, r3
 8001642:	737b      	strb	r3, [r7, #13]
	uint8_t lowByte = (uint8_t)(speedValue & 0xFF);
 8001644:	89fb      	ldrh	r3, [r7, #14]
 8001646:	733b      	strb	r3, [r7, #12]

	uint8_t params[3] = {LIMIT_SPEED, highByte, lowByte};
 8001648:	2372      	movs	r3, #114	; 0x72
 800164a:	723b      	strb	r3, [r7, #8]
 800164c:	7b7b      	ldrb	r3, [r7, #13]
 800164e:	727b      	strb	r3, [r7, #9]
 8001650:	7b3b      	ldrb	r3, [r7, #12]
 8001652:	72bb      	strb	r3, [r7, #10]
	xl320_sendCommand(xl320, INSTR_ACTION, 3, (uint8_t*) &params);
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	2203      	movs	r2, #3
 800165a:	2105      	movs	r1, #5
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff73 	bl	8001548 <xl320_sendCommand>
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	f3af 8000 	nop.w
 8001670:	f9db22d1 	.word	0xf9db22d1
 8001674:	3fbc6a7e 	.word	0x3fbc6a7e

08001678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800167c:	480d      	ldr	r0, [pc, #52]	; (80016b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800167e:	490e      	ldr	r1, [pc, #56]	; (80016b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001680:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001684:	e002      	b.n	800168c <LoopCopyDataInit>

08001686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168a:	3304      	adds	r3, #4

0800168c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800168c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001690:	d3f9      	bcc.n	8001686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001694:	4c0b      	ldr	r4, [pc, #44]	; (80016c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001698:	e001      	b.n	800169e <LoopFillZerobss>

0800169a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800169c:	3204      	adds	r2, #4

0800169e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a0:	d3fb      	bcc.n	800169a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016a2:	f7ff fd4f 	bl	8001144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016a6:	f002 f92b 	bl	8003900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016aa:	f7ff fbbf 	bl	8000e2c <main>
  bx  lr    
 80016ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016bc:	08004b98 	.word	0x08004b98
  ldr r2, =_sbss
 80016c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016c4:	200001b0 	.word	0x200001b0

080016c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC_IRQHandler>

080016ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ce:	2003      	movs	r0, #3
 80016d0:	f000 f92e 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d4:	2000      	movs	r0, #0
 80016d6:	f000 f805 	bl	80016e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016da:	f7ff fc41 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x54>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x58>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f93b 	bl	800197e <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00e      	b.n	8001730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d80a      	bhi.n	800172e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001720:	f000 f911 	bl	8001946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001724:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_InitTick+0x5c>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000000 	.word	0x20000000
 800173c:	20000008 	.word	0x20000008
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x20>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x24>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_IncTick+0x24>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000008 	.word	0x20000008
 8001768:	2000019c 	.word	0x2000019c

0800176c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_GetTick+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	2000019c 	.word	0x2000019c

08001784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff ffee 	bl	800176c <HAL_GetTick>
 8001790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800179c:	d005      	beq.n	80017aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_Delay+0x44>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017aa:	bf00      	nop
 80017ac:	f7ff ffde 	bl	800176c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d8f7      	bhi.n	80017ac <HAL_Delay+0x28>
  {
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000008 	.word	0x20000008

080017cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <__NVIC_SetPriorityGrouping+0x40>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e8:	4013      	ands	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <__NVIC_SetPriorityGrouping+0x40>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00
 8001810:	05fa0000 	.word	0x05fa0000

08001814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <__NVIC_GetPriorityGrouping+0x18>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f003 0307 	and.w	r3, r3, #7
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001910:	f7ff ff8e 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff47 	bl	80017cc <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff5c 	bl	8001814 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff8e 	bl	8001884 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5d 	bl	8001830 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffb0 	bl	80018ec <SysTick_Config>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e175      	b.n	8001ca4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019b8:	2201      	movs	r2, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	f040 8164 	bne.w	8001c9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d005      	beq.n	80019ee <HAL_GPIO_Init+0x56>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d130      	bne.n	8001a50 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a24:	2201      	movs	r2, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 0201 	and.w	r2, r3, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d017      	beq.n	8001a8c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d123      	bne.n	8001ae0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	08da      	lsrs	r2, r3, #3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3208      	adds	r2, #8
 8001aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	220f      	movs	r2, #15
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	69b9      	ldr	r1, [r7, #24]
 8001adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0203 	and.w	r2, r3, #3
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80be 	beq.w	8001c9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	4b66      	ldr	r3, [pc, #408]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	4a65      	ldr	r2, [pc, #404]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2e:	4b63      	ldr	r3, [pc, #396]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b3a:	4a61      	ldr	r2, [pc, #388]	; (8001cc0 <HAL_GPIO_Init+0x328>)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	220f      	movs	r2, #15
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a58      	ldr	r2, [pc, #352]	; (8001cc4 <HAL_GPIO_Init+0x32c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d037      	beq.n	8001bd6 <HAL_GPIO_Init+0x23e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a57      	ldr	r2, [pc, #348]	; (8001cc8 <HAL_GPIO_Init+0x330>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d031      	beq.n	8001bd2 <HAL_GPIO_Init+0x23a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a56      	ldr	r2, [pc, #344]	; (8001ccc <HAL_GPIO_Init+0x334>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d02b      	beq.n	8001bce <HAL_GPIO_Init+0x236>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a55      	ldr	r2, [pc, #340]	; (8001cd0 <HAL_GPIO_Init+0x338>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d025      	beq.n	8001bca <HAL_GPIO_Init+0x232>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a54      	ldr	r2, [pc, #336]	; (8001cd4 <HAL_GPIO_Init+0x33c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d01f      	beq.n	8001bc6 <HAL_GPIO_Init+0x22e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a53      	ldr	r2, [pc, #332]	; (8001cd8 <HAL_GPIO_Init+0x340>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d019      	beq.n	8001bc2 <HAL_GPIO_Init+0x22a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a52      	ldr	r2, [pc, #328]	; (8001cdc <HAL_GPIO_Init+0x344>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d013      	beq.n	8001bbe <HAL_GPIO_Init+0x226>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a51      	ldr	r2, [pc, #324]	; (8001ce0 <HAL_GPIO_Init+0x348>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00d      	beq.n	8001bba <HAL_GPIO_Init+0x222>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a50      	ldr	r2, [pc, #320]	; (8001ce4 <HAL_GPIO_Init+0x34c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d007      	beq.n	8001bb6 <HAL_GPIO_Init+0x21e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4f      	ldr	r2, [pc, #316]	; (8001ce8 <HAL_GPIO_Init+0x350>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_GPIO_Init+0x21a>
 8001bae:	2309      	movs	r3, #9
 8001bb0:	e012      	b.n	8001bd8 <HAL_GPIO_Init+0x240>
 8001bb2:	230a      	movs	r3, #10
 8001bb4:	e010      	b.n	8001bd8 <HAL_GPIO_Init+0x240>
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	e00e      	b.n	8001bd8 <HAL_GPIO_Init+0x240>
 8001bba:	2307      	movs	r3, #7
 8001bbc:	e00c      	b.n	8001bd8 <HAL_GPIO_Init+0x240>
 8001bbe:	2306      	movs	r3, #6
 8001bc0:	e00a      	b.n	8001bd8 <HAL_GPIO_Init+0x240>
 8001bc2:	2305      	movs	r3, #5
 8001bc4:	e008      	b.n	8001bd8 <HAL_GPIO_Init+0x240>
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	e006      	b.n	8001bd8 <HAL_GPIO_Init+0x240>
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e004      	b.n	8001bd8 <HAL_GPIO_Init+0x240>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e002      	b.n	8001bd8 <HAL_GPIO_Init+0x240>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_GPIO_Init+0x240>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	f002 0203 	and.w	r2, r2, #3
 8001bde:	0092      	lsls	r2, r2, #2
 8001be0:	4093      	lsls	r3, r2
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001be8:	4935      	ldr	r1, [pc, #212]	; (8001cc0 <HAL_GPIO_Init+0x328>)
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	; (8001cec <HAL_GPIO_Init+0x354>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c1a:	4a34      	ldr	r2, [pc, #208]	; (8001cec <HAL_GPIO_Init+0x354>)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c20:	4b32      	ldr	r3, [pc, #200]	; (8001cec <HAL_GPIO_Init+0x354>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c44:	4a29      	ldr	r2, [pc, #164]	; (8001cec <HAL_GPIO_Init+0x354>)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c4a:	4b28      	ldr	r3, [pc, #160]	; (8001cec <HAL_GPIO_Init+0x354>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c6e:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <HAL_GPIO_Init+0x354>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_GPIO_Init+0x354>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c98:	4a14      	ldr	r2, [pc, #80]	; (8001cec <HAL_GPIO_Init+0x354>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	2b0f      	cmp	r3, #15
 8001ca8:	f67f ae86 	bls.w	80019b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3724      	adds	r7, #36	; 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40013800 	.word	0x40013800
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	40020400 	.word	0x40020400
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	40020c00 	.word	0x40020c00
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40021400 	.word	0x40021400
 8001cdc:	40021800 	.word	0x40021800
 8001ce0:	40021c00 	.word	0x40021c00
 8001ce4:	40022000 	.word	0x40022000
 8001ce8:	40022400 	.word	0x40022400
 8001cec:	40013c00 	.word	0x40013c00

08001cf0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e291      	b.n	800222a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8087 	beq.w	8001e22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d14:	4b96      	ldr	r3, [pc, #600]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d00c      	beq.n	8001d3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d20:	4b93      	ldr	r3, [pc, #588]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d112      	bne.n	8001d52 <HAL_RCC_OscConfig+0x62>
 8001d2c:	4b90      	ldr	r3, [pc, #576]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d38:	d10b      	bne.n	8001d52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3a:	4b8d      	ldr	r3, [pc, #564]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d06c      	beq.n	8001e20 <HAL_RCC_OscConfig+0x130>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d168      	bne.n	8001e20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e26b      	b.n	800222a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x7a>
 8001d5c:	4b84      	ldr	r3, [pc, #528]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a83      	ldr	r2, [pc, #524]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	e02e      	b.n	8001dc8 <HAL_RCC_OscConfig+0xd8>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x9c>
 8001d72:	4b7f      	ldr	r3, [pc, #508]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a7e      	ldr	r2, [pc, #504]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b7c      	ldr	r3, [pc, #496]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a7b      	ldr	r2, [pc, #492]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e01d      	b.n	8001dc8 <HAL_RCC_OscConfig+0xd8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0xc0>
 8001d96:	4b76      	ldr	r3, [pc, #472]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a75      	ldr	r2, [pc, #468]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b73      	ldr	r3, [pc, #460]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a72      	ldr	r2, [pc, #456]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e00b      	b.n	8001dc8 <HAL_RCC_OscConfig+0xd8>
 8001db0:	4b6f      	ldr	r3, [pc, #444]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a6e      	ldr	r2, [pc, #440]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b6c      	ldr	r3, [pc, #432]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a6b      	ldr	r2, [pc, #428]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d013      	beq.n	8001df8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fccc 	bl	800176c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff fcc8 	bl	800176c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e21f      	b.n	800222a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	4b61      	ldr	r3, [pc, #388]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xe8>
 8001df6:	e014      	b.n	8001e22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff fcb8 	bl	800176c <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff fcb4 	bl	800176c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e20b      	b.n	800222a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e12:	4b57      	ldr	r3, [pc, #348]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x110>
 8001e1e:	e000      	b.n	8001e22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d069      	beq.n	8001f02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e2e:	4b50      	ldr	r3, [pc, #320]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e3a:	4b4d      	ldr	r3, [pc, #308]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d11c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x190>
 8001e46:	4b4a      	ldr	r3, [pc, #296]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d116      	bne.n	8001e80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_RCC_OscConfig+0x17a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d001      	beq.n	8001e6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e1df      	b.n	800222a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6a:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	493d      	ldr	r1, [pc, #244]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7e:	e040      	b.n	8001f02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d023      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e88:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a38      	ldr	r2, [pc, #224]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff fc6a 	bl	800176c <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fc66 	bl	800176c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e1bd      	b.n	800222a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eae:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eba:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4929      	ldr	r1, [pc, #164]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]
 8001ece:	e018      	b.n	8001f02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a26      	ldr	r2, [pc, #152]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff fc46 	bl	800176c <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fc42 	bl	800176c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e199      	b.n	800222a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d038      	beq.n	8001f80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d019      	beq.n	8001f4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f16:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f1a:	4a15      	ldr	r2, [pc, #84]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f22:	f7ff fc23 	bl	800176c <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2a:	f7ff fc1f 	bl	800176c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e176      	b.n	800222a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x23a>
 8001f48:	e01a      	b.n	8001f80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f4e:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f56:	f7ff fc09 	bl	800176c <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5e:	f7ff fc05 	bl	800176c <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d903      	bls.n	8001f74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e15c      	b.n	800222a <HAL_RCC_OscConfig+0x53a>
 8001f70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f74:	4b91      	ldr	r3, [pc, #580]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8001f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ee      	bne.n	8001f5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80a4 	beq.w	80020d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8e:	4b8b      	ldr	r3, [pc, #556]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10d      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b88      	ldr	r3, [pc, #544]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a87      	ldr	r2, [pc, #540]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b85      	ldr	r3, [pc, #532]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb6:	4b82      	ldr	r3, [pc, #520]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d118      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001fc2:	4b7f      	ldr	r3, [pc, #508]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a7e      	ldr	r2, [pc, #504]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fce:	f7ff fbcd 	bl	800176c <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd6:	f7ff fbc9 	bl	800176c <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b64      	cmp	r3, #100	; 0x64
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e120      	b.n	800222a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe8:	4b75      	ldr	r3, [pc, #468]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x31a>
 8001ffc:	4b6f      	ldr	r3, [pc, #444]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002000:	4a6e      	ldr	r2, [pc, #440]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6713      	str	r3, [r2, #112]	; 0x70
 8002008:	e02d      	b.n	8002066 <HAL_RCC_OscConfig+0x376>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x33c>
 8002012:	4b6a      	ldr	r3, [pc, #424]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002016:	4a69      	ldr	r2, [pc, #420]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	6713      	str	r3, [r2, #112]	; 0x70
 800201e:	4b67      	ldr	r3, [pc, #412]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8002020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002022:	4a66      	ldr	r2, [pc, #408]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	6713      	str	r3, [r2, #112]	; 0x70
 800202a:	e01c      	b.n	8002066 <HAL_RCC_OscConfig+0x376>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b05      	cmp	r3, #5
 8002032:	d10c      	bne.n	800204e <HAL_RCC_OscConfig+0x35e>
 8002034:	4b61      	ldr	r3, [pc, #388]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	4a60      	ldr	r2, [pc, #384]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6713      	str	r3, [r2, #112]	; 0x70
 8002040:	4b5e      	ldr	r3, [pc, #376]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	4a5d      	ldr	r2, [pc, #372]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6713      	str	r3, [r2, #112]	; 0x70
 800204c:	e00b      	b.n	8002066 <HAL_RCC_OscConfig+0x376>
 800204e:	4b5b      	ldr	r3, [pc, #364]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002052:	4a5a      	ldr	r2, [pc, #360]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6713      	str	r3, [r2, #112]	; 0x70
 800205a:	4b58      	ldr	r3, [pc, #352]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205e:	4a57      	ldr	r2, [pc, #348]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8002060:	f023 0304 	bic.w	r3, r3, #4
 8002064:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d015      	beq.n	800209a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7ff fb7d 	bl	800176c <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7ff fb79 	bl	800176c <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0ce      	b.n	800222a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208c:	4b4b      	ldr	r3, [pc, #300]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0ee      	beq.n	8002076 <HAL_RCC_OscConfig+0x386>
 8002098:	e014      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209a:	f7ff fb67 	bl	800176c <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7ff fb63 	bl	800176c <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e0b8      	b.n	800222a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b8:	4b40      	ldr	r3, [pc, #256]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1ee      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d105      	bne.n	80020d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ca:	4b3c      	ldr	r3, [pc, #240]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a3b      	ldr	r2, [pc, #236]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 80020d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80a4 	beq.w	8002228 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e0:	4b36      	ldr	r3, [pc, #216]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d06b      	beq.n	80021c4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d149      	bne.n	8002188 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f4:	4b31      	ldr	r3, [pc, #196]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a30      	ldr	r2, [pc, #192]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 80020fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7ff fb34 	bl	800176c <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002108:	f7ff fb30 	bl	800176c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e087      	b.n	800222a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211a:	4b28      	ldr	r3, [pc, #160]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	019b      	lsls	r3, r3, #6
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	3b01      	subs	r3, #1
 8002140:	041b      	lsls	r3, r3, #16
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	061b      	lsls	r3, r3, #24
 800214a:	4313      	orrs	r3, r2
 800214c:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 800214e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002152:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a18      	ldr	r2, [pc, #96]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 800215a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800215e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7ff fb04 	bl	800176c <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002168:	f7ff fb00 	bl	800176c <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e057      	b.n	800222a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x478>
 8002186:	e04f      	b.n	8002228 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 800218e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff faea 	bl	800176c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff fae6 	bl	800176c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e03d      	b.n	800222a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_RCC_OscConfig+0x4cc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x4ac>
 80021ba:	e035      	b.n	8002228 <HAL_RCC_OscConfig+0x538>
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <HAL_RCC_OscConfig+0x544>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d028      	beq.n	8002224 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d121      	bne.n	8002224 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d11a      	bne.n	8002224 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021f4:	4013      	ands	r3, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d111      	bne.n	8002224 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	3b01      	subs	r3, #1
 800220e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002210:	429a      	cmp	r2, r3
 8002212:	d107      	bne.n	8002224 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800

08002238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0d0      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002250:	4b6a      	ldr	r3, [pc, #424]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d910      	bls.n	8002280 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b67      	ldr	r3, [pc, #412]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 020f 	bic.w	r2, r3, #15
 8002266:	4965      	ldr	r1, [pc, #404]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b63      	ldr	r3, [pc, #396]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0b8      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d020      	beq.n	80022ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002298:	4b59      	ldr	r3, [pc, #356]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4a58      	ldr	r2, [pc, #352]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 800229e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b0:	4b53      	ldr	r3, [pc, #332]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4a52      	ldr	r2, [pc, #328]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80022b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022bc:	4b50      	ldr	r3, [pc, #320]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	494d      	ldr	r1, [pc, #308]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d040      	beq.n	800235c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	4b47      	ldr	r3, [pc, #284]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d115      	bne.n	800231a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e07f      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fa:	4b41      	ldr	r3, [pc, #260]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e073      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230a:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e06b      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231a:	4b39      	ldr	r3, [pc, #228]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f023 0203 	bic.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4936      	ldr	r1, [pc, #216]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800232c:	f7ff fa1e 	bl	800176c <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	e00a      	b.n	800234a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7ff fa1a 	bl	800176c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e053      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 020c 	and.w	r2, r3, #12
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	429a      	cmp	r2, r3
 800235a:	d1eb      	bne.n	8002334 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800235c:	4b27      	ldr	r3, [pc, #156]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d210      	bcs.n	800238c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 020f 	bic.w	r2, r3, #15
 8002372:	4922      	ldr	r1, [pc, #136]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e032      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4916      	ldr	r1, [pc, #88]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d009      	beq.n	80023ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	490e      	ldr	r1, [pc, #56]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ca:	f000 f821 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 80023ce:	4602      	mov	r2, r0
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	490a      	ldr	r1, [pc, #40]	; (8002404 <HAL_RCC_ClockConfig+0x1cc>)
 80023dc:	5ccb      	ldrb	r3, [r1, r3]
 80023de:	fa22 f303 	lsr.w	r3, r2, r3
 80023e2:	4a09      	ldr	r2, [pc, #36]	; (8002408 <HAL_RCC_ClockConfig+0x1d0>)
 80023e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_RCC_ClockConfig+0x1d4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff f97a 	bl	80016e4 <HAL_InitTick>

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023c00 	.word	0x40023c00
 8002400:	40023800 	.word	0x40023800
 8002404:	08004ad8 	.word	0x08004ad8
 8002408:	20000000 	.word	0x20000000
 800240c:	20000004 	.word	0x20000004

08002410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002414:	b090      	sub	sp, #64	; 0x40
 8002416:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	637b      	str	r3, [r7, #52]	; 0x34
 800241c:	2300      	movs	r3, #0
 800241e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002420:	2300      	movs	r3, #0
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002428:	4b59      	ldr	r3, [pc, #356]	; (8002590 <HAL_RCC_GetSysClockFreq+0x180>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b08      	cmp	r3, #8
 8002432:	d00d      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x40>
 8002434:	2b08      	cmp	r3, #8
 8002436:	f200 80a1 	bhi.w	800257c <HAL_RCC_GetSysClockFreq+0x16c>
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0x34>
 800243e:	2b04      	cmp	r3, #4
 8002440:	d003      	beq.n	800244a <HAL_RCC_GetSysClockFreq+0x3a>
 8002442:	e09b      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002444:	4b53      	ldr	r3, [pc, #332]	; (8002594 <HAL_RCC_GetSysClockFreq+0x184>)
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002448:	e09b      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800244a:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_GetSysClockFreq+0x188>)
 800244c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800244e:	e098      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002450:	4b4f      	ldr	r3, [pc, #316]	; (8002590 <HAL_RCC_GetSysClockFreq+0x180>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800245a:	4b4d      	ldr	r3, [pc, #308]	; (8002590 <HAL_RCC_GetSysClockFreq+0x180>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d028      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002466:	4b4a      	ldr	r3, [pc, #296]	; (8002590 <HAL_RCC_GetSysClockFreq+0x180>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	099b      	lsrs	r3, r3, #6
 800246c:	2200      	movs	r2, #0
 800246e:	623b      	str	r3, [r7, #32]
 8002470:	627a      	str	r2, [r7, #36]	; 0x24
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002478:	2100      	movs	r1, #0
 800247a:	4b47      	ldr	r3, [pc, #284]	; (8002598 <HAL_RCC_GetSysClockFreq+0x188>)
 800247c:	fb03 f201 	mul.w	r2, r3, r1
 8002480:	2300      	movs	r3, #0
 8002482:	fb00 f303 	mul.w	r3, r0, r3
 8002486:	4413      	add	r3, r2
 8002488:	4a43      	ldr	r2, [pc, #268]	; (8002598 <HAL_RCC_GetSysClockFreq+0x188>)
 800248a:	fba0 1202 	umull	r1, r2, r0, r2
 800248e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002490:	460a      	mov	r2, r1
 8002492:	62ba      	str	r2, [r7, #40]	; 0x28
 8002494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002496:	4413      	add	r3, r2
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249c:	2200      	movs	r2, #0
 800249e:	61bb      	str	r3, [r7, #24]
 80024a0:	61fa      	str	r2, [r7, #28]
 80024a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024aa:	f7fe faef 	bl	8000a8c <__aeabi_uldivmod>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4613      	mov	r3, r2
 80024b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b6:	e053      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b8:	4b35      	ldr	r3, [pc, #212]	; (8002590 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	2200      	movs	r2, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	617a      	str	r2, [r7, #20]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024ca:	f04f 0b00 	mov.w	fp, #0
 80024ce:	4652      	mov	r2, sl
 80024d0:	465b      	mov	r3, fp
 80024d2:	f04f 0000 	mov.w	r0, #0
 80024d6:	f04f 0100 	mov.w	r1, #0
 80024da:	0159      	lsls	r1, r3, #5
 80024dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024e0:	0150      	lsls	r0, r2, #5
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	ebb2 080a 	subs.w	r8, r2, sl
 80024ea:	eb63 090b 	sbc.w	r9, r3, fp
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002502:	ebb2 0408 	subs.w	r4, r2, r8
 8002506:	eb63 0509 	sbc.w	r5, r3, r9
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	00eb      	lsls	r3, r5, #3
 8002514:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002518:	00e2      	lsls	r2, r4, #3
 800251a:	4614      	mov	r4, r2
 800251c:	461d      	mov	r5, r3
 800251e:	eb14 030a 	adds.w	r3, r4, sl
 8002522:	603b      	str	r3, [r7, #0]
 8002524:	eb45 030b 	adc.w	r3, r5, fp
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002536:	4629      	mov	r1, r5
 8002538:	028b      	lsls	r3, r1, #10
 800253a:	4621      	mov	r1, r4
 800253c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002540:	4621      	mov	r1, r4
 8002542:	028a      	lsls	r2, r1, #10
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254a:	2200      	movs	r2, #0
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	60fa      	str	r2, [r7, #12]
 8002550:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002554:	f7fe fa9a 	bl	8000a8c <__aeabi_uldivmod>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4613      	mov	r3, r2
 800255e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_RCC_GetSysClockFreq+0x180>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	3301      	adds	r3, #1
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002570:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002574:	fbb2 f3f3 	udiv	r3, r2, r3
 8002578:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800257a:	e002      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_RCC_GetSysClockFreq+0x184>)
 800257e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002584:	4618      	mov	r0, r3
 8002586:	3740      	adds	r7, #64	; 0x40
 8002588:	46bd      	mov	sp, r7
 800258a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800
 8002594:	00f42400 	.word	0x00f42400
 8002598:	017d7840 	.word	0x017d7840

0800259c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000000 	.word	0x20000000

080025b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025b8:	f7ff fff0 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025bc:	4602      	mov	r2, r0
 80025be:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	0a9b      	lsrs	r3, r3, #10
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	4903      	ldr	r1, [pc, #12]	; (80025d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40023800 	.word	0x40023800
 80025d8:	08004ae8 	.word	0x08004ae8

080025dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025e0:	f7ff ffdc 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	0b5b      	lsrs	r3, r3, #13
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4903      	ldr	r1, [pc, #12]	; (8002600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40023800 	.word	0x40023800
 8002600:	08004ae8 	.word	0x08004ae8

08002604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d012      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800262c:	4b69      	ldr	r3, [pc, #420]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4a68      	ldr	r2, [pc, #416]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002632:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002636:	6093      	str	r3, [r2, #8]
 8002638:	4b66      	ldr	r3, [pc, #408]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002640:	4964      	ldr	r1, [pc, #400]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002642:	4313      	orrs	r3, r2
 8002644:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800264e:	2301      	movs	r3, #1
 8002650:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d017      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800265e:	4b5d      	ldr	r3, [pc, #372]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	4959      	ldr	r1, [pc, #356]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800267c:	d101      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800267e:	2301      	movs	r3, #1
 8002680:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800268a:	2301      	movs	r3, #1
 800268c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d017      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800269a:	4b4e      	ldr	r3, [pc, #312]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	494a      	ldr	r1, [pc, #296]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b8:	d101      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026c6:	2301      	movs	r3, #1
 80026c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026d6:	2301      	movs	r3, #1
 80026d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 808b 	beq.w	80027fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026e8:	4b3a      	ldr	r3, [pc, #232]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	4a39      	ldr	r2, [pc, #228]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f2:	6413      	str	r3, [r2, #64]	; 0x40
 80026f4:	4b37      	ldr	r3, [pc, #220]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002700:	4b35      	ldr	r3, [pc, #212]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a34      	ldr	r2, [pc, #208]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800270c:	f7ff f82e 	bl	800176c <HAL_GetTick>
 8002710:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002714:	f7ff f82a 	bl	800176c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	; 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e357      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002726:	4b2c      	ldr	r3, [pc, #176]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002732:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d035      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	429a      	cmp	r2, r3
 800274e:	d02e      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002750:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002758:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800275a:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002764:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	4a1a      	ldr	r2, [pc, #104]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002770:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002772:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d114      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe fff2 	bl	800176c <HAL_GetTick>
 8002788:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278a:	e00a      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800278c:	f7fe ffee 	bl	800176c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f241 3288 	movw	r2, #5000	; 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e319      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0ee      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027ba:	d111      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027ca:	400b      	ands	r3, r1
 80027cc:	4901      	ldr	r1, [pc, #4]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
 80027d2:	e00b      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40007000 	.word	0x40007000
 80027dc:	0ffffcff 	.word	0x0ffffcff
 80027e0:	4baa      	ldr	r3, [pc, #680]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4aa9      	ldr	r2, [pc, #676]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027ea:	6093      	str	r3, [r2, #8]
 80027ec:	4ba7      	ldr	r3, [pc, #668]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f8:	49a4      	ldr	r1, [pc, #656]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	2b00      	cmp	r3, #0
 8002808:	d010      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800280a:	4ba0      	ldr	r3, [pc, #640]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800280c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002810:	4a9e      	ldr	r2, [pc, #632]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002816:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800281a:	4b9c      	ldr	r3, [pc, #624]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800281c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002824:	4999      	ldr	r1, [pc, #612]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002838:	4b94      	ldr	r3, [pc, #592]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002846:	4991      	ldr	r1, [pc, #580]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800285a:	4b8c      	ldr	r3, [pc, #560]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002868:	4988      	ldr	r1, [pc, #544]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800287c:	4b83      	ldr	r3, [pc, #524]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002882:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800288a:	4980      	ldr	r1, [pc, #512]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800289e:	4b7b      	ldr	r3, [pc, #492]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4977      	ldr	r1, [pc, #476]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028c0:	4b72      	ldr	r3, [pc, #456]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c6:	f023 0203 	bic.w	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	496f      	ldr	r1, [pc, #444]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028e2:	4b6a      	ldr	r3, [pc, #424]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e8:	f023 020c 	bic.w	r2, r3, #12
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f0:	4966      	ldr	r1, [pc, #408]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002904:	4b61      	ldr	r3, [pc, #388]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	495e      	ldr	r1, [pc, #376]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002926:	4b59      	ldr	r3, [pc, #356]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002934:	4955      	ldr	r1, [pc, #340]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002948:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002956:	494d      	ldr	r1, [pc, #308]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800296a:	4b48      	ldr	r3, [pc, #288]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800296c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002970:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	4944      	ldr	r1, [pc, #272]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800298c:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002992:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	493c      	ldr	r1, [pc, #240]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029ae:	4b37      	ldr	r3, [pc, #220]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029bc:	4933      	ldr	r1, [pc, #204]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029d0:	4b2e      	ldr	r3, [pc, #184]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029de:	492b      	ldr	r1, [pc, #172]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d011      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029f2:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a00:	4922      	ldr	r1, [pc, #136]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a10:	d101      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a32:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a40:	4912      	ldr	r1, [pc, #72]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00b      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a54:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a64:	4909      	ldr	r1, [pc, #36]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d006      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 80d9 	beq.w	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a80:	4b02      	ldr	r3, [pc, #8]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a01      	ldr	r2, [pc, #4]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a8a:	e001      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a92:	f7fe fe6b 	bl	800176c <HAL_GetTick>
 8002a96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a9a:	f7fe fe67 	bl	800176c <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b64      	cmp	r3, #100	; 0x64
 8002aa6:	d901      	bls.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e194      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aac:	4b6c      	ldr	r3, [pc, #432]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f0      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d021      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d11d      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002acc:	4b64      	ldr	r3, [pc, #400]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad2:	0c1b      	lsrs	r3, r3, #16
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ada:	4b61      	ldr	r3, [pc, #388]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae0:	0e1b      	lsrs	r3, r3, #24
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	019a      	lsls	r2, r3, #6
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	041b      	lsls	r3, r3, #16
 8002af2:	431a      	orrs	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	061b      	lsls	r3, r3, #24
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	071b      	lsls	r3, r3, #28
 8002b00:	4957      	ldr	r1, [pc, #348]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d004      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d02e      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b32:	d129      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b34:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b3a:	0c1b      	lsrs	r3, r3, #16
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b42:	4b47      	ldr	r3, [pc, #284]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b48:	0f1b      	lsrs	r3, r3, #28
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	019a      	lsls	r2, r3, #6
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	061b      	lsls	r3, r3, #24
 8002b62:	431a      	orrs	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	071b      	lsls	r3, r3, #28
 8002b68:	493d      	ldr	r1, [pc, #244]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b70:	4b3b      	ldr	r3, [pc, #236]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b76:	f023 021f 	bic.w	r2, r3, #31
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	4937      	ldr	r1, [pc, #220]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01d      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b94:	4b32      	ldr	r3, [pc, #200]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9a:	0e1b      	lsrs	r3, r3, #24
 8002b9c:	f003 030f 	and.w	r3, r3, #15
 8002ba0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ba2:	4b2f      	ldr	r3, [pc, #188]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba8:	0f1b      	lsrs	r3, r3, #28
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	019a      	lsls	r2, r3, #6
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	041b      	lsls	r3, r3, #16
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	071b      	lsls	r3, r3, #28
 8002bc8:	4925      	ldr	r1, [pc, #148]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d011      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	019a      	lsls	r2, r3, #6
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	041b      	lsls	r3, r3, #16
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	061b      	lsls	r3, r3, #24
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	071b      	lsls	r3, r3, #28
 8002bf8:	4919      	ldr	r1, [pc, #100]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c00:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a16      	ldr	r2, [pc, #88]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0c:	f7fe fdae 	bl	800176c <HAL_GetTick>
 8002c10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c14:	f7fe fdaa 	bl	800176c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e0d7      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c26:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	f040 80cd 	bne.w	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c3a:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a08      	ldr	r2, [pc, #32]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c46:	f7fe fd91 	bl	800176c <HAL_GetTick>
 8002c4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c4c:	e00a      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c4e:	f7fe fd8d 	bl	800176c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b64      	cmp	r3, #100	; 0x64
 8002c5a:	d903      	bls.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e0ba      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002c60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c64:	4b5e      	ldr	r3, [pc, #376]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c70:	d0ed      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d009      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d02e      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d12a      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c9a:	4b51      	ldr	r3, [pc, #324]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ca8:	4b4d      	ldr	r3, [pc, #308]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cae:	0f1b      	lsrs	r3, r3, #28
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	019a      	lsls	r2, r3, #6
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	041b      	lsls	r3, r3, #16
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	061b      	lsls	r3, r3, #24
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	071b      	lsls	r3, r3, #28
 8002cce:	4944      	ldr	r1, [pc, #272]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002cd6:	4b42      	ldr	r3, [pc, #264]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cdc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	493d      	ldr	r1, [pc, #244]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d022      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d04:	d11d      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d06:	4b36      	ldr	r3, [pc, #216]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0c:	0e1b      	lsrs	r3, r3, #24
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d14:	4b32      	ldr	r3, [pc, #200]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1a:	0f1b      	lsrs	r3, r3, #28
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	019a      	lsls	r2, r3, #6
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	061b      	lsls	r3, r3, #24
 8002d34:	431a      	orrs	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	071b      	lsls	r3, r3, #28
 8002d3a:	4929      	ldr	r1, [pc, #164]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d028      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d4e:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d54:	0e1b      	lsrs	r3, r3, #24
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d5c:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	0c1b      	lsrs	r3, r3, #16
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	019a      	lsls	r2, r3, #6
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	041b      	lsls	r3, r3, #16
 8002d74:	431a      	orrs	r2, r3
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	061b      	lsls	r3, r3, #24
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	071b      	lsls	r3, r3, #28
 8002d82:	4917      	ldr	r1, [pc, #92]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	4911      	ldr	r1, [pc, #68]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0e      	ldr	r2, [pc, #56]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dac:	f7fe fcde 	bl	800176c <HAL_GetTick>
 8002db0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002db4:	f7fe fcda 	bl	800176c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	; 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e007      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd2:	d1ef      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800

08002de4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e040      	b.n	8002e78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fe fa0e 	bl	8001228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2224      	movs	r2, #36	; 0x24
 8002e10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f968 	bl	80030f8 <UART_SetConfig>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e022      	b.n	8002e78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fbc0 	bl	80035c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fc47 	bl	8003704 <UART_CheckIdleState>
 8002e76:	4603      	mov	r3, r0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e048      	b.n	8002f24 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe f9c0 	bl	8001228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2224      	movs	r2, #36	; 0x24
 8002eac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0201 	bic.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f91a 	bl	80030f8 <UART_SetConfig>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e02a      	b.n	8002f24 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fb72 	bl	80035c0 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002efa:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0208 	orr.w	r2, r2, #8
 8002f0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fbf1 	bl	8003704 <UART_CheckIdleState>
 8002f22:	4603      	mov	r3, r0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	; 0x28
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	f040 8081 	bne.w	8003048 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d002      	beq.n	8002f52 <HAL_UART_Transmit+0x26>
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e079      	b.n	800304a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_UART_Transmit+0x38>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e072      	b.n	800304a <HAL_UART_Transmit+0x11e>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2221      	movs	r2, #33	; 0x21
 8002f78:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f7a:	f7fe fbf7 	bl	800176c <HAL_GetTick>
 8002f7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	88fa      	ldrh	r2, [r7, #6]
 8002f84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	88fa      	ldrh	r2, [r7, #6]
 8002f8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f98:	d108      	bne.n	8002fac <HAL_UART_Transmit+0x80>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d104      	bne.n	8002fac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	e003      	b.n	8002fb4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002fbc:	e02c      	b.n	8003018 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2180      	movs	r1, #128	; 0x80
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fbce 	bl	800376a <UART_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e038      	b.n	800304a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10b      	bne.n	8002ff6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	61bb      	str	r3, [r7, #24]
 8002ff4:	e007      	b.n	8003006 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	781a      	ldrb	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	3301      	adds	r3, #1
 8003004:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1cc      	bne.n	8002fbe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2200      	movs	r2, #0
 800302c:	2140      	movs	r1, #64	; 0x40
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fb9b 	bl	800376a <UART_WaitOnFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e005      	b.n	800304a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	e000      	b.n	800304a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003048:	2302      	movs	r3, #2
  }
}
 800304a:	4618      	mov	r0, r3
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8003052:	b480      	push	{r7}
 8003054:	b08f      	sub	sp, #60	; 0x3c
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8003064:	2302      	movs	r3, #2
 8003066:	e040      	b.n	80030ea <HAL_HalfDuplex_EnableTransmitter+0x98>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2224      	movs	r2, #36	; 0x24
 8003074:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	e853 3f00 	ldrex	r3, [r3]
 8003082:	61fb      	str	r3, [r7, #28]
   return(result);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f023 030c 	bic.w	r3, r3, #12
 800308a:	637b      	str	r3, [r7, #52]	; 0x34
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003096:	62ba      	str	r2, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800309a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800309c:	e841 2300 	strex	r3, r2, [r1]
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e6      	bne.n	8003076 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	e853 3f00 	ldrex	r3, [r3]
 80030b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f043 0308 	orr.w	r3, r3, #8
 80030bc:	633b      	str	r3, [r7, #48]	; 0x30
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ca:	6979      	ldr	r1, [r7, #20]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	e841 2300 	strex	r3, r2, [r1]
 80030d2:	613b      	str	r3, [r7, #16]
   return(result);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e6      	bne.n	80030a8 <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	373c      	adds	r7, #60	; 0x3c
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4ba6      	ldr	r3, [pc, #664]	; (80033bc <UART_SetConfig+0x2c4>)
 8003124:	4013      	ands	r3, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	6979      	ldr	r1, [r7, #20]
 800312c:	430b      	orrs	r3, r1
 800312e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	430a      	orrs	r2, r1
 8003168:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a94      	ldr	r2, [pc, #592]	; (80033c0 <UART_SetConfig+0x2c8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d120      	bne.n	80031b6 <UART_SetConfig+0xbe>
 8003174:	4b93      	ldr	r3, [pc, #588]	; (80033c4 <UART_SetConfig+0x2cc>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b03      	cmp	r3, #3
 8003180:	d816      	bhi.n	80031b0 <UART_SetConfig+0xb8>
 8003182:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <UART_SetConfig+0x90>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	08003199 	.word	0x08003199
 800318c:	080031a5 	.word	0x080031a5
 8003190:	0800319f 	.word	0x0800319f
 8003194:	080031ab 	.word	0x080031ab
 8003198:	2301      	movs	r3, #1
 800319a:	77fb      	strb	r3, [r7, #31]
 800319c:	e150      	b.n	8003440 <UART_SetConfig+0x348>
 800319e:	2302      	movs	r3, #2
 80031a0:	77fb      	strb	r3, [r7, #31]
 80031a2:	e14d      	b.n	8003440 <UART_SetConfig+0x348>
 80031a4:	2304      	movs	r3, #4
 80031a6:	77fb      	strb	r3, [r7, #31]
 80031a8:	e14a      	b.n	8003440 <UART_SetConfig+0x348>
 80031aa:	2308      	movs	r3, #8
 80031ac:	77fb      	strb	r3, [r7, #31]
 80031ae:	e147      	b.n	8003440 <UART_SetConfig+0x348>
 80031b0:	2310      	movs	r3, #16
 80031b2:	77fb      	strb	r3, [r7, #31]
 80031b4:	e144      	b.n	8003440 <UART_SetConfig+0x348>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a83      	ldr	r2, [pc, #524]	; (80033c8 <UART_SetConfig+0x2d0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d132      	bne.n	8003226 <UART_SetConfig+0x12e>
 80031c0:	4b80      	ldr	r3, [pc, #512]	; (80033c4 <UART_SetConfig+0x2cc>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b0c      	cmp	r3, #12
 80031cc:	d828      	bhi.n	8003220 <UART_SetConfig+0x128>
 80031ce:	a201      	add	r2, pc, #4	; (adr r2, 80031d4 <UART_SetConfig+0xdc>)
 80031d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d4:	08003209 	.word	0x08003209
 80031d8:	08003221 	.word	0x08003221
 80031dc:	08003221 	.word	0x08003221
 80031e0:	08003221 	.word	0x08003221
 80031e4:	08003215 	.word	0x08003215
 80031e8:	08003221 	.word	0x08003221
 80031ec:	08003221 	.word	0x08003221
 80031f0:	08003221 	.word	0x08003221
 80031f4:	0800320f 	.word	0x0800320f
 80031f8:	08003221 	.word	0x08003221
 80031fc:	08003221 	.word	0x08003221
 8003200:	08003221 	.word	0x08003221
 8003204:	0800321b 	.word	0x0800321b
 8003208:	2300      	movs	r3, #0
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	e118      	b.n	8003440 <UART_SetConfig+0x348>
 800320e:	2302      	movs	r3, #2
 8003210:	77fb      	strb	r3, [r7, #31]
 8003212:	e115      	b.n	8003440 <UART_SetConfig+0x348>
 8003214:	2304      	movs	r3, #4
 8003216:	77fb      	strb	r3, [r7, #31]
 8003218:	e112      	b.n	8003440 <UART_SetConfig+0x348>
 800321a:	2308      	movs	r3, #8
 800321c:	77fb      	strb	r3, [r7, #31]
 800321e:	e10f      	b.n	8003440 <UART_SetConfig+0x348>
 8003220:	2310      	movs	r3, #16
 8003222:	77fb      	strb	r3, [r7, #31]
 8003224:	e10c      	b.n	8003440 <UART_SetConfig+0x348>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a68      	ldr	r2, [pc, #416]	; (80033cc <UART_SetConfig+0x2d4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d120      	bne.n	8003272 <UART_SetConfig+0x17a>
 8003230:	4b64      	ldr	r3, [pc, #400]	; (80033c4 <UART_SetConfig+0x2cc>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800323a:	2b30      	cmp	r3, #48	; 0x30
 800323c:	d013      	beq.n	8003266 <UART_SetConfig+0x16e>
 800323e:	2b30      	cmp	r3, #48	; 0x30
 8003240:	d814      	bhi.n	800326c <UART_SetConfig+0x174>
 8003242:	2b20      	cmp	r3, #32
 8003244:	d009      	beq.n	800325a <UART_SetConfig+0x162>
 8003246:	2b20      	cmp	r3, #32
 8003248:	d810      	bhi.n	800326c <UART_SetConfig+0x174>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <UART_SetConfig+0x15c>
 800324e:	2b10      	cmp	r3, #16
 8003250:	d006      	beq.n	8003260 <UART_SetConfig+0x168>
 8003252:	e00b      	b.n	800326c <UART_SetConfig+0x174>
 8003254:	2300      	movs	r3, #0
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e0f2      	b.n	8003440 <UART_SetConfig+0x348>
 800325a:	2302      	movs	r3, #2
 800325c:	77fb      	strb	r3, [r7, #31]
 800325e:	e0ef      	b.n	8003440 <UART_SetConfig+0x348>
 8003260:	2304      	movs	r3, #4
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	e0ec      	b.n	8003440 <UART_SetConfig+0x348>
 8003266:	2308      	movs	r3, #8
 8003268:	77fb      	strb	r3, [r7, #31]
 800326a:	e0e9      	b.n	8003440 <UART_SetConfig+0x348>
 800326c:	2310      	movs	r3, #16
 800326e:	77fb      	strb	r3, [r7, #31]
 8003270:	e0e6      	b.n	8003440 <UART_SetConfig+0x348>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a56      	ldr	r2, [pc, #344]	; (80033d0 <UART_SetConfig+0x2d8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d120      	bne.n	80032be <UART_SetConfig+0x1c6>
 800327c:	4b51      	ldr	r3, [pc, #324]	; (80033c4 <UART_SetConfig+0x2cc>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003286:	2bc0      	cmp	r3, #192	; 0xc0
 8003288:	d013      	beq.n	80032b2 <UART_SetConfig+0x1ba>
 800328a:	2bc0      	cmp	r3, #192	; 0xc0
 800328c:	d814      	bhi.n	80032b8 <UART_SetConfig+0x1c0>
 800328e:	2b80      	cmp	r3, #128	; 0x80
 8003290:	d009      	beq.n	80032a6 <UART_SetConfig+0x1ae>
 8003292:	2b80      	cmp	r3, #128	; 0x80
 8003294:	d810      	bhi.n	80032b8 <UART_SetConfig+0x1c0>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <UART_SetConfig+0x1a8>
 800329a:	2b40      	cmp	r3, #64	; 0x40
 800329c:	d006      	beq.n	80032ac <UART_SetConfig+0x1b4>
 800329e:	e00b      	b.n	80032b8 <UART_SetConfig+0x1c0>
 80032a0:	2300      	movs	r3, #0
 80032a2:	77fb      	strb	r3, [r7, #31]
 80032a4:	e0cc      	b.n	8003440 <UART_SetConfig+0x348>
 80032a6:	2302      	movs	r3, #2
 80032a8:	77fb      	strb	r3, [r7, #31]
 80032aa:	e0c9      	b.n	8003440 <UART_SetConfig+0x348>
 80032ac:	2304      	movs	r3, #4
 80032ae:	77fb      	strb	r3, [r7, #31]
 80032b0:	e0c6      	b.n	8003440 <UART_SetConfig+0x348>
 80032b2:	2308      	movs	r3, #8
 80032b4:	77fb      	strb	r3, [r7, #31]
 80032b6:	e0c3      	b.n	8003440 <UART_SetConfig+0x348>
 80032b8:	2310      	movs	r3, #16
 80032ba:	77fb      	strb	r3, [r7, #31]
 80032bc:	e0c0      	b.n	8003440 <UART_SetConfig+0x348>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a44      	ldr	r2, [pc, #272]	; (80033d4 <UART_SetConfig+0x2dc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d125      	bne.n	8003314 <UART_SetConfig+0x21c>
 80032c8:	4b3e      	ldr	r3, [pc, #248]	; (80033c4 <UART_SetConfig+0x2cc>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032d6:	d017      	beq.n	8003308 <UART_SetConfig+0x210>
 80032d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032dc:	d817      	bhi.n	800330e <UART_SetConfig+0x216>
 80032de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e2:	d00b      	beq.n	80032fc <UART_SetConfig+0x204>
 80032e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e8:	d811      	bhi.n	800330e <UART_SetConfig+0x216>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <UART_SetConfig+0x1fe>
 80032ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f2:	d006      	beq.n	8003302 <UART_SetConfig+0x20a>
 80032f4:	e00b      	b.n	800330e <UART_SetConfig+0x216>
 80032f6:	2300      	movs	r3, #0
 80032f8:	77fb      	strb	r3, [r7, #31]
 80032fa:	e0a1      	b.n	8003440 <UART_SetConfig+0x348>
 80032fc:	2302      	movs	r3, #2
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e09e      	b.n	8003440 <UART_SetConfig+0x348>
 8003302:	2304      	movs	r3, #4
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	e09b      	b.n	8003440 <UART_SetConfig+0x348>
 8003308:	2308      	movs	r3, #8
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e098      	b.n	8003440 <UART_SetConfig+0x348>
 800330e:	2310      	movs	r3, #16
 8003310:	77fb      	strb	r3, [r7, #31]
 8003312:	e095      	b.n	8003440 <UART_SetConfig+0x348>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a2f      	ldr	r2, [pc, #188]	; (80033d8 <UART_SetConfig+0x2e0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d125      	bne.n	800336a <UART_SetConfig+0x272>
 800331e:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <UART_SetConfig+0x2cc>)
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003324:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003328:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800332c:	d017      	beq.n	800335e <UART_SetConfig+0x266>
 800332e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003332:	d817      	bhi.n	8003364 <UART_SetConfig+0x26c>
 8003334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003338:	d00b      	beq.n	8003352 <UART_SetConfig+0x25a>
 800333a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800333e:	d811      	bhi.n	8003364 <UART_SetConfig+0x26c>
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <UART_SetConfig+0x254>
 8003344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003348:	d006      	beq.n	8003358 <UART_SetConfig+0x260>
 800334a:	e00b      	b.n	8003364 <UART_SetConfig+0x26c>
 800334c:	2301      	movs	r3, #1
 800334e:	77fb      	strb	r3, [r7, #31]
 8003350:	e076      	b.n	8003440 <UART_SetConfig+0x348>
 8003352:	2302      	movs	r3, #2
 8003354:	77fb      	strb	r3, [r7, #31]
 8003356:	e073      	b.n	8003440 <UART_SetConfig+0x348>
 8003358:	2304      	movs	r3, #4
 800335a:	77fb      	strb	r3, [r7, #31]
 800335c:	e070      	b.n	8003440 <UART_SetConfig+0x348>
 800335e:	2308      	movs	r3, #8
 8003360:	77fb      	strb	r3, [r7, #31]
 8003362:	e06d      	b.n	8003440 <UART_SetConfig+0x348>
 8003364:	2310      	movs	r3, #16
 8003366:	77fb      	strb	r3, [r7, #31]
 8003368:	e06a      	b.n	8003440 <UART_SetConfig+0x348>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1b      	ldr	r2, [pc, #108]	; (80033dc <UART_SetConfig+0x2e4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d138      	bne.n	80033e6 <UART_SetConfig+0x2ee>
 8003374:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <UART_SetConfig+0x2cc>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800337e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003382:	d017      	beq.n	80033b4 <UART_SetConfig+0x2bc>
 8003384:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003388:	d82a      	bhi.n	80033e0 <UART_SetConfig+0x2e8>
 800338a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338e:	d00b      	beq.n	80033a8 <UART_SetConfig+0x2b0>
 8003390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003394:	d824      	bhi.n	80033e0 <UART_SetConfig+0x2e8>
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <UART_SetConfig+0x2aa>
 800339a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339e:	d006      	beq.n	80033ae <UART_SetConfig+0x2b6>
 80033a0:	e01e      	b.n	80033e0 <UART_SetConfig+0x2e8>
 80033a2:	2300      	movs	r3, #0
 80033a4:	77fb      	strb	r3, [r7, #31]
 80033a6:	e04b      	b.n	8003440 <UART_SetConfig+0x348>
 80033a8:	2302      	movs	r3, #2
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	e048      	b.n	8003440 <UART_SetConfig+0x348>
 80033ae:	2304      	movs	r3, #4
 80033b0:	77fb      	strb	r3, [r7, #31]
 80033b2:	e045      	b.n	8003440 <UART_SetConfig+0x348>
 80033b4:	2308      	movs	r3, #8
 80033b6:	77fb      	strb	r3, [r7, #31]
 80033b8:	e042      	b.n	8003440 <UART_SetConfig+0x348>
 80033ba:	bf00      	nop
 80033bc:	efff69f3 	.word	0xefff69f3
 80033c0:	40011000 	.word	0x40011000
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40004400 	.word	0x40004400
 80033cc:	40004800 	.word	0x40004800
 80033d0:	40004c00 	.word	0x40004c00
 80033d4:	40005000 	.word	0x40005000
 80033d8:	40011400 	.word	0x40011400
 80033dc:	40007800 	.word	0x40007800
 80033e0:	2310      	movs	r3, #16
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e02c      	b.n	8003440 <UART_SetConfig+0x348>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a72      	ldr	r2, [pc, #456]	; (80035b4 <UART_SetConfig+0x4bc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d125      	bne.n	800343c <UART_SetConfig+0x344>
 80033f0:	4b71      	ldr	r3, [pc, #452]	; (80035b8 <UART_SetConfig+0x4c0>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033fe:	d017      	beq.n	8003430 <UART_SetConfig+0x338>
 8003400:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003404:	d817      	bhi.n	8003436 <UART_SetConfig+0x33e>
 8003406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340a:	d00b      	beq.n	8003424 <UART_SetConfig+0x32c>
 800340c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003410:	d811      	bhi.n	8003436 <UART_SetConfig+0x33e>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <UART_SetConfig+0x326>
 8003416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800341a:	d006      	beq.n	800342a <UART_SetConfig+0x332>
 800341c:	e00b      	b.n	8003436 <UART_SetConfig+0x33e>
 800341e:	2300      	movs	r3, #0
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e00d      	b.n	8003440 <UART_SetConfig+0x348>
 8003424:	2302      	movs	r3, #2
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e00a      	b.n	8003440 <UART_SetConfig+0x348>
 800342a:	2304      	movs	r3, #4
 800342c:	77fb      	strb	r3, [r7, #31]
 800342e:	e007      	b.n	8003440 <UART_SetConfig+0x348>
 8003430:	2308      	movs	r3, #8
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e004      	b.n	8003440 <UART_SetConfig+0x348>
 8003436:	2310      	movs	r3, #16
 8003438:	77fb      	strb	r3, [r7, #31]
 800343a:	e001      	b.n	8003440 <UART_SetConfig+0x348>
 800343c:	2310      	movs	r3, #16
 800343e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003448:	d15b      	bne.n	8003502 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800344a:	7ffb      	ldrb	r3, [r7, #31]
 800344c:	2b08      	cmp	r3, #8
 800344e:	d828      	bhi.n	80034a2 <UART_SetConfig+0x3aa>
 8003450:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <UART_SetConfig+0x360>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	0800347d 	.word	0x0800347d
 800345c:	08003485 	.word	0x08003485
 8003460:	0800348d 	.word	0x0800348d
 8003464:	080034a3 	.word	0x080034a3
 8003468:	08003493 	.word	0x08003493
 800346c:	080034a3 	.word	0x080034a3
 8003470:	080034a3 	.word	0x080034a3
 8003474:	080034a3 	.word	0x080034a3
 8003478:	0800349b 	.word	0x0800349b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800347c:	f7ff f89a 	bl	80025b4 <HAL_RCC_GetPCLK1Freq>
 8003480:	61b8      	str	r0, [r7, #24]
        break;
 8003482:	e013      	b.n	80034ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003484:	f7ff f8aa 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 8003488:	61b8      	str	r0, [r7, #24]
        break;
 800348a:	e00f      	b.n	80034ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800348c:	4b4b      	ldr	r3, [pc, #300]	; (80035bc <UART_SetConfig+0x4c4>)
 800348e:	61bb      	str	r3, [r7, #24]
        break;
 8003490:	e00c      	b.n	80034ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003492:	f7fe ffbd 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 8003496:	61b8      	str	r0, [r7, #24]
        break;
 8003498:	e008      	b.n	80034ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800349a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349e:	61bb      	str	r3, [r7, #24]
        break;
 80034a0:	e004      	b.n	80034ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	77bb      	strb	r3, [r7, #30]
        break;
 80034aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d074      	beq.n	800359c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	005a      	lsls	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	085b      	lsrs	r3, r3, #1
 80034bc:	441a      	add	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	2b0f      	cmp	r3, #15
 80034cc:	d916      	bls.n	80034fc <UART_SetConfig+0x404>
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d4:	d212      	bcs.n	80034fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	f023 030f 	bic.w	r3, r3, #15
 80034de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	89fb      	ldrh	r3, [r7, #14]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	89fa      	ldrh	r2, [r7, #14]
 80034f8:	60da      	str	r2, [r3, #12]
 80034fa:	e04f      	b.n	800359c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	77bb      	strb	r3, [r7, #30]
 8003500:	e04c      	b.n	800359c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003502:	7ffb      	ldrb	r3, [r7, #31]
 8003504:	2b08      	cmp	r3, #8
 8003506:	d828      	bhi.n	800355a <UART_SetConfig+0x462>
 8003508:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <UART_SetConfig+0x418>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003535 	.word	0x08003535
 8003514:	0800353d 	.word	0x0800353d
 8003518:	08003545 	.word	0x08003545
 800351c:	0800355b 	.word	0x0800355b
 8003520:	0800354b 	.word	0x0800354b
 8003524:	0800355b 	.word	0x0800355b
 8003528:	0800355b 	.word	0x0800355b
 800352c:	0800355b 	.word	0x0800355b
 8003530:	08003553 	.word	0x08003553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003534:	f7ff f83e 	bl	80025b4 <HAL_RCC_GetPCLK1Freq>
 8003538:	61b8      	str	r0, [r7, #24]
        break;
 800353a:	e013      	b.n	8003564 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800353c:	f7ff f84e 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 8003540:	61b8      	str	r0, [r7, #24]
        break;
 8003542:	e00f      	b.n	8003564 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003544:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <UART_SetConfig+0x4c4>)
 8003546:	61bb      	str	r3, [r7, #24]
        break;
 8003548:	e00c      	b.n	8003564 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800354a:	f7fe ff61 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 800354e:	61b8      	str	r0, [r7, #24]
        break;
 8003550:	e008      	b.n	8003564 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003556:	61bb      	str	r3, [r7, #24]
        break;
 8003558:	e004      	b.n	8003564 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	77bb      	strb	r3, [r7, #30]
        break;
 8003562:	bf00      	nop
    }

    if (pclk != 0U)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d018      	beq.n	800359c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	085a      	lsrs	r2, r3, #1
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	441a      	add	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b0f      	cmp	r3, #15
 8003582:	d909      	bls.n	8003598 <UART_SetConfig+0x4a0>
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358a:	d205      	bcs.n	8003598 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	b29a      	uxth	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	e001      	b.n	800359c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40007c00 	.word	0x40007c00
 80035b8:	40023800 	.word	0x40023800
 80035bc:	00f42400 	.word	0x00f42400

080035c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01a      	beq.n	80036d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036be:	d10a      	bne.n	80036d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	605a      	str	r2, [r3, #4]
  }
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af02      	add	r7, sp, #8
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003714:	f7fe f82a 	bl	800176c <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b08      	cmp	r3, #8
 8003726:	d10e      	bne.n	8003746 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f817 	bl	800376a <UART_WaitOnFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e00d      	b.n	8003762 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b09c      	sub	sp, #112	; 0x70
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	4613      	mov	r3, r2
 8003778:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377a:	e0a5      	b.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800377e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003782:	f000 80a1 	beq.w	80038c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003786:	f7fd fff1 	bl	800176c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <UART_WaitOnFlagUntilTimeout+0x32>
 8003796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003798:	2b00      	cmp	r3, #0
 800379a:	d13e      	bne.n	800381a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037b0:	667b      	str	r3, [r7, #100]	; 0x64
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e6      	bne.n	800379c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3308      	adds	r3, #8
 80037d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d8:	e853 3f00 	ldrex	r3, [r3]
 80037dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	663b      	str	r3, [r7, #96]	; 0x60
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3308      	adds	r3, #8
 80037ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80037f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e5      	bne.n	80037ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e067      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d04f      	beq.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003836:	d147      	bne.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003840:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384a:	e853 3f00 	ldrex	r3, [r3]
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003856:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003860:	637b      	str	r3, [r7, #52]	; 0x34
 8003862:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003864:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003868:	e841 2300 	strex	r3, r2, [r1]
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1e6      	bne.n	8003842 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3308      	adds	r3, #8
 800387a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	e853 3f00 	ldrex	r3, [r3]
 8003882:	613b      	str	r3, [r7, #16]
   return(result);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f023 0301 	bic.w	r3, r3, #1
 800388a:	66bb      	str	r3, [r7, #104]	; 0x68
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3308      	adds	r3, #8
 8003892:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003894:	623a      	str	r2, [r7, #32]
 8003896:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	69f9      	ldr	r1, [r7, #28]
 800389a:	6a3a      	ldr	r2, [r7, #32]
 800389c:	e841 2300 	strex	r3, r2, [r1]
 80038a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e5      	bne.n	8003874 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e010      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4013      	ands	r3, r2
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	f43f af4a 	beq.w	800377c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3770      	adds	r7, #112	; 0x70
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <__errno>:
 80038f4:	4b01      	ldr	r3, [pc, #4]	; (80038fc <__errno+0x8>)
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	2000000c 	.word	0x2000000c

08003900 <__libc_init_array>:
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	4d0d      	ldr	r5, [pc, #52]	; (8003938 <__libc_init_array+0x38>)
 8003904:	4c0d      	ldr	r4, [pc, #52]	; (800393c <__libc_init_array+0x3c>)
 8003906:	1b64      	subs	r4, r4, r5
 8003908:	10a4      	asrs	r4, r4, #2
 800390a:	2600      	movs	r6, #0
 800390c:	42a6      	cmp	r6, r4
 800390e:	d109      	bne.n	8003924 <__libc_init_array+0x24>
 8003910:	4d0b      	ldr	r5, [pc, #44]	; (8003940 <__libc_init_array+0x40>)
 8003912:	4c0c      	ldr	r4, [pc, #48]	; (8003944 <__libc_init_array+0x44>)
 8003914:	f000 ffcc 	bl	80048b0 <_init>
 8003918:	1b64      	subs	r4, r4, r5
 800391a:	10a4      	asrs	r4, r4, #2
 800391c:	2600      	movs	r6, #0
 800391e:	42a6      	cmp	r6, r4
 8003920:	d105      	bne.n	800392e <__libc_init_array+0x2e>
 8003922:	bd70      	pop	{r4, r5, r6, pc}
 8003924:	f855 3b04 	ldr.w	r3, [r5], #4
 8003928:	4798      	blx	r3
 800392a:	3601      	adds	r6, #1
 800392c:	e7ee      	b.n	800390c <__libc_init_array+0xc>
 800392e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003932:	4798      	blx	r3
 8003934:	3601      	adds	r6, #1
 8003936:	e7f2      	b.n	800391e <__libc_init_array+0x1e>
 8003938:	08004b90 	.word	0x08004b90
 800393c:	08004b90 	.word	0x08004b90
 8003940:	08004b90 	.word	0x08004b90
 8003944:	08004b94 	.word	0x08004b94

08003948 <malloc>:
 8003948:	4b02      	ldr	r3, [pc, #8]	; (8003954 <malloc+0xc>)
 800394a:	4601      	mov	r1, r0
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	f000 b88d 	b.w	8003a6c <_malloc_r>
 8003952:	bf00      	nop
 8003954:	2000000c 	.word	0x2000000c

08003958 <free>:
 8003958:	4b02      	ldr	r3, [pc, #8]	; (8003964 <free+0xc>)
 800395a:	4601      	mov	r1, r0
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	f000 b819 	b.w	8003994 <_free_r>
 8003962:	bf00      	nop
 8003964:	2000000c 	.word	0x2000000c

08003968 <memcpy>:
 8003968:	440a      	add	r2, r1
 800396a:	4291      	cmp	r1, r2
 800396c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003970:	d100      	bne.n	8003974 <memcpy+0xc>
 8003972:	4770      	bx	lr
 8003974:	b510      	push	{r4, lr}
 8003976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800397a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800397e:	4291      	cmp	r1, r2
 8003980:	d1f9      	bne.n	8003976 <memcpy+0xe>
 8003982:	bd10      	pop	{r4, pc}

08003984 <memset>:
 8003984:	4402      	add	r2, r0
 8003986:	4603      	mov	r3, r0
 8003988:	4293      	cmp	r3, r2
 800398a:	d100      	bne.n	800398e <memset+0xa>
 800398c:	4770      	bx	lr
 800398e:	f803 1b01 	strb.w	r1, [r3], #1
 8003992:	e7f9      	b.n	8003988 <memset+0x4>

08003994 <_free_r>:
 8003994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003996:	2900      	cmp	r1, #0
 8003998:	d044      	beq.n	8003a24 <_free_r+0x90>
 800399a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800399e:	9001      	str	r0, [sp, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f1a1 0404 	sub.w	r4, r1, #4
 80039a6:	bfb8      	it	lt
 80039a8:	18e4      	addlt	r4, r4, r3
 80039aa:	f000 f9f3 	bl	8003d94 <__malloc_lock>
 80039ae:	4a1e      	ldr	r2, [pc, #120]	; (8003a28 <_free_r+0x94>)
 80039b0:	9801      	ldr	r0, [sp, #4]
 80039b2:	6813      	ldr	r3, [r2, #0]
 80039b4:	b933      	cbnz	r3, 80039c4 <_free_r+0x30>
 80039b6:	6063      	str	r3, [r4, #4]
 80039b8:	6014      	str	r4, [r2, #0]
 80039ba:	b003      	add	sp, #12
 80039bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039c0:	f000 b9ee 	b.w	8003da0 <__malloc_unlock>
 80039c4:	42a3      	cmp	r3, r4
 80039c6:	d908      	bls.n	80039da <_free_r+0x46>
 80039c8:	6825      	ldr	r5, [r4, #0]
 80039ca:	1961      	adds	r1, r4, r5
 80039cc:	428b      	cmp	r3, r1
 80039ce:	bf01      	itttt	eq
 80039d0:	6819      	ldreq	r1, [r3, #0]
 80039d2:	685b      	ldreq	r3, [r3, #4]
 80039d4:	1949      	addeq	r1, r1, r5
 80039d6:	6021      	streq	r1, [r4, #0]
 80039d8:	e7ed      	b.n	80039b6 <_free_r+0x22>
 80039da:	461a      	mov	r2, r3
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	b10b      	cbz	r3, 80039e4 <_free_r+0x50>
 80039e0:	42a3      	cmp	r3, r4
 80039e2:	d9fa      	bls.n	80039da <_free_r+0x46>
 80039e4:	6811      	ldr	r1, [r2, #0]
 80039e6:	1855      	adds	r5, r2, r1
 80039e8:	42a5      	cmp	r5, r4
 80039ea:	d10b      	bne.n	8003a04 <_free_r+0x70>
 80039ec:	6824      	ldr	r4, [r4, #0]
 80039ee:	4421      	add	r1, r4
 80039f0:	1854      	adds	r4, r2, r1
 80039f2:	42a3      	cmp	r3, r4
 80039f4:	6011      	str	r1, [r2, #0]
 80039f6:	d1e0      	bne.n	80039ba <_free_r+0x26>
 80039f8:	681c      	ldr	r4, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	6053      	str	r3, [r2, #4]
 80039fe:	4421      	add	r1, r4
 8003a00:	6011      	str	r1, [r2, #0]
 8003a02:	e7da      	b.n	80039ba <_free_r+0x26>
 8003a04:	d902      	bls.n	8003a0c <_free_r+0x78>
 8003a06:	230c      	movs	r3, #12
 8003a08:	6003      	str	r3, [r0, #0]
 8003a0a:	e7d6      	b.n	80039ba <_free_r+0x26>
 8003a0c:	6825      	ldr	r5, [r4, #0]
 8003a0e:	1961      	adds	r1, r4, r5
 8003a10:	428b      	cmp	r3, r1
 8003a12:	bf04      	itt	eq
 8003a14:	6819      	ldreq	r1, [r3, #0]
 8003a16:	685b      	ldreq	r3, [r3, #4]
 8003a18:	6063      	str	r3, [r4, #4]
 8003a1a:	bf04      	itt	eq
 8003a1c:	1949      	addeq	r1, r1, r5
 8003a1e:	6021      	streq	r1, [r4, #0]
 8003a20:	6054      	str	r4, [r2, #4]
 8003a22:	e7ca      	b.n	80039ba <_free_r+0x26>
 8003a24:	b003      	add	sp, #12
 8003a26:	bd30      	pop	{r4, r5, pc}
 8003a28:	200001a0 	.word	0x200001a0

08003a2c <sbrk_aligned>:
 8003a2c:	b570      	push	{r4, r5, r6, lr}
 8003a2e:	4e0e      	ldr	r6, [pc, #56]	; (8003a68 <sbrk_aligned+0x3c>)
 8003a30:	460c      	mov	r4, r1
 8003a32:	6831      	ldr	r1, [r6, #0]
 8003a34:	4605      	mov	r5, r0
 8003a36:	b911      	cbnz	r1, 8003a3e <sbrk_aligned+0x12>
 8003a38:	f000 f8a4 	bl	8003b84 <_sbrk_r>
 8003a3c:	6030      	str	r0, [r6, #0]
 8003a3e:	4621      	mov	r1, r4
 8003a40:	4628      	mov	r0, r5
 8003a42:	f000 f89f 	bl	8003b84 <_sbrk_r>
 8003a46:	1c43      	adds	r3, r0, #1
 8003a48:	d00a      	beq.n	8003a60 <sbrk_aligned+0x34>
 8003a4a:	1cc4      	adds	r4, r0, #3
 8003a4c:	f024 0403 	bic.w	r4, r4, #3
 8003a50:	42a0      	cmp	r0, r4
 8003a52:	d007      	beq.n	8003a64 <sbrk_aligned+0x38>
 8003a54:	1a21      	subs	r1, r4, r0
 8003a56:	4628      	mov	r0, r5
 8003a58:	f000 f894 	bl	8003b84 <_sbrk_r>
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d101      	bne.n	8003a64 <sbrk_aligned+0x38>
 8003a60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003a64:	4620      	mov	r0, r4
 8003a66:	bd70      	pop	{r4, r5, r6, pc}
 8003a68:	200001a4 	.word	0x200001a4

08003a6c <_malloc_r>:
 8003a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a70:	1ccd      	adds	r5, r1, #3
 8003a72:	f025 0503 	bic.w	r5, r5, #3
 8003a76:	3508      	adds	r5, #8
 8003a78:	2d0c      	cmp	r5, #12
 8003a7a:	bf38      	it	cc
 8003a7c:	250c      	movcc	r5, #12
 8003a7e:	2d00      	cmp	r5, #0
 8003a80:	4607      	mov	r7, r0
 8003a82:	db01      	blt.n	8003a88 <_malloc_r+0x1c>
 8003a84:	42a9      	cmp	r1, r5
 8003a86:	d905      	bls.n	8003a94 <_malloc_r+0x28>
 8003a88:	230c      	movs	r3, #12
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	2600      	movs	r6, #0
 8003a8e:	4630      	mov	r0, r6
 8003a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a94:	4e2e      	ldr	r6, [pc, #184]	; (8003b50 <_malloc_r+0xe4>)
 8003a96:	f000 f97d 	bl	8003d94 <__malloc_lock>
 8003a9a:	6833      	ldr	r3, [r6, #0]
 8003a9c:	461c      	mov	r4, r3
 8003a9e:	bb34      	cbnz	r4, 8003aee <_malloc_r+0x82>
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	f7ff ffc2 	bl	8003a2c <sbrk_aligned>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	4604      	mov	r4, r0
 8003aac:	d14d      	bne.n	8003b4a <_malloc_r+0xde>
 8003aae:	6834      	ldr	r4, [r6, #0]
 8003ab0:	4626      	mov	r6, r4
 8003ab2:	2e00      	cmp	r6, #0
 8003ab4:	d140      	bne.n	8003b38 <_malloc_r+0xcc>
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	4631      	mov	r1, r6
 8003aba:	4638      	mov	r0, r7
 8003abc:	eb04 0803 	add.w	r8, r4, r3
 8003ac0:	f000 f860 	bl	8003b84 <_sbrk_r>
 8003ac4:	4580      	cmp	r8, r0
 8003ac6:	d13a      	bne.n	8003b3e <_malloc_r+0xd2>
 8003ac8:	6821      	ldr	r1, [r4, #0]
 8003aca:	3503      	adds	r5, #3
 8003acc:	1a6d      	subs	r5, r5, r1
 8003ace:	f025 0503 	bic.w	r5, r5, #3
 8003ad2:	3508      	adds	r5, #8
 8003ad4:	2d0c      	cmp	r5, #12
 8003ad6:	bf38      	it	cc
 8003ad8:	250c      	movcc	r5, #12
 8003ada:	4629      	mov	r1, r5
 8003adc:	4638      	mov	r0, r7
 8003ade:	f7ff ffa5 	bl	8003a2c <sbrk_aligned>
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	d02b      	beq.n	8003b3e <_malloc_r+0xd2>
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	442b      	add	r3, r5
 8003aea:	6023      	str	r3, [r4, #0]
 8003aec:	e00e      	b.n	8003b0c <_malloc_r+0xa0>
 8003aee:	6822      	ldr	r2, [r4, #0]
 8003af0:	1b52      	subs	r2, r2, r5
 8003af2:	d41e      	bmi.n	8003b32 <_malloc_r+0xc6>
 8003af4:	2a0b      	cmp	r2, #11
 8003af6:	d916      	bls.n	8003b26 <_malloc_r+0xba>
 8003af8:	1961      	adds	r1, r4, r5
 8003afa:	42a3      	cmp	r3, r4
 8003afc:	6025      	str	r5, [r4, #0]
 8003afe:	bf18      	it	ne
 8003b00:	6059      	strne	r1, [r3, #4]
 8003b02:	6863      	ldr	r3, [r4, #4]
 8003b04:	bf08      	it	eq
 8003b06:	6031      	streq	r1, [r6, #0]
 8003b08:	5162      	str	r2, [r4, r5]
 8003b0a:	604b      	str	r3, [r1, #4]
 8003b0c:	4638      	mov	r0, r7
 8003b0e:	f104 060b 	add.w	r6, r4, #11
 8003b12:	f000 f945 	bl	8003da0 <__malloc_unlock>
 8003b16:	f026 0607 	bic.w	r6, r6, #7
 8003b1a:	1d23      	adds	r3, r4, #4
 8003b1c:	1af2      	subs	r2, r6, r3
 8003b1e:	d0b6      	beq.n	8003a8e <_malloc_r+0x22>
 8003b20:	1b9b      	subs	r3, r3, r6
 8003b22:	50a3      	str	r3, [r4, r2]
 8003b24:	e7b3      	b.n	8003a8e <_malloc_r+0x22>
 8003b26:	6862      	ldr	r2, [r4, #4]
 8003b28:	42a3      	cmp	r3, r4
 8003b2a:	bf0c      	ite	eq
 8003b2c:	6032      	streq	r2, [r6, #0]
 8003b2e:	605a      	strne	r2, [r3, #4]
 8003b30:	e7ec      	b.n	8003b0c <_malloc_r+0xa0>
 8003b32:	4623      	mov	r3, r4
 8003b34:	6864      	ldr	r4, [r4, #4]
 8003b36:	e7b2      	b.n	8003a9e <_malloc_r+0x32>
 8003b38:	4634      	mov	r4, r6
 8003b3a:	6876      	ldr	r6, [r6, #4]
 8003b3c:	e7b9      	b.n	8003ab2 <_malloc_r+0x46>
 8003b3e:	230c      	movs	r3, #12
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	4638      	mov	r0, r7
 8003b44:	f000 f92c 	bl	8003da0 <__malloc_unlock>
 8003b48:	e7a1      	b.n	8003a8e <_malloc_r+0x22>
 8003b4a:	6025      	str	r5, [r4, #0]
 8003b4c:	e7de      	b.n	8003b0c <_malloc_r+0xa0>
 8003b4e:	bf00      	nop
 8003b50:	200001a0 	.word	0x200001a0

08003b54 <iprintf>:
 8003b54:	b40f      	push	{r0, r1, r2, r3}
 8003b56:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <iprintf+0x2c>)
 8003b58:	b513      	push	{r0, r1, r4, lr}
 8003b5a:	681c      	ldr	r4, [r3, #0]
 8003b5c:	b124      	cbz	r4, 8003b68 <iprintf+0x14>
 8003b5e:	69a3      	ldr	r3, [r4, #24]
 8003b60:	b913      	cbnz	r3, 8003b68 <iprintf+0x14>
 8003b62:	4620      	mov	r0, r4
 8003b64:	f000 f876 	bl	8003c54 <__sinit>
 8003b68:	ab05      	add	r3, sp, #20
 8003b6a:	9a04      	ldr	r2, [sp, #16]
 8003b6c:	68a1      	ldr	r1, [r4, #8]
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	4620      	mov	r0, r4
 8003b72:	f000 f945 	bl	8003e00 <_vfiprintf_r>
 8003b76:	b002      	add	sp, #8
 8003b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b7c:	b004      	add	sp, #16
 8003b7e:	4770      	bx	lr
 8003b80:	2000000c 	.word	0x2000000c

08003b84 <_sbrk_r>:
 8003b84:	b538      	push	{r3, r4, r5, lr}
 8003b86:	4d06      	ldr	r5, [pc, #24]	; (8003ba0 <_sbrk_r+0x1c>)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	602b      	str	r3, [r5, #0]
 8003b90:	f7fd faa2 	bl	80010d8 <_sbrk>
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	d102      	bne.n	8003b9e <_sbrk_r+0x1a>
 8003b98:	682b      	ldr	r3, [r5, #0]
 8003b9a:	b103      	cbz	r3, 8003b9e <_sbrk_r+0x1a>
 8003b9c:	6023      	str	r3, [r4, #0]
 8003b9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ba0:	200001ac 	.word	0x200001ac

08003ba4 <std>:
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	b510      	push	{r4, lr}
 8003ba8:	4604      	mov	r4, r0
 8003baa:	e9c0 3300 	strd	r3, r3, [r0]
 8003bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bb2:	6083      	str	r3, [r0, #8]
 8003bb4:	8181      	strh	r1, [r0, #12]
 8003bb6:	6643      	str	r3, [r0, #100]	; 0x64
 8003bb8:	81c2      	strh	r2, [r0, #14]
 8003bba:	6183      	str	r3, [r0, #24]
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	2208      	movs	r2, #8
 8003bc0:	305c      	adds	r0, #92	; 0x5c
 8003bc2:	f7ff fedf 	bl	8003984 <memset>
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <std+0x38>)
 8003bc8:	6263      	str	r3, [r4, #36]	; 0x24
 8003bca:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <std+0x3c>)
 8003bcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <std+0x40>)
 8003bd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bd2:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <std+0x44>)
 8003bd4:	6224      	str	r4, [r4, #32]
 8003bd6:	6323      	str	r3, [r4, #48]	; 0x30
 8003bd8:	bd10      	pop	{r4, pc}
 8003bda:	bf00      	nop
 8003bdc:	08004389 	.word	0x08004389
 8003be0:	080043ab 	.word	0x080043ab
 8003be4:	080043e3 	.word	0x080043e3
 8003be8:	08004407 	.word	0x08004407

08003bec <_cleanup_r>:
 8003bec:	4901      	ldr	r1, [pc, #4]	; (8003bf4 <_cleanup_r+0x8>)
 8003bee:	f000 b8af 	b.w	8003d50 <_fwalk_reent>
 8003bf2:	bf00      	nop
 8003bf4:	080046e1 	.word	0x080046e1

08003bf8 <__sfmoreglue>:
 8003bf8:	b570      	push	{r4, r5, r6, lr}
 8003bfa:	2268      	movs	r2, #104	; 0x68
 8003bfc:	1e4d      	subs	r5, r1, #1
 8003bfe:	4355      	muls	r5, r2
 8003c00:	460e      	mov	r6, r1
 8003c02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c06:	f7ff ff31 	bl	8003a6c <_malloc_r>
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	b140      	cbz	r0, 8003c20 <__sfmoreglue+0x28>
 8003c0e:	2100      	movs	r1, #0
 8003c10:	e9c0 1600 	strd	r1, r6, [r0]
 8003c14:	300c      	adds	r0, #12
 8003c16:	60a0      	str	r0, [r4, #8]
 8003c18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c1c:	f7ff feb2 	bl	8003984 <memset>
 8003c20:	4620      	mov	r0, r4
 8003c22:	bd70      	pop	{r4, r5, r6, pc}

08003c24 <__sfp_lock_acquire>:
 8003c24:	4801      	ldr	r0, [pc, #4]	; (8003c2c <__sfp_lock_acquire+0x8>)
 8003c26:	f000 b8b3 	b.w	8003d90 <__retarget_lock_acquire_recursive>
 8003c2a:	bf00      	nop
 8003c2c:	200001a9 	.word	0x200001a9

08003c30 <__sfp_lock_release>:
 8003c30:	4801      	ldr	r0, [pc, #4]	; (8003c38 <__sfp_lock_release+0x8>)
 8003c32:	f000 b8ae 	b.w	8003d92 <__retarget_lock_release_recursive>
 8003c36:	bf00      	nop
 8003c38:	200001a9 	.word	0x200001a9

08003c3c <__sinit_lock_acquire>:
 8003c3c:	4801      	ldr	r0, [pc, #4]	; (8003c44 <__sinit_lock_acquire+0x8>)
 8003c3e:	f000 b8a7 	b.w	8003d90 <__retarget_lock_acquire_recursive>
 8003c42:	bf00      	nop
 8003c44:	200001aa 	.word	0x200001aa

08003c48 <__sinit_lock_release>:
 8003c48:	4801      	ldr	r0, [pc, #4]	; (8003c50 <__sinit_lock_release+0x8>)
 8003c4a:	f000 b8a2 	b.w	8003d92 <__retarget_lock_release_recursive>
 8003c4e:	bf00      	nop
 8003c50:	200001aa 	.word	0x200001aa

08003c54 <__sinit>:
 8003c54:	b510      	push	{r4, lr}
 8003c56:	4604      	mov	r4, r0
 8003c58:	f7ff fff0 	bl	8003c3c <__sinit_lock_acquire>
 8003c5c:	69a3      	ldr	r3, [r4, #24]
 8003c5e:	b11b      	cbz	r3, 8003c68 <__sinit+0x14>
 8003c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c64:	f7ff bff0 	b.w	8003c48 <__sinit_lock_release>
 8003c68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003c6c:	6523      	str	r3, [r4, #80]	; 0x50
 8003c6e:	4b13      	ldr	r3, [pc, #76]	; (8003cbc <__sinit+0x68>)
 8003c70:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <__sinit+0x6c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c76:	42a3      	cmp	r3, r4
 8003c78:	bf04      	itt	eq
 8003c7a:	2301      	moveq	r3, #1
 8003c7c:	61a3      	streq	r3, [r4, #24]
 8003c7e:	4620      	mov	r0, r4
 8003c80:	f000 f820 	bl	8003cc4 <__sfp>
 8003c84:	6060      	str	r0, [r4, #4]
 8003c86:	4620      	mov	r0, r4
 8003c88:	f000 f81c 	bl	8003cc4 <__sfp>
 8003c8c:	60a0      	str	r0, [r4, #8]
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f000 f818 	bl	8003cc4 <__sfp>
 8003c94:	2200      	movs	r2, #0
 8003c96:	60e0      	str	r0, [r4, #12]
 8003c98:	2104      	movs	r1, #4
 8003c9a:	6860      	ldr	r0, [r4, #4]
 8003c9c:	f7ff ff82 	bl	8003ba4 <std>
 8003ca0:	68a0      	ldr	r0, [r4, #8]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	2109      	movs	r1, #9
 8003ca6:	f7ff ff7d 	bl	8003ba4 <std>
 8003caa:	68e0      	ldr	r0, [r4, #12]
 8003cac:	2202      	movs	r2, #2
 8003cae:	2112      	movs	r1, #18
 8003cb0:	f7ff ff78 	bl	8003ba4 <std>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	61a3      	str	r3, [r4, #24]
 8003cb8:	e7d2      	b.n	8003c60 <__sinit+0xc>
 8003cba:	bf00      	nop
 8003cbc:	08004af0 	.word	0x08004af0
 8003cc0:	08003bed 	.word	0x08003bed

08003cc4 <__sfp>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	4607      	mov	r7, r0
 8003cc8:	f7ff ffac 	bl	8003c24 <__sfp_lock_acquire>
 8003ccc:	4b1e      	ldr	r3, [pc, #120]	; (8003d48 <__sfp+0x84>)
 8003cce:	681e      	ldr	r6, [r3, #0]
 8003cd0:	69b3      	ldr	r3, [r6, #24]
 8003cd2:	b913      	cbnz	r3, 8003cda <__sfp+0x16>
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	f7ff ffbd 	bl	8003c54 <__sinit>
 8003cda:	3648      	adds	r6, #72	; 0x48
 8003cdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	d503      	bpl.n	8003cec <__sfp+0x28>
 8003ce4:	6833      	ldr	r3, [r6, #0]
 8003ce6:	b30b      	cbz	r3, 8003d2c <__sfp+0x68>
 8003ce8:	6836      	ldr	r6, [r6, #0]
 8003cea:	e7f7      	b.n	8003cdc <__sfp+0x18>
 8003cec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003cf0:	b9d5      	cbnz	r5, 8003d28 <__sfp+0x64>
 8003cf2:	4b16      	ldr	r3, [pc, #88]	; (8003d4c <__sfp+0x88>)
 8003cf4:	60e3      	str	r3, [r4, #12]
 8003cf6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003cfa:	6665      	str	r5, [r4, #100]	; 0x64
 8003cfc:	f000 f847 	bl	8003d8e <__retarget_lock_init_recursive>
 8003d00:	f7ff ff96 	bl	8003c30 <__sfp_lock_release>
 8003d04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003d08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003d0c:	6025      	str	r5, [r4, #0]
 8003d0e:	61a5      	str	r5, [r4, #24]
 8003d10:	2208      	movs	r2, #8
 8003d12:	4629      	mov	r1, r5
 8003d14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d18:	f7ff fe34 	bl	8003984 <memset>
 8003d1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d24:	4620      	mov	r0, r4
 8003d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d28:	3468      	adds	r4, #104	; 0x68
 8003d2a:	e7d9      	b.n	8003ce0 <__sfp+0x1c>
 8003d2c:	2104      	movs	r1, #4
 8003d2e:	4638      	mov	r0, r7
 8003d30:	f7ff ff62 	bl	8003bf8 <__sfmoreglue>
 8003d34:	4604      	mov	r4, r0
 8003d36:	6030      	str	r0, [r6, #0]
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d1d5      	bne.n	8003ce8 <__sfp+0x24>
 8003d3c:	f7ff ff78 	bl	8003c30 <__sfp_lock_release>
 8003d40:	230c      	movs	r3, #12
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	e7ee      	b.n	8003d24 <__sfp+0x60>
 8003d46:	bf00      	nop
 8003d48:	08004af0 	.word	0x08004af0
 8003d4c:	ffff0001 	.word	0xffff0001

08003d50 <_fwalk_reent>:
 8003d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d54:	4606      	mov	r6, r0
 8003d56:	4688      	mov	r8, r1
 8003d58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d5c:	2700      	movs	r7, #0
 8003d5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d62:	f1b9 0901 	subs.w	r9, r9, #1
 8003d66:	d505      	bpl.n	8003d74 <_fwalk_reent+0x24>
 8003d68:	6824      	ldr	r4, [r4, #0]
 8003d6a:	2c00      	cmp	r4, #0
 8003d6c:	d1f7      	bne.n	8003d5e <_fwalk_reent+0xe>
 8003d6e:	4638      	mov	r0, r7
 8003d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d74:	89ab      	ldrh	r3, [r5, #12]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d907      	bls.n	8003d8a <_fwalk_reent+0x3a>
 8003d7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	d003      	beq.n	8003d8a <_fwalk_reent+0x3a>
 8003d82:	4629      	mov	r1, r5
 8003d84:	4630      	mov	r0, r6
 8003d86:	47c0      	blx	r8
 8003d88:	4307      	orrs	r7, r0
 8003d8a:	3568      	adds	r5, #104	; 0x68
 8003d8c:	e7e9      	b.n	8003d62 <_fwalk_reent+0x12>

08003d8e <__retarget_lock_init_recursive>:
 8003d8e:	4770      	bx	lr

08003d90 <__retarget_lock_acquire_recursive>:
 8003d90:	4770      	bx	lr

08003d92 <__retarget_lock_release_recursive>:
 8003d92:	4770      	bx	lr

08003d94 <__malloc_lock>:
 8003d94:	4801      	ldr	r0, [pc, #4]	; (8003d9c <__malloc_lock+0x8>)
 8003d96:	f7ff bffb 	b.w	8003d90 <__retarget_lock_acquire_recursive>
 8003d9a:	bf00      	nop
 8003d9c:	200001a8 	.word	0x200001a8

08003da0 <__malloc_unlock>:
 8003da0:	4801      	ldr	r0, [pc, #4]	; (8003da8 <__malloc_unlock+0x8>)
 8003da2:	f7ff bff6 	b.w	8003d92 <__retarget_lock_release_recursive>
 8003da6:	bf00      	nop
 8003da8:	200001a8 	.word	0x200001a8

08003dac <__sfputc_r>:
 8003dac:	6893      	ldr	r3, [r2, #8]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	b410      	push	{r4}
 8003db4:	6093      	str	r3, [r2, #8]
 8003db6:	da08      	bge.n	8003dca <__sfputc_r+0x1e>
 8003db8:	6994      	ldr	r4, [r2, #24]
 8003dba:	42a3      	cmp	r3, r4
 8003dbc:	db01      	blt.n	8003dc2 <__sfputc_r+0x16>
 8003dbe:	290a      	cmp	r1, #10
 8003dc0:	d103      	bne.n	8003dca <__sfputc_r+0x1e>
 8003dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dc6:	f000 bb23 	b.w	8004410 <__swbuf_r>
 8003dca:	6813      	ldr	r3, [r2, #0]
 8003dcc:	1c58      	adds	r0, r3, #1
 8003dce:	6010      	str	r0, [r2, #0]
 8003dd0:	7019      	strb	r1, [r3, #0]
 8003dd2:	4608      	mov	r0, r1
 8003dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <__sfputs_r>:
 8003dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ddc:	4606      	mov	r6, r0
 8003dde:	460f      	mov	r7, r1
 8003de0:	4614      	mov	r4, r2
 8003de2:	18d5      	adds	r5, r2, r3
 8003de4:	42ac      	cmp	r4, r5
 8003de6:	d101      	bne.n	8003dec <__sfputs_r+0x12>
 8003de8:	2000      	movs	r0, #0
 8003dea:	e007      	b.n	8003dfc <__sfputs_r+0x22>
 8003dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df0:	463a      	mov	r2, r7
 8003df2:	4630      	mov	r0, r6
 8003df4:	f7ff ffda 	bl	8003dac <__sfputc_r>
 8003df8:	1c43      	adds	r3, r0, #1
 8003dfa:	d1f3      	bne.n	8003de4 <__sfputs_r+0xa>
 8003dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e00 <_vfiprintf_r>:
 8003e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e04:	460d      	mov	r5, r1
 8003e06:	b09d      	sub	sp, #116	; 0x74
 8003e08:	4614      	mov	r4, r2
 8003e0a:	4698      	mov	r8, r3
 8003e0c:	4606      	mov	r6, r0
 8003e0e:	b118      	cbz	r0, 8003e18 <_vfiprintf_r+0x18>
 8003e10:	6983      	ldr	r3, [r0, #24]
 8003e12:	b90b      	cbnz	r3, 8003e18 <_vfiprintf_r+0x18>
 8003e14:	f7ff ff1e 	bl	8003c54 <__sinit>
 8003e18:	4b89      	ldr	r3, [pc, #548]	; (8004040 <_vfiprintf_r+0x240>)
 8003e1a:	429d      	cmp	r5, r3
 8003e1c:	d11b      	bne.n	8003e56 <_vfiprintf_r+0x56>
 8003e1e:	6875      	ldr	r5, [r6, #4]
 8003e20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e22:	07d9      	lsls	r1, r3, #31
 8003e24:	d405      	bmi.n	8003e32 <_vfiprintf_r+0x32>
 8003e26:	89ab      	ldrh	r3, [r5, #12]
 8003e28:	059a      	lsls	r2, r3, #22
 8003e2a:	d402      	bmi.n	8003e32 <_vfiprintf_r+0x32>
 8003e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e2e:	f7ff ffaf 	bl	8003d90 <__retarget_lock_acquire_recursive>
 8003e32:	89ab      	ldrh	r3, [r5, #12]
 8003e34:	071b      	lsls	r3, r3, #28
 8003e36:	d501      	bpl.n	8003e3c <_vfiprintf_r+0x3c>
 8003e38:	692b      	ldr	r3, [r5, #16]
 8003e3a:	b9eb      	cbnz	r3, 8003e78 <_vfiprintf_r+0x78>
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f000 fb4a 	bl	80044d8 <__swsetup_r>
 8003e44:	b1c0      	cbz	r0, 8003e78 <_vfiprintf_r+0x78>
 8003e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e48:	07dc      	lsls	r4, r3, #31
 8003e4a:	d50e      	bpl.n	8003e6a <_vfiprintf_r+0x6a>
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e50:	b01d      	add	sp, #116	; 0x74
 8003e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e56:	4b7b      	ldr	r3, [pc, #492]	; (8004044 <_vfiprintf_r+0x244>)
 8003e58:	429d      	cmp	r5, r3
 8003e5a:	d101      	bne.n	8003e60 <_vfiprintf_r+0x60>
 8003e5c:	68b5      	ldr	r5, [r6, #8]
 8003e5e:	e7df      	b.n	8003e20 <_vfiprintf_r+0x20>
 8003e60:	4b79      	ldr	r3, [pc, #484]	; (8004048 <_vfiprintf_r+0x248>)
 8003e62:	429d      	cmp	r5, r3
 8003e64:	bf08      	it	eq
 8003e66:	68f5      	ldreq	r5, [r6, #12]
 8003e68:	e7da      	b.n	8003e20 <_vfiprintf_r+0x20>
 8003e6a:	89ab      	ldrh	r3, [r5, #12]
 8003e6c:	0598      	lsls	r0, r3, #22
 8003e6e:	d4ed      	bmi.n	8003e4c <_vfiprintf_r+0x4c>
 8003e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e72:	f7ff ff8e 	bl	8003d92 <__retarget_lock_release_recursive>
 8003e76:	e7e9      	b.n	8003e4c <_vfiprintf_r+0x4c>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e7c:	2320      	movs	r3, #32
 8003e7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e82:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e86:	2330      	movs	r3, #48	; 0x30
 8003e88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800404c <_vfiprintf_r+0x24c>
 8003e8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e90:	f04f 0901 	mov.w	r9, #1
 8003e94:	4623      	mov	r3, r4
 8003e96:	469a      	mov	sl, r3
 8003e98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e9c:	b10a      	cbz	r2, 8003ea2 <_vfiprintf_r+0xa2>
 8003e9e:	2a25      	cmp	r2, #37	; 0x25
 8003ea0:	d1f9      	bne.n	8003e96 <_vfiprintf_r+0x96>
 8003ea2:	ebba 0b04 	subs.w	fp, sl, r4
 8003ea6:	d00b      	beq.n	8003ec0 <_vfiprintf_r+0xc0>
 8003ea8:	465b      	mov	r3, fp
 8003eaa:	4622      	mov	r2, r4
 8003eac:	4629      	mov	r1, r5
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f7ff ff93 	bl	8003dda <__sfputs_r>
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	f000 80aa 	beq.w	800400e <_vfiprintf_r+0x20e>
 8003eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ebc:	445a      	add	r2, fp
 8003ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8003ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80a2 	beq.w	800400e <_vfiprintf_r+0x20e>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ed4:	f10a 0a01 	add.w	sl, sl, #1
 8003ed8:	9304      	str	r3, [sp, #16]
 8003eda:	9307      	str	r3, [sp, #28]
 8003edc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ee0:	931a      	str	r3, [sp, #104]	; 0x68
 8003ee2:	4654      	mov	r4, sl
 8003ee4:	2205      	movs	r2, #5
 8003ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eea:	4858      	ldr	r0, [pc, #352]	; (800404c <_vfiprintf_r+0x24c>)
 8003eec:	f7fc f990 	bl	8000210 <memchr>
 8003ef0:	9a04      	ldr	r2, [sp, #16]
 8003ef2:	b9d8      	cbnz	r0, 8003f2c <_vfiprintf_r+0x12c>
 8003ef4:	06d1      	lsls	r1, r2, #27
 8003ef6:	bf44      	itt	mi
 8003ef8:	2320      	movmi	r3, #32
 8003efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003efe:	0713      	lsls	r3, r2, #28
 8003f00:	bf44      	itt	mi
 8003f02:	232b      	movmi	r3, #43	; 0x2b
 8003f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f08:	f89a 3000 	ldrb.w	r3, [sl]
 8003f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f0e:	d015      	beq.n	8003f3c <_vfiprintf_r+0x13c>
 8003f10:	9a07      	ldr	r2, [sp, #28]
 8003f12:	4654      	mov	r4, sl
 8003f14:	2000      	movs	r0, #0
 8003f16:	f04f 0c0a 	mov.w	ip, #10
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f20:	3b30      	subs	r3, #48	; 0x30
 8003f22:	2b09      	cmp	r3, #9
 8003f24:	d94e      	bls.n	8003fc4 <_vfiprintf_r+0x1c4>
 8003f26:	b1b0      	cbz	r0, 8003f56 <_vfiprintf_r+0x156>
 8003f28:	9207      	str	r2, [sp, #28]
 8003f2a:	e014      	b.n	8003f56 <_vfiprintf_r+0x156>
 8003f2c:	eba0 0308 	sub.w	r3, r0, r8
 8003f30:	fa09 f303 	lsl.w	r3, r9, r3
 8003f34:	4313      	orrs	r3, r2
 8003f36:	9304      	str	r3, [sp, #16]
 8003f38:	46a2      	mov	sl, r4
 8003f3a:	e7d2      	b.n	8003ee2 <_vfiprintf_r+0xe2>
 8003f3c:	9b03      	ldr	r3, [sp, #12]
 8003f3e:	1d19      	adds	r1, r3, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	9103      	str	r1, [sp, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bfbb      	ittet	lt
 8003f48:	425b      	neglt	r3, r3
 8003f4a:	f042 0202 	orrlt.w	r2, r2, #2
 8003f4e:	9307      	strge	r3, [sp, #28]
 8003f50:	9307      	strlt	r3, [sp, #28]
 8003f52:	bfb8      	it	lt
 8003f54:	9204      	strlt	r2, [sp, #16]
 8003f56:	7823      	ldrb	r3, [r4, #0]
 8003f58:	2b2e      	cmp	r3, #46	; 0x2e
 8003f5a:	d10c      	bne.n	8003f76 <_vfiprintf_r+0x176>
 8003f5c:	7863      	ldrb	r3, [r4, #1]
 8003f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f60:	d135      	bne.n	8003fce <_vfiprintf_r+0x1ce>
 8003f62:	9b03      	ldr	r3, [sp, #12]
 8003f64:	1d1a      	adds	r2, r3, #4
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	9203      	str	r2, [sp, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bfb8      	it	lt
 8003f6e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003f72:	3402      	adds	r4, #2
 8003f74:	9305      	str	r3, [sp, #20]
 8003f76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800405c <_vfiprintf_r+0x25c>
 8003f7a:	7821      	ldrb	r1, [r4, #0]
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	4650      	mov	r0, sl
 8003f80:	f7fc f946 	bl	8000210 <memchr>
 8003f84:	b140      	cbz	r0, 8003f98 <_vfiprintf_r+0x198>
 8003f86:	2340      	movs	r3, #64	; 0x40
 8003f88:	eba0 000a 	sub.w	r0, r0, sl
 8003f8c:	fa03 f000 	lsl.w	r0, r3, r0
 8003f90:	9b04      	ldr	r3, [sp, #16]
 8003f92:	4303      	orrs	r3, r0
 8003f94:	3401      	adds	r4, #1
 8003f96:	9304      	str	r3, [sp, #16]
 8003f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f9c:	482c      	ldr	r0, [pc, #176]	; (8004050 <_vfiprintf_r+0x250>)
 8003f9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fa2:	2206      	movs	r2, #6
 8003fa4:	f7fc f934 	bl	8000210 <memchr>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d03f      	beq.n	800402c <_vfiprintf_r+0x22c>
 8003fac:	4b29      	ldr	r3, [pc, #164]	; (8004054 <_vfiprintf_r+0x254>)
 8003fae:	bb1b      	cbnz	r3, 8003ff8 <_vfiprintf_r+0x1f8>
 8003fb0:	9b03      	ldr	r3, [sp, #12]
 8003fb2:	3307      	adds	r3, #7
 8003fb4:	f023 0307 	bic.w	r3, r3, #7
 8003fb8:	3308      	adds	r3, #8
 8003fba:	9303      	str	r3, [sp, #12]
 8003fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fbe:	443b      	add	r3, r7
 8003fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc2:	e767      	b.n	8003e94 <_vfiprintf_r+0x94>
 8003fc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fc8:	460c      	mov	r4, r1
 8003fca:	2001      	movs	r0, #1
 8003fcc:	e7a5      	b.n	8003f1a <_vfiprintf_r+0x11a>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	3401      	adds	r4, #1
 8003fd2:	9305      	str	r3, [sp, #20]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	f04f 0c0a 	mov.w	ip, #10
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fe0:	3a30      	subs	r2, #48	; 0x30
 8003fe2:	2a09      	cmp	r2, #9
 8003fe4:	d903      	bls.n	8003fee <_vfiprintf_r+0x1ee>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0c5      	beq.n	8003f76 <_vfiprintf_r+0x176>
 8003fea:	9105      	str	r1, [sp, #20]
 8003fec:	e7c3      	b.n	8003f76 <_vfiprintf_r+0x176>
 8003fee:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e7f0      	b.n	8003fda <_vfiprintf_r+0x1da>
 8003ff8:	ab03      	add	r3, sp, #12
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	462a      	mov	r2, r5
 8003ffe:	4b16      	ldr	r3, [pc, #88]	; (8004058 <_vfiprintf_r+0x258>)
 8004000:	a904      	add	r1, sp, #16
 8004002:	4630      	mov	r0, r6
 8004004:	f3af 8000 	nop.w
 8004008:	4607      	mov	r7, r0
 800400a:	1c78      	adds	r0, r7, #1
 800400c:	d1d6      	bne.n	8003fbc <_vfiprintf_r+0x1bc>
 800400e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004010:	07d9      	lsls	r1, r3, #31
 8004012:	d405      	bmi.n	8004020 <_vfiprintf_r+0x220>
 8004014:	89ab      	ldrh	r3, [r5, #12]
 8004016:	059a      	lsls	r2, r3, #22
 8004018:	d402      	bmi.n	8004020 <_vfiprintf_r+0x220>
 800401a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800401c:	f7ff feb9 	bl	8003d92 <__retarget_lock_release_recursive>
 8004020:	89ab      	ldrh	r3, [r5, #12]
 8004022:	065b      	lsls	r3, r3, #25
 8004024:	f53f af12 	bmi.w	8003e4c <_vfiprintf_r+0x4c>
 8004028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800402a:	e711      	b.n	8003e50 <_vfiprintf_r+0x50>
 800402c:	ab03      	add	r3, sp, #12
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	462a      	mov	r2, r5
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <_vfiprintf_r+0x258>)
 8004034:	a904      	add	r1, sp, #16
 8004036:	4630      	mov	r0, r6
 8004038:	f000 f880 	bl	800413c <_printf_i>
 800403c:	e7e4      	b.n	8004008 <_vfiprintf_r+0x208>
 800403e:	bf00      	nop
 8004040:	08004b14 	.word	0x08004b14
 8004044:	08004b34 	.word	0x08004b34
 8004048:	08004af4 	.word	0x08004af4
 800404c:	08004b54 	.word	0x08004b54
 8004050:	08004b5e 	.word	0x08004b5e
 8004054:	00000000 	.word	0x00000000
 8004058:	08003ddb 	.word	0x08003ddb
 800405c:	08004b5a 	.word	0x08004b5a

08004060 <_printf_common>:
 8004060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004064:	4616      	mov	r6, r2
 8004066:	4699      	mov	r9, r3
 8004068:	688a      	ldr	r2, [r1, #8]
 800406a:	690b      	ldr	r3, [r1, #16]
 800406c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004070:	4293      	cmp	r3, r2
 8004072:	bfb8      	it	lt
 8004074:	4613      	movlt	r3, r2
 8004076:	6033      	str	r3, [r6, #0]
 8004078:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800407c:	4607      	mov	r7, r0
 800407e:	460c      	mov	r4, r1
 8004080:	b10a      	cbz	r2, 8004086 <_printf_common+0x26>
 8004082:	3301      	adds	r3, #1
 8004084:	6033      	str	r3, [r6, #0]
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	0699      	lsls	r1, r3, #26
 800408a:	bf42      	ittt	mi
 800408c:	6833      	ldrmi	r3, [r6, #0]
 800408e:	3302      	addmi	r3, #2
 8004090:	6033      	strmi	r3, [r6, #0]
 8004092:	6825      	ldr	r5, [r4, #0]
 8004094:	f015 0506 	ands.w	r5, r5, #6
 8004098:	d106      	bne.n	80040a8 <_printf_common+0x48>
 800409a:	f104 0a19 	add.w	sl, r4, #25
 800409e:	68e3      	ldr	r3, [r4, #12]
 80040a0:	6832      	ldr	r2, [r6, #0]
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	42ab      	cmp	r3, r5
 80040a6:	dc26      	bgt.n	80040f6 <_printf_common+0x96>
 80040a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040ac:	1e13      	subs	r3, r2, #0
 80040ae:	6822      	ldr	r2, [r4, #0]
 80040b0:	bf18      	it	ne
 80040b2:	2301      	movne	r3, #1
 80040b4:	0692      	lsls	r2, r2, #26
 80040b6:	d42b      	bmi.n	8004110 <_printf_common+0xb0>
 80040b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040bc:	4649      	mov	r1, r9
 80040be:	4638      	mov	r0, r7
 80040c0:	47c0      	blx	r8
 80040c2:	3001      	adds	r0, #1
 80040c4:	d01e      	beq.n	8004104 <_printf_common+0xa4>
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	68e5      	ldr	r5, [r4, #12]
 80040ca:	6832      	ldr	r2, [r6, #0]
 80040cc:	f003 0306 	and.w	r3, r3, #6
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	bf08      	it	eq
 80040d4:	1aad      	subeq	r5, r5, r2
 80040d6:	68a3      	ldr	r3, [r4, #8]
 80040d8:	6922      	ldr	r2, [r4, #16]
 80040da:	bf0c      	ite	eq
 80040dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040e0:	2500      	movne	r5, #0
 80040e2:	4293      	cmp	r3, r2
 80040e4:	bfc4      	itt	gt
 80040e6:	1a9b      	subgt	r3, r3, r2
 80040e8:	18ed      	addgt	r5, r5, r3
 80040ea:	2600      	movs	r6, #0
 80040ec:	341a      	adds	r4, #26
 80040ee:	42b5      	cmp	r5, r6
 80040f0:	d11a      	bne.n	8004128 <_printf_common+0xc8>
 80040f2:	2000      	movs	r0, #0
 80040f4:	e008      	b.n	8004108 <_printf_common+0xa8>
 80040f6:	2301      	movs	r3, #1
 80040f8:	4652      	mov	r2, sl
 80040fa:	4649      	mov	r1, r9
 80040fc:	4638      	mov	r0, r7
 80040fe:	47c0      	blx	r8
 8004100:	3001      	adds	r0, #1
 8004102:	d103      	bne.n	800410c <_printf_common+0xac>
 8004104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800410c:	3501      	adds	r5, #1
 800410e:	e7c6      	b.n	800409e <_printf_common+0x3e>
 8004110:	18e1      	adds	r1, r4, r3
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	2030      	movs	r0, #48	; 0x30
 8004116:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800411a:	4422      	add	r2, r4
 800411c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004120:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004124:	3302      	adds	r3, #2
 8004126:	e7c7      	b.n	80040b8 <_printf_common+0x58>
 8004128:	2301      	movs	r3, #1
 800412a:	4622      	mov	r2, r4
 800412c:	4649      	mov	r1, r9
 800412e:	4638      	mov	r0, r7
 8004130:	47c0      	blx	r8
 8004132:	3001      	adds	r0, #1
 8004134:	d0e6      	beq.n	8004104 <_printf_common+0xa4>
 8004136:	3601      	adds	r6, #1
 8004138:	e7d9      	b.n	80040ee <_printf_common+0x8e>
	...

0800413c <_printf_i>:
 800413c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004140:	7e0f      	ldrb	r7, [r1, #24]
 8004142:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004144:	2f78      	cmp	r7, #120	; 0x78
 8004146:	4691      	mov	r9, r2
 8004148:	4680      	mov	r8, r0
 800414a:	460c      	mov	r4, r1
 800414c:	469a      	mov	sl, r3
 800414e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004152:	d807      	bhi.n	8004164 <_printf_i+0x28>
 8004154:	2f62      	cmp	r7, #98	; 0x62
 8004156:	d80a      	bhi.n	800416e <_printf_i+0x32>
 8004158:	2f00      	cmp	r7, #0
 800415a:	f000 80d8 	beq.w	800430e <_printf_i+0x1d2>
 800415e:	2f58      	cmp	r7, #88	; 0x58
 8004160:	f000 80a3 	beq.w	80042aa <_printf_i+0x16e>
 8004164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004168:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800416c:	e03a      	b.n	80041e4 <_printf_i+0xa8>
 800416e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004172:	2b15      	cmp	r3, #21
 8004174:	d8f6      	bhi.n	8004164 <_printf_i+0x28>
 8004176:	a101      	add	r1, pc, #4	; (adr r1, 800417c <_printf_i+0x40>)
 8004178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800417c:	080041d5 	.word	0x080041d5
 8004180:	080041e9 	.word	0x080041e9
 8004184:	08004165 	.word	0x08004165
 8004188:	08004165 	.word	0x08004165
 800418c:	08004165 	.word	0x08004165
 8004190:	08004165 	.word	0x08004165
 8004194:	080041e9 	.word	0x080041e9
 8004198:	08004165 	.word	0x08004165
 800419c:	08004165 	.word	0x08004165
 80041a0:	08004165 	.word	0x08004165
 80041a4:	08004165 	.word	0x08004165
 80041a8:	080042f5 	.word	0x080042f5
 80041ac:	08004219 	.word	0x08004219
 80041b0:	080042d7 	.word	0x080042d7
 80041b4:	08004165 	.word	0x08004165
 80041b8:	08004165 	.word	0x08004165
 80041bc:	08004317 	.word	0x08004317
 80041c0:	08004165 	.word	0x08004165
 80041c4:	08004219 	.word	0x08004219
 80041c8:	08004165 	.word	0x08004165
 80041cc:	08004165 	.word	0x08004165
 80041d0:	080042df 	.word	0x080042df
 80041d4:	682b      	ldr	r3, [r5, #0]
 80041d6:	1d1a      	adds	r2, r3, #4
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	602a      	str	r2, [r5, #0]
 80041dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0a3      	b.n	8004330 <_printf_i+0x1f4>
 80041e8:	6820      	ldr	r0, [r4, #0]
 80041ea:	6829      	ldr	r1, [r5, #0]
 80041ec:	0606      	lsls	r6, r0, #24
 80041ee:	f101 0304 	add.w	r3, r1, #4
 80041f2:	d50a      	bpl.n	800420a <_printf_i+0xce>
 80041f4:	680e      	ldr	r6, [r1, #0]
 80041f6:	602b      	str	r3, [r5, #0]
 80041f8:	2e00      	cmp	r6, #0
 80041fa:	da03      	bge.n	8004204 <_printf_i+0xc8>
 80041fc:	232d      	movs	r3, #45	; 0x2d
 80041fe:	4276      	negs	r6, r6
 8004200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004204:	485e      	ldr	r0, [pc, #376]	; (8004380 <_printf_i+0x244>)
 8004206:	230a      	movs	r3, #10
 8004208:	e019      	b.n	800423e <_printf_i+0x102>
 800420a:	680e      	ldr	r6, [r1, #0]
 800420c:	602b      	str	r3, [r5, #0]
 800420e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004212:	bf18      	it	ne
 8004214:	b236      	sxthne	r6, r6
 8004216:	e7ef      	b.n	80041f8 <_printf_i+0xbc>
 8004218:	682b      	ldr	r3, [r5, #0]
 800421a:	6820      	ldr	r0, [r4, #0]
 800421c:	1d19      	adds	r1, r3, #4
 800421e:	6029      	str	r1, [r5, #0]
 8004220:	0601      	lsls	r1, r0, #24
 8004222:	d501      	bpl.n	8004228 <_printf_i+0xec>
 8004224:	681e      	ldr	r6, [r3, #0]
 8004226:	e002      	b.n	800422e <_printf_i+0xf2>
 8004228:	0646      	lsls	r6, r0, #25
 800422a:	d5fb      	bpl.n	8004224 <_printf_i+0xe8>
 800422c:	881e      	ldrh	r6, [r3, #0]
 800422e:	4854      	ldr	r0, [pc, #336]	; (8004380 <_printf_i+0x244>)
 8004230:	2f6f      	cmp	r7, #111	; 0x6f
 8004232:	bf0c      	ite	eq
 8004234:	2308      	moveq	r3, #8
 8004236:	230a      	movne	r3, #10
 8004238:	2100      	movs	r1, #0
 800423a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800423e:	6865      	ldr	r5, [r4, #4]
 8004240:	60a5      	str	r5, [r4, #8]
 8004242:	2d00      	cmp	r5, #0
 8004244:	bfa2      	ittt	ge
 8004246:	6821      	ldrge	r1, [r4, #0]
 8004248:	f021 0104 	bicge.w	r1, r1, #4
 800424c:	6021      	strge	r1, [r4, #0]
 800424e:	b90e      	cbnz	r6, 8004254 <_printf_i+0x118>
 8004250:	2d00      	cmp	r5, #0
 8004252:	d04d      	beq.n	80042f0 <_printf_i+0x1b4>
 8004254:	4615      	mov	r5, r2
 8004256:	fbb6 f1f3 	udiv	r1, r6, r3
 800425a:	fb03 6711 	mls	r7, r3, r1, r6
 800425e:	5dc7      	ldrb	r7, [r0, r7]
 8004260:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004264:	4637      	mov	r7, r6
 8004266:	42bb      	cmp	r3, r7
 8004268:	460e      	mov	r6, r1
 800426a:	d9f4      	bls.n	8004256 <_printf_i+0x11a>
 800426c:	2b08      	cmp	r3, #8
 800426e:	d10b      	bne.n	8004288 <_printf_i+0x14c>
 8004270:	6823      	ldr	r3, [r4, #0]
 8004272:	07de      	lsls	r6, r3, #31
 8004274:	d508      	bpl.n	8004288 <_printf_i+0x14c>
 8004276:	6923      	ldr	r3, [r4, #16]
 8004278:	6861      	ldr	r1, [r4, #4]
 800427a:	4299      	cmp	r1, r3
 800427c:	bfde      	ittt	le
 800427e:	2330      	movle	r3, #48	; 0x30
 8004280:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004284:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004288:	1b52      	subs	r2, r2, r5
 800428a:	6122      	str	r2, [r4, #16]
 800428c:	f8cd a000 	str.w	sl, [sp]
 8004290:	464b      	mov	r3, r9
 8004292:	aa03      	add	r2, sp, #12
 8004294:	4621      	mov	r1, r4
 8004296:	4640      	mov	r0, r8
 8004298:	f7ff fee2 	bl	8004060 <_printf_common>
 800429c:	3001      	adds	r0, #1
 800429e:	d14c      	bne.n	800433a <_printf_i+0x1fe>
 80042a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042a4:	b004      	add	sp, #16
 80042a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042aa:	4835      	ldr	r0, [pc, #212]	; (8004380 <_printf_i+0x244>)
 80042ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80042b0:	6829      	ldr	r1, [r5, #0]
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80042b8:	6029      	str	r1, [r5, #0]
 80042ba:	061d      	lsls	r5, r3, #24
 80042bc:	d514      	bpl.n	80042e8 <_printf_i+0x1ac>
 80042be:	07df      	lsls	r7, r3, #31
 80042c0:	bf44      	itt	mi
 80042c2:	f043 0320 	orrmi.w	r3, r3, #32
 80042c6:	6023      	strmi	r3, [r4, #0]
 80042c8:	b91e      	cbnz	r6, 80042d2 <_printf_i+0x196>
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	f023 0320 	bic.w	r3, r3, #32
 80042d0:	6023      	str	r3, [r4, #0]
 80042d2:	2310      	movs	r3, #16
 80042d4:	e7b0      	b.n	8004238 <_printf_i+0xfc>
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	f043 0320 	orr.w	r3, r3, #32
 80042dc:	6023      	str	r3, [r4, #0]
 80042de:	2378      	movs	r3, #120	; 0x78
 80042e0:	4828      	ldr	r0, [pc, #160]	; (8004384 <_printf_i+0x248>)
 80042e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042e6:	e7e3      	b.n	80042b0 <_printf_i+0x174>
 80042e8:	0659      	lsls	r1, r3, #25
 80042ea:	bf48      	it	mi
 80042ec:	b2b6      	uxthmi	r6, r6
 80042ee:	e7e6      	b.n	80042be <_printf_i+0x182>
 80042f0:	4615      	mov	r5, r2
 80042f2:	e7bb      	b.n	800426c <_printf_i+0x130>
 80042f4:	682b      	ldr	r3, [r5, #0]
 80042f6:	6826      	ldr	r6, [r4, #0]
 80042f8:	6961      	ldr	r1, [r4, #20]
 80042fa:	1d18      	adds	r0, r3, #4
 80042fc:	6028      	str	r0, [r5, #0]
 80042fe:	0635      	lsls	r5, r6, #24
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	d501      	bpl.n	8004308 <_printf_i+0x1cc>
 8004304:	6019      	str	r1, [r3, #0]
 8004306:	e002      	b.n	800430e <_printf_i+0x1d2>
 8004308:	0670      	lsls	r0, r6, #25
 800430a:	d5fb      	bpl.n	8004304 <_printf_i+0x1c8>
 800430c:	8019      	strh	r1, [r3, #0]
 800430e:	2300      	movs	r3, #0
 8004310:	6123      	str	r3, [r4, #16]
 8004312:	4615      	mov	r5, r2
 8004314:	e7ba      	b.n	800428c <_printf_i+0x150>
 8004316:	682b      	ldr	r3, [r5, #0]
 8004318:	1d1a      	adds	r2, r3, #4
 800431a:	602a      	str	r2, [r5, #0]
 800431c:	681d      	ldr	r5, [r3, #0]
 800431e:	6862      	ldr	r2, [r4, #4]
 8004320:	2100      	movs	r1, #0
 8004322:	4628      	mov	r0, r5
 8004324:	f7fb ff74 	bl	8000210 <memchr>
 8004328:	b108      	cbz	r0, 800432e <_printf_i+0x1f2>
 800432a:	1b40      	subs	r0, r0, r5
 800432c:	6060      	str	r0, [r4, #4]
 800432e:	6863      	ldr	r3, [r4, #4]
 8004330:	6123      	str	r3, [r4, #16]
 8004332:	2300      	movs	r3, #0
 8004334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004338:	e7a8      	b.n	800428c <_printf_i+0x150>
 800433a:	6923      	ldr	r3, [r4, #16]
 800433c:	462a      	mov	r2, r5
 800433e:	4649      	mov	r1, r9
 8004340:	4640      	mov	r0, r8
 8004342:	47d0      	blx	sl
 8004344:	3001      	adds	r0, #1
 8004346:	d0ab      	beq.n	80042a0 <_printf_i+0x164>
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	079b      	lsls	r3, r3, #30
 800434c:	d413      	bmi.n	8004376 <_printf_i+0x23a>
 800434e:	68e0      	ldr	r0, [r4, #12]
 8004350:	9b03      	ldr	r3, [sp, #12]
 8004352:	4298      	cmp	r0, r3
 8004354:	bfb8      	it	lt
 8004356:	4618      	movlt	r0, r3
 8004358:	e7a4      	b.n	80042a4 <_printf_i+0x168>
 800435a:	2301      	movs	r3, #1
 800435c:	4632      	mov	r2, r6
 800435e:	4649      	mov	r1, r9
 8004360:	4640      	mov	r0, r8
 8004362:	47d0      	blx	sl
 8004364:	3001      	adds	r0, #1
 8004366:	d09b      	beq.n	80042a0 <_printf_i+0x164>
 8004368:	3501      	adds	r5, #1
 800436a:	68e3      	ldr	r3, [r4, #12]
 800436c:	9903      	ldr	r1, [sp, #12]
 800436e:	1a5b      	subs	r3, r3, r1
 8004370:	42ab      	cmp	r3, r5
 8004372:	dcf2      	bgt.n	800435a <_printf_i+0x21e>
 8004374:	e7eb      	b.n	800434e <_printf_i+0x212>
 8004376:	2500      	movs	r5, #0
 8004378:	f104 0619 	add.w	r6, r4, #25
 800437c:	e7f5      	b.n	800436a <_printf_i+0x22e>
 800437e:	bf00      	nop
 8004380:	08004b65 	.word	0x08004b65
 8004384:	08004b76 	.word	0x08004b76

08004388 <__sread>:
 8004388:	b510      	push	{r4, lr}
 800438a:	460c      	mov	r4, r1
 800438c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004390:	f000 fa5a 	bl	8004848 <_read_r>
 8004394:	2800      	cmp	r0, #0
 8004396:	bfab      	itete	ge
 8004398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800439a:	89a3      	ldrhlt	r3, [r4, #12]
 800439c:	181b      	addge	r3, r3, r0
 800439e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043a2:	bfac      	ite	ge
 80043a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80043a6:	81a3      	strhlt	r3, [r4, #12]
 80043a8:	bd10      	pop	{r4, pc}

080043aa <__swrite>:
 80043aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ae:	461f      	mov	r7, r3
 80043b0:	898b      	ldrh	r3, [r1, #12]
 80043b2:	05db      	lsls	r3, r3, #23
 80043b4:	4605      	mov	r5, r0
 80043b6:	460c      	mov	r4, r1
 80043b8:	4616      	mov	r6, r2
 80043ba:	d505      	bpl.n	80043c8 <__swrite+0x1e>
 80043bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c0:	2302      	movs	r3, #2
 80043c2:	2200      	movs	r2, #0
 80043c4:	f000 f9c8 	bl	8004758 <_lseek_r>
 80043c8:	89a3      	ldrh	r3, [r4, #12]
 80043ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043d2:	81a3      	strh	r3, [r4, #12]
 80043d4:	4632      	mov	r2, r6
 80043d6:	463b      	mov	r3, r7
 80043d8:	4628      	mov	r0, r5
 80043da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043de:	f000 b869 	b.w	80044b4 <_write_r>

080043e2 <__sseek>:
 80043e2:	b510      	push	{r4, lr}
 80043e4:	460c      	mov	r4, r1
 80043e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ea:	f000 f9b5 	bl	8004758 <_lseek_r>
 80043ee:	1c43      	adds	r3, r0, #1
 80043f0:	89a3      	ldrh	r3, [r4, #12]
 80043f2:	bf15      	itete	ne
 80043f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80043f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043fe:	81a3      	strheq	r3, [r4, #12]
 8004400:	bf18      	it	ne
 8004402:	81a3      	strhne	r3, [r4, #12]
 8004404:	bd10      	pop	{r4, pc}

08004406 <__sclose>:
 8004406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800440a:	f000 b8d3 	b.w	80045b4 <_close_r>
	...

08004410 <__swbuf_r>:
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004412:	460e      	mov	r6, r1
 8004414:	4614      	mov	r4, r2
 8004416:	4605      	mov	r5, r0
 8004418:	b118      	cbz	r0, 8004422 <__swbuf_r+0x12>
 800441a:	6983      	ldr	r3, [r0, #24]
 800441c:	b90b      	cbnz	r3, 8004422 <__swbuf_r+0x12>
 800441e:	f7ff fc19 	bl	8003c54 <__sinit>
 8004422:	4b21      	ldr	r3, [pc, #132]	; (80044a8 <__swbuf_r+0x98>)
 8004424:	429c      	cmp	r4, r3
 8004426:	d12b      	bne.n	8004480 <__swbuf_r+0x70>
 8004428:	686c      	ldr	r4, [r5, #4]
 800442a:	69a3      	ldr	r3, [r4, #24]
 800442c:	60a3      	str	r3, [r4, #8]
 800442e:	89a3      	ldrh	r3, [r4, #12]
 8004430:	071a      	lsls	r2, r3, #28
 8004432:	d52f      	bpl.n	8004494 <__swbuf_r+0x84>
 8004434:	6923      	ldr	r3, [r4, #16]
 8004436:	b36b      	cbz	r3, 8004494 <__swbuf_r+0x84>
 8004438:	6923      	ldr	r3, [r4, #16]
 800443a:	6820      	ldr	r0, [r4, #0]
 800443c:	1ac0      	subs	r0, r0, r3
 800443e:	6963      	ldr	r3, [r4, #20]
 8004440:	b2f6      	uxtb	r6, r6
 8004442:	4283      	cmp	r3, r0
 8004444:	4637      	mov	r7, r6
 8004446:	dc04      	bgt.n	8004452 <__swbuf_r+0x42>
 8004448:	4621      	mov	r1, r4
 800444a:	4628      	mov	r0, r5
 800444c:	f000 f948 	bl	80046e0 <_fflush_r>
 8004450:	bb30      	cbnz	r0, 80044a0 <__swbuf_r+0x90>
 8004452:	68a3      	ldr	r3, [r4, #8]
 8004454:	3b01      	subs	r3, #1
 8004456:	60a3      	str	r3, [r4, #8]
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	6022      	str	r2, [r4, #0]
 800445e:	701e      	strb	r6, [r3, #0]
 8004460:	6963      	ldr	r3, [r4, #20]
 8004462:	3001      	adds	r0, #1
 8004464:	4283      	cmp	r3, r0
 8004466:	d004      	beq.n	8004472 <__swbuf_r+0x62>
 8004468:	89a3      	ldrh	r3, [r4, #12]
 800446a:	07db      	lsls	r3, r3, #31
 800446c:	d506      	bpl.n	800447c <__swbuf_r+0x6c>
 800446e:	2e0a      	cmp	r6, #10
 8004470:	d104      	bne.n	800447c <__swbuf_r+0x6c>
 8004472:	4621      	mov	r1, r4
 8004474:	4628      	mov	r0, r5
 8004476:	f000 f933 	bl	80046e0 <_fflush_r>
 800447a:	b988      	cbnz	r0, 80044a0 <__swbuf_r+0x90>
 800447c:	4638      	mov	r0, r7
 800447e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004480:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <__swbuf_r+0x9c>)
 8004482:	429c      	cmp	r4, r3
 8004484:	d101      	bne.n	800448a <__swbuf_r+0x7a>
 8004486:	68ac      	ldr	r4, [r5, #8]
 8004488:	e7cf      	b.n	800442a <__swbuf_r+0x1a>
 800448a:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <__swbuf_r+0xa0>)
 800448c:	429c      	cmp	r4, r3
 800448e:	bf08      	it	eq
 8004490:	68ec      	ldreq	r4, [r5, #12]
 8004492:	e7ca      	b.n	800442a <__swbuf_r+0x1a>
 8004494:	4621      	mov	r1, r4
 8004496:	4628      	mov	r0, r5
 8004498:	f000 f81e 	bl	80044d8 <__swsetup_r>
 800449c:	2800      	cmp	r0, #0
 800449e:	d0cb      	beq.n	8004438 <__swbuf_r+0x28>
 80044a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80044a4:	e7ea      	b.n	800447c <__swbuf_r+0x6c>
 80044a6:	bf00      	nop
 80044a8:	08004b14 	.word	0x08004b14
 80044ac:	08004b34 	.word	0x08004b34
 80044b0:	08004af4 	.word	0x08004af4

080044b4 <_write_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	4d07      	ldr	r5, [pc, #28]	; (80044d4 <_write_r+0x20>)
 80044b8:	4604      	mov	r4, r0
 80044ba:	4608      	mov	r0, r1
 80044bc:	4611      	mov	r1, r2
 80044be:	2200      	movs	r2, #0
 80044c0:	602a      	str	r2, [r5, #0]
 80044c2:	461a      	mov	r2, r3
 80044c4:	f7fc fdb7 	bl	8001036 <_write>
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	d102      	bne.n	80044d2 <_write_r+0x1e>
 80044cc:	682b      	ldr	r3, [r5, #0]
 80044ce:	b103      	cbz	r3, 80044d2 <_write_r+0x1e>
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
 80044d4:	200001ac 	.word	0x200001ac

080044d8 <__swsetup_r>:
 80044d8:	4b32      	ldr	r3, [pc, #200]	; (80045a4 <__swsetup_r+0xcc>)
 80044da:	b570      	push	{r4, r5, r6, lr}
 80044dc:	681d      	ldr	r5, [r3, #0]
 80044de:	4606      	mov	r6, r0
 80044e0:	460c      	mov	r4, r1
 80044e2:	b125      	cbz	r5, 80044ee <__swsetup_r+0x16>
 80044e4:	69ab      	ldr	r3, [r5, #24]
 80044e6:	b913      	cbnz	r3, 80044ee <__swsetup_r+0x16>
 80044e8:	4628      	mov	r0, r5
 80044ea:	f7ff fbb3 	bl	8003c54 <__sinit>
 80044ee:	4b2e      	ldr	r3, [pc, #184]	; (80045a8 <__swsetup_r+0xd0>)
 80044f0:	429c      	cmp	r4, r3
 80044f2:	d10f      	bne.n	8004514 <__swsetup_r+0x3c>
 80044f4:	686c      	ldr	r4, [r5, #4]
 80044f6:	89a3      	ldrh	r3, [r4, #12]
 80044f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044fc:	0719      	lsls	r1, r3, #28
 80044fe:	d42c      	bmi.n	800455a <__swsetup_r+0x82>
 8004500:	06dd      	lsls	r5, r3, #27
 8004502:	d411      	bmi.n	8004528 <__swsetup_r+0x50>
 8004504:	2309      	movs	r3, #9
 8004506:	6033      	str	r3, [r6, #0]
 8004508:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800450c:	81a3      	strh	r3, [r4, #12]
 800450e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004512:	e03e      	b.n	8004592 <__swsetup_r+0xba>
 8004514:	4b25      	ldr	r3, [pc, #148]	; (80045ac <__swsetup_r+0xd4>)
 8004516:	429c      	cmp	r4, r3
 8004518:	d101      	bne.n	800451e <__swsetup_r+0x46>
 800451a:	68ac      	ldr	r4, [r5, #8]
 800451c:	e7eb      	b.n	80044f6 <__swsetup_r+0x1e>
 800451e:	4b24      	ldr	r3, [pc, #144]	; (80045b0 <__swsetup_r+0xd8>)
 8004520:	429c      	cmp	r4, r3
 8004522:	bf08      	it	eq
 8004524:	68ec      	ldreq	r4, [r5, #12]
 8004526:	e7e6      	b.n	80044f6 <__swsetup_r+0x1e>
 8004528:	0758      	lsls	r0, r3, #29
 800452a:	d512      	bpl.n	8004552 <__swsetup_r+0x7a>
 800452c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800452e:	b141      	cbz	r1, 8004542 <__swsetup_r+0x6a>
 8004530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004534:	4299      	cmp	r1, r3
 8004536:	d002      	beq.n	800453e <__swsetup_r+0x66>
 8004538:	4630      	mov	r0, r6
 800453a:	f7ff fa2b 	bl	8003994 <_free_r>
 800453e:	2300      	movs	r3, #0
 8004540:	6363      	str	r3, [r4, #52]	; 0x34
 8004542:	89a3      	ldrh	r3, [r4, #12]
 8004544:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004548:	81a3      	strh	r3, [r4, #12]
 800454a:	2300      	movs	r3, #0
 800454c:	6063      	str	r3, [r4, #4]
 800454e:	6923      	ldr	r3, [r4, #16]
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	89a3      	ldrh	r3, [r4, #12]
 8004554:	f043 0308 	orr.w	r3, r3, #8
 8004558:	81a3      	strh	r3, [r4, #12]
 800455a:	6923      	ldr	r3, [r4, #16]
 800455c:	b94b      	cbnz	r3, 8004572 <__swsetup_r+0x9a>
 800455e:	89a3      	ldrh	r3, [r4, #12]
 8004560:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004568:	d003      	beq.n	8004572 <__swsetup_r+0x9a>
 800456a:	4621      	mov	r1, r4
 800456c:	4630      	mov	r0, r6
 800456e:	f000 f92b 	bl	80047c8 <__smakebuf_r>
 8004572:	89a0      	ldrh	r0, [r4, #12]
 8004574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004578:	f010 0301 	ands.w	r3, r0, #1
 800457c:	d00a      	beq.n	8004594 <__swsetup_r+0xbc>
 800457e:	2300      	movs	r3, #0
 8004580:	60a3      	str	r3, [r4, #8]
 8004582:	6963      	ldr	r3, [r4, #20]
 8004584:	425b      	negs	r3, r3
 8004586:	61a3      	str	r3, [r4, #24]
 8004588:	6923      	ldr	r3, [r4, #16]
 800458a:	b943      	cbnz	r3, 800459e <__swsetup_r+0xc6>
 800458c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004590:	d1ba      	bne.n	8004508 <__swsetup_r+0x30>
 8004592:	bd70      	pop	{r4, r5, r6, pc}
 8004594:	0781      	lsls	r1, r0, #30
 8004596:	bf58      	it	pl
 8004598:	6963      	ldrpl	r3, [r4, #20]
 800459a:	60a3      	str	r3, [r4, #8]
 800459c:	e7f4      	b.n	8004588 <__swsetup_r+0xb0>
 800459e:	2000      	movs	r0, #0
 80045a0:	e7f7      	b.n	8004592 <__swsetup_r+0xba>
 80045a2:	bf00      	nop
 80045a4:	2000000c 	.word	0x2000000c
 80045a8:	08004b14 	.word	0x08004b14
 80045ac:	08004b34 	.word	0x08004b34
 80045b0:	08004af4 	.word	0x08004af4

080045b4 <_close_r>:
 80045b4:	b538      	push	{r3, r4, r5, lr}
 80045b6:	4d06      	ldr	r5, [pc, #24]	; (80045d0 <_close_r+0x1c>)
 80045b8:	2300      	movs	r3, #0
 80045ba:	4604      	mov	r4, r0
 80045bc:	4608      	mov	r0, r1
 80045be:	602b      	str	r3, [r5, #0]
 80045c0:	f7fc fd55 	bl	800106e <_close>
 80045c4:	1c43      	adds	r3, r0, #1
 80045c6:	d102      	bne.n	80045ce <_close_r+0x1a>
 80045c8:	682b      	ldr	r3, [r5, #0]
 80045ca:	b103      	cbz	r3, 80045ce <_close_r+0x1a>
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	bd38      	pop	{r3, r4, r5, pc}
 80045d0:	200001ac 	.word	0x200001ac

080045d4 <__sflush_r>:
 80045d4:	898a      	ldrh	r2, [r1, #12]
 80045d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045da:	4605      	mov	r5, r0
 80045dc:	0710      	lsls	r0, r2, #28
 80045de:	460c      	mov	r4, r1
 80045e0:	d458      	bmi.n	8004694 <__sflush_r+0xc0>
 80045e2:	684b      	ldr	r3, [r1, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	dc05      	bgt.n	80045f4 <__sflush_r+0x20>
 80045e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	dc02      	bgt.n	80045f4 <__sflush_r+0x20>
 80045ee:	2000      	movs	r0, #0
 80045f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045f6:	2e00      	cmp	r6, #0
 80045f8:	d0f9      	beq.n	80045ee <__sflush_r+0x1a>
 80045fa:	2300      	movs	r3, #0
 80045fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004600:	682f      	ldr	r7, [r5, #0]
 8004602:	602b      	str	r3, [r5, #0]
 8004604:	d032      	beq.n	800466c <__sflush_r+0x98>
 8004606:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004608:	89a3      	ldrh	r3, [r4, #12]
 800460a:	075a      	lsls	r2, r3, #29
 800460c:	d505      	bpl.n	800461a <__sflush_r+0x46>
 800460e:	6863      	ldr	r3, [r4, #4]
 8004610:	1ac0      	subs	r0, r0, r3
 8004612:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004614:	b10b      	cbz	r3, 800461a <__sflush_r+0x46>
 8004616:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004618:	1ac0      	subs	r0, r0, r3
 800461a:	2300      	movs	r3, #0
 800461c:	4602      	mov	r2, r0
 800461e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004620:	6a21      	ldr	r1, [r4, #32]
 8004622:	4628      	mov	r0, r5
 8004624:	47b0      	blx	r6
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	89a3      	ldrh	r3, [r4, #12]
 800462a:	d106      	bne.n	800463a <__sflush_r+0x66>
 800462c:	6829      	ldr	r1, [r5, #0]
 800462e:	291d      	cmp	r1, #29
 8004630:	d82c      	bhi.n	800468c <__sflush_r+0xb8>
 8004632:	4a2a      	ldr	r2, [pc, #168]	; (80046dc <__sflush_r+0x108>)
 8004634:	40ca      	lsrs	r2, r1
 8004636:	07d6      	lsls	r6, r2, #31
 8004638:	d528      	bpl.n	800468c <__sflush_r+0xb8>
 800463a:	2200      	movs	r2, #0
 800463c:	6062      	str	r2, [r4, #4]
 800463e:	04d9      	lsls	r1, r3, #19
 8004640:	6922      	ldr	r2, [r4, #16]
 8004642:	6022      	str	r2, [r4, #0]
 8004644:	d504      	bpl.n	8004650 <__sflush_r+0x7c>
 8004646:	1c42      	adds	r2, r0, #1
 8004648:	d101      	bne.n	800464e <__sflush_r+0x7a>
 800464a:	682b      	ldr	r3, [r5, #0]
 800464c:	b903      	cbnz	r3, 8004650 <__sflush_r+0x7c>
 800464e:	6560      	str	r0, [r4, #84]	; 0x54
 8004650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004652:	602f      	str	r7, [r5, #0]
 8004654:	2900      	cmp	r1, #0
 8004656:	d0ca      	beq.n	80045ee <__sflush_r+0x1a>
 8004658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800465c:	4299      	cmp	r1, r3
 800465e:	d002      	beq.n	8004666 <__sflush_r+0x92>
 8004660:	4628      	mov	r0, r5
 8004662:	f7ff f997 	bl	8003994 <_free_r>
 8004666:	2000      	movs	r0, #0
 8004668:	6360      	str	r0, [r4, #52]	; 0x34
 800466a:	e7c1      	b.n	80045f0 <__sflush_r+0x1c>
 800466c:	6a21      	ldr	r1, [r4, #32]
 800466e:	2301      	movs	r3, #1
 8004670:	4628      	mov	r0, r5
 8004672:	47b0      	blx	r6
 8004674:	1c41      	adds	r1, r0, #1
 8004676:	d1c7      	bne.n	8004608 <__sflush_r+0x34>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0c4      	beq.n	8004608 <__sflush_r+0x34>
 800467e:	2b1d      	cmp	r3, #29
 8004680:	d001      	beq.n	8004686 <__sflush_r+0xb2>
 8004682:	2b16      	cmp	r3, #22
 8004684:	d101      	bne.n	800468a <__sflush_r+0xb6>
 8004686:	602f      	str	r7, [r5, #0]
 8004688:	e7b1      	b.n	80045ee <__sflush_r+0x1a>
 800468a:	89a3      	ldrh	r3, [r4, #12]
 800468c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004690:	81a3      	strh	r3, [r4, #12]
 8004692:	e7ad      	b.n	80045f0 <__sflush_r+0x1c>
 8004694:	690f      	ldr	r7, [r1, #16]
 8004696:	2f00      	cmp	r7, #0
 8004698:	d0a9      	beq.n	80045ee <__sflush_r+0x1a>
 800469a:	0793      	lsls	r3, r2, #30
 800469c:	680e      	ldr	r6, [r1, #0]
 800469e:	bf08      	it	eq
 80046a0:	694b      	ldreq	r3, [r1, #20]
 80046a2:	600f      	str	r7, [r1, #0]
 80046a4:	bf18      	it	ne
 80046a6:	2300      	movne	r3, #0
 80046a8:	eba6 0807 	sub.w	r8, r6, r7
 80046ac:	608b      	str	r3, [r1, #8]
 80046ae:	f1b8 0f00 	cmp.w	r8, #0
 80046b2:	dd9c      	ble.n	80045ee <__sflush_r+0x1a>
 80046b4:	6a21      	ldr	r1, [r4, #32]
 80046b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046b8:	4643      	mov	r3, r8
 80046ba:	463a      	mov	r2, r7
 80046bc:	4628      	mov	r0, r5
 80046be:	47b0      	blx	r6
 80046c0:	2800      	cmp	r0, #0
 80046c2:	dc06      	bgt.n	80046d2 <__sflush_r+0xfe>
 80046c4:	89a3      	ldrh	r3, [r4, #12]
 80046c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ca:	81a3      	strh	r3, [r4, #12]
 80046cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046d0:	e78e      	b.n	80045f0 <__sflush_r+0x1c>
 80046d2:	4407      	add	r7, r0
 80046d4:	eba8 0800 	sub.w	r8, r8, r0
 80046d8:	e7e9      	b.n	80046ae <__sflush_r+0xda>
 80046da:	bf00      	nop
 80046dc:	20400001 	.word	0x20400001

080046e0 <_fflush_r>:
 80046e0:	b538      	push	{r3, r4, r5, lr}
 80046e2:	690b      	ldr	r3, [r1, #16]
 80046e4:	4605      	mov	r5, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	b913      	cbnz	r3, 80046f0 <_fflush_r+0x10>
 80046ea:	2500      	movs	r5, #0
 80046ec:	4628      	mov	r0, r5
 80046ee:	bd38      	pop	{r3, r4, r5, pc}
 80046f0:	b118      	cbz	r0, 80046fa <_fflush_r+0x1a>
 80046f2:	6983      	ldr	r3, [r0, #24]
 80046f4:	b90b      	cbnz	r3, 80046fa <_fflush_r+0x1a>
 80046f6:	f7ff faad 	bl	8003c54 <__sinit>
 80046fa:	4b14      	ldr	r3, [pc, #80]	; (800474c <_fflush_r+0x6c>)
 80046fc:	429c      	cmp	r4, r3
 80046fe:	d11b      	bne.n	8004738 <_fflush_r+0x58>
 8004700:	686c      	ldr	r4, [r5, #4]
 8004702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0ef      	beq.n	80046ea <_fflush_r+0xa>
 800470a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800470c:	07d0      	lsls	r0, r2, #31
 800470e:	d404      	bmi.n	800471a <_fflush_r+0x3a>
 8004710:	0599      	lsls	r1, r3, #22
 8004712:	d402      	bmi.n	800471a <_fflush_r+0x3a>
 8004714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004716:	f7ff fb3b 	bl	8003d90 <__retarget_lock_acquire_recursive>
 800471a:	4628      	mov	r0, r5
 800471c:	4621      	mov	r1, r4
 800471e:	f7ff ff59 	bl	80045d4 <__sflush_r>
 8004722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004724:	07da      	lsls	r2, r3, #31
 8004726:	4605      	mov	r5, r0
 8004728:	d4e0      	bmi.n	80046ec <_fflush_r+0xc>
 800472a:	89a3      	ldrh	r3, [r4, #12]
 800472c:	059b      	lsls	r3, r3, #22
 800472e:	d4dd      	bmi.n	80046ec <_fflush_r+0xc>
 8004730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004732:	f7ff fb2e 	bl	8003d92 <__retarget_lock_release_recursive>
 8004736:	e7d9      	b.n	80046ec <_fflush_r+0xc>
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <_fflush_r+0x70>)
 800473a:	429c      	cmp	r4, r3
 800473c:	d101      	bne.n	8004742 <_fflush_r+0x62>
 800473e:	68ac      	ldr	r4, [r5, #8]
 8004740:	e7df      	b.n	8004702 <_fflush_r+0x22>
 8004742:	4b04      	ldr	r3, [pc, #16]	; (8004754 <_fflush_r+0x74>)
 8004744:	429c      	cmp	r4, r3
 8004746:	bf08      	it	eq
 8004748:	68ec      	ldreq	r4, [r5, #12]
 800474a:	e7da      	b.n	8004702 <_fflush_r+0x22>
 800474c:	08004b14 	.word	0x08004b14
 8004750:	08004b34 	.word	0x08004b34
 8004754:	08004af4 	.word	0x08004af4

08004758 <_lseek_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4d07      	ldr	r5, [pc, #28]	; (8004778 <_lseek_r+0x20>)
 800475c:	4604      	mov	r4, r0
 800475e:	4608      	mov	r0, r1
 8004760:	4611      	mov	r1, r2
 8004762:	2200      	movs	r2, #0
 8004764:	602a      	str	r2, [r5, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	f7fc fca8 	bl	80010bc <_lseek>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	d102      	bne.n	8004776 <_lseek_r+0x1e>
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	b103      	cbz	r3, 8004776 <_lseek_r+0x1e>
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	200001ac 	.word	0x200001ac

0800477c <__swhatbuf_r>:
 800477c:	b570      	push	{r4, r5, r6, lr}
 800477e:	460e      	mov	r6, r1
 8004780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004784:	2900      	cmp	r1, #0
 8004786:	b096      	sub	sp, #88	; 0x58
 8004788:	4614      	mov	r4, r2
 800478a:	461d      	mov	r5, r3
 800478c:	da08      	bge.n	80047a0 <__swhatbuf_r+0x24>
 800478e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	602a      	str	r2, [r5, #0]
 8004796:	061a      	lsls	r2, r3, #24
 8004798:	d410      	bmi.n	80047bc <__swhatbuf_r+0x40>
 800479a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800479e:	e00e      	b.n	80047be <__swhatbuf_r+0x42>
 80047a0:	466a      	mov	r2, sp
 80047a2:	f000 f863 	bl	800486c <_fstat_r>
 80047a6:	2800      	cmp	r0, #0
 80047a8:	dbf1      	blt.n	800478e <__swhatbuf_r+0x12>
 80047aa:	9a01      	ldr	r2, [sp, #4]
 80047ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80047b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80047b4:	425a      	negs	r2, r3
 80047b6:	415a      	adcs	r2, r3
 80047b8:	602a      	str	r2, [r5, #0]
 80047ba:	e7ee      	b.n	800479a <__swhatbuf_r+0x1e>
 80047bc:	2340      	movs	r3, #64	; 0x40
 80047be:	2000      	movs	r0, #0
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	b016      	add	sp, #88	; 0x58
 80047c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080047c8 <__smakebuf_r>:
 80047c8:	898b      	ldrh	r3, [r1, #12]
 80047ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047cc:	079d      	lsls	r5, r3, #30
 80047ce:	4606      	mov	r6, r0
 80047d0:	460c      	mov	r4, r1
 80047d2:	d507      	bpl.n	80047e4 <__smakebuf_r+0x1c>
 80047d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	6123      	str	r3, [r4, #16]
 80047dc:	2301      	movs	r3, #1
 80047de:	6163      	str	r3, [r4, #20]
 80047e0:	b002      	add	sp, #8
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	ab01      	add	r3, sp, #4
 80047e6:	466a      	mov	r2, sp
 80047e8:	f7ff ffc8 	bl	800477c <__swhatbuf_r>
 80047ec:	9900      	ldr	r1, [sp, #0]
 80047ee:	4605      	mov	r5, r0
 80047f0:	4630      	mov	r0, r6
 80047f2:	f7ff f93b 	bl	8003a6c <_malloc_r>
 80047f6:	b948      	cbnz	r0, 800480c <__smakebuf_r+0x44>
 80047f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047fc:	059a      	lsls	r2, r3, #22
 80047fe:	d4ef      	bmi.n	80047e0 <__smakebuf_r+0x18>
 8004800:	f023 0303 	bic.w	r3, r3, #3
 8004804:	f043 0302 	orr.w	r3, r3, #2
 8004808:	81a3      	strh	r3, [r4, #12]
 800480a:	e7e3      	b.n	80047d4 <__smakebuf_r+0xc>
 800480c:	4b0d      	ldr	r3, [pc, #52]	; (8004844 <__smakebuf_r+0x7c>)
 800480e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	6020      	str	r0, [r4, #0]
 8004814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004818:	81a3      	strh	r3, [r4, #12]
 800481a:	9b00      	ldr	r3, [sp, #0]
 800481c:	6163      	str	r3, [r4, #20]
 800481e:	9b01      	ldr	r3, [sp, #4]
 8004820:	6120      	str	r0, [r4, #16]
 8004822:	b15b      	cbz	r3, 800483c <__smakebuf_r+0x74>
 8004824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004828:	4630      	mov	r0, r6
 800482a:	f000 f831 	bl	8004890 <_isatty_r>
 800482e:	b128      	cbz	r0, 800483c <__smakebuf_r+0x74>
 8004830:	89a3      	ldrh	r3, [r4, #12]
 8004832:	f023 0303 	bic.w	r3, r3, #3
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	81a3      	strh	r3, [r4, #12]
 800483c:	89a0      	ldrh	r0, [r4, #12]
 800483e:	4305      	orrs	r5, r0
 8004840:	81a5      	strh	r5, [r4, #12]
 8004842:	e7cd      	b.n	80047e0 <__smakebuf_r+0x18>
 8004844:	08003bed 	.word	0x08003bed

08004848 <_read_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	4d07      	ldr	r5, [pc, #28]	; (8004868 <_read_r+0x20>)
 800484c:	4604      	mov	r4, r0
 800484e:	4608      	mov	r0, r1
 8004850:	4611      	mov	r1, r2
 8004852:	2200      	movs	r2, #0
 8004854:	602a      	str	r2, [r5, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	f7fc fbd0 	bl	8000ffc <_read>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	d102      	bne.n	8004866 <_read_r+0x1e>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	b103      	cbz	r3, 8004866 <_read_r+0x1e>
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	bd38      	pop	{r3, r4, r5, pc}
 8004868:	200001ac 	.word	0x200001ac

0800486c <_fstat_r>:
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4d07      	ldr	r5, [pc, #28]	; (800488c <_fstat_r+0x20>)
 8004870:	2300      	movs	r3, #0
 8004872:	4604      	mov	r4, r0
 8004874:	4608      	mov	r0, r1
 8004876:	4611      	mov	r1, r2
 8004878:	602b      	str	r3, [r5, #0]
 800487a:	f7fc fc04 	bl	8001086 <_fstat>
 800487e:	1c43      	adds	r3, r0, #1
 8004880:	d102      	bne.n	8004888 <_fstat_r+0x1c>
 8004882:	682b      	ldr	r3, [r5, #0]
 8004884:	b103      	cbz	r3, 8004888 <_fstat_r+0x1c>
 8004886:	6023      	str	r3, [r4, #0]
 8004888:	bd38      	pop	{r3, r4, r5, pc}
 800488a:	bf00      	nop
 800488c:	200001ac 	.word	0x200001ac

08004890 <_isatty_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	4d06      	ldr	r5, [pc, #24]	; (80048ac <_isatty_r+0x1c>)
 8004894:	2300      	movs	r3, #0
 8004896:	4604      	mov	r4, r0
 8004898:	4608      	mov	r0, r1
 800489a:	602b      	str	r3, [r5, #0]
 800489c:	f7fc fc03 	bl	80010a6 <_isatty>
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	d102      	bne.n	80048aa <_isatty_r+0x1a>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	b103      	cbz	r3, 80048aa <_isatty_r+0x1a>
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	bd38      	pop	{r3, r4, r5, pc}
 80048ac:	200001ac 	.word	0x200001ac

080048b0 <_init>:
 80048b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b2:	bf00      	nop
 80048b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b6:	bc08      	pop	{r3}
 80048b8:	469e      	mov	lr, r3
 80048ba:	4770      	bx	lr

080048bc <_fini>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	bf00      	nop
 80048c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c2:	bc08      	pop	{r3}
 80048c4:	469e      	mov	lr, r3
 80048c6:	4770      	bx	lr
